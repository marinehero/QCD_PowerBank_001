     1  000000             CHIP SN8P2711B
     2  000000             //{{SONIX_CODE_OPTION
     3  000000             	.Code_Option	LVD		LVD_H		; 2.4V Reset Enable LVD36 bit of PFLAG for 3.6V Low Voltage Indicator
     4  000000             	.Code_Option	Reset_Pin	P04
     5  000000             	.Code_Option	Watch_Dog	Always_On	; Watchdog still enable even in Green and Sleep mode
     6  000000             	.Code_Option	High_Clk	IHRC_16M	; Internal 16M RC Oscillator
     7  000000             	.Code_Option	Fcpu		#2     ; Fcpu = Fosc/4
     8  000000             	.Code_Option	Security	Enable
     9  000000             	.Code_Option	Noise_Filter	Disable
    10  000000             //}}SONIX_CODE_OPTION
    11  000000             	INCLUDESTD		MACRO1.H
    12  000000             	INCLUDESTD		MACRO2.H
    13  000000             	INCLUDESTD	 	MACRO3.H
    14  000000             	
    15  000000             .data
    16  E 00000001         	BIT0		equ	0x01
    17  E 00000002         	BIT1		equ	0x02
    18  E 00000004         	BIT2		equ	0x04
    19  E 00000008         	BIT3		equ	0x08
    20  E 00000010         	BIT4		equ	0x10
    21  E 00000020         	BIT5		equ	0x20
    22  E 00000040         	BIT6		equ	0x40
    23  E 00000080         	BIT7		equ	0x80
    24  E 00000014         	SYSTEM_TICK	equ	20	//50ms中断
    25  000000             
    26  0000 D             	flag0			ds	1
    27  E 00000000         	system_idle_flag	equ	flag0.0		//0->正常工作 1->待机模式
    28  E 00010000         	system_tick_flag	equ	flag0.1		//50ms置位一次
    29  E 00020000         	_disp_update_flag	equ	flag0.2		//刷新显示标志
    30  E 00030000         	_disp_voltage_flag	equ	flag0.3		//0->显示电量  1->显示电压
    31  E 00040000         	_input_power_flag	equ	flag0.4		//0->没有外部电源 1->有外部电源
    32  E 00050000         	_led_on_off_flag	equ	flag0.5		//0->LED_OFF	1->LED_ON
    33  E 00060000         	_lcd_init_flag		equ	flag0.6		//此标志为1表示LCD上电全显已执行过
    34  E 00070000         	_is_output_en_flag	equ	flag0.7		//0->升压输出未开启 1->升压输出开启
    35  0001 D             	tmp			ds	1		//临时变量
    36  0002 D             	_50ms_count		ds	1		//50ms计时
    37  000003             	
    38  000003             	//math.h
    39  0003 D             	_d_math_input0		ds	3     //被乘数 被除数
    40  0006 D             	_d_math_input1		ds	3     //乘数   除数
    41  0009 D             	_d_math_output0		ds 	3     //积     商
    42  000C D             	_d_math_output1		ds	3     //余数 
    43  000F D             	_count			ds	1     //循环移位计数器
    44  0010 D             	_math_tmp0		ds	1
    45  000011             
    46  000011             	//display.h
    47  0011 D             	_disp_swap_dly		ds	1	//电压和电量交替显示间隔计时
    48  0012 D             	_disp_update_dly	ds	1	//显示更新延时,避免数据刷新过快
    49  0013 D             	_disp_map		ds	3	//显存映射
    50  0016 D             	_led_scan_index		ds	1	//当前扫描的COM
    51  000017             
    52  000017             	//sensor.h
    53  0017 D             	_adc_ch_index		ds	1	//当前ADC通道
    54  0018 D             	_ad_buf_tmp		ds	2	//AD转换的结果缓冲,主要是用于做移位和对齐
    55  00001A             	//_ad_buf_l		ds	6	//此数据用于做平均值滤波,去掉最大值与最小值
    56  00001A             	//_ad_buf_h		ds	6
    57  00001A             	//_ad_buf_l_sort		ds	6	//此数据用于做平均值滤波,去掉最大值与最小值
    58  00001A             	//_ad_buf_h_sort		ds	6
    59  001A D             	_ad_buf_index		ds	1	//
    60  001B D             	_ad_buf_sort_i		ds	1	//用于对多组AD数据进行排序
    61  001C D             	_cur_input_volgate	ds	1	//当前输入电压
    62  001D D             	_cur_batt_capacity	ds	1	//当前电池电量
    63  001E D             	_batt_capacity_tmp	ds	1
    64  00001F             	
    65  001F D             	_adc_delay_count	ds	1	//转换前的延时计数
    66  0020 D             	_adc_ch_dly		ds	1	//通道采集切换延时
    67  000021             	
    68  000021             	//key.h
    69  0021 D             	_key_bit_map		ds	1	//每50MS采集一次按键状态,移位存入,挤掉最旧的位
    70  0022 D             	_led_mode		ds	1	//LED模式
    71  0023 D             	_led_dly		ds	1	//LED控制延时
    72  000024             
    73  000000             .code
    74  000000               org 0x00
    75  000000   81C8(2)    jmp reset
    76  000008               org 0x08
    77  000008   82B8(2)    jmp isr
    78  000020               org 0x20
    79  000020             
    80  000020             	include math.h
    81  000020             /*
    82  000020             	数学运算库
    83  000020             */
    84  000020             //==========================================================
    85  000020             //比较高低字节,不改变原数据
    86  000020             //num1-num2
    87  000020             //>=0: jmp->cjmp_1
    88  000020             //<0 : jmp->cjmp_2
    89  000020             //tmp0
    90  000020             comparison_16b macro  num1_l,num1_h,num2_l,num2_h,cjmp_1,cjmp_2
    91  000020                	mov  	a,num1_l	//先减低字节
    92  000020                	sub    	a,num2_l	
    93  000020                	mov  	a,num1_h	//再减高字节
    94  000020                	sbc    	a,num2_h	//
    95  000020                	b0bts0 	FC         	//
    96  000020                	jmp    	cjmp_1     	//如果等于0就 >=
    97  000020                	jmp    	cjmp_2     	//如果等于1就 <
    98  000020                	endm
    99  000020             //==================================================================================================
   100  000020             //交换两个16位数据
   101  000020             swap_16b macro num1_l,num1_h,num2_l,num2_h
   102  000020             	b0mov	a,num1_l
   103  000020             	b0xch	a,num2_l
   104  000020             	b0xch	a,num1_l
   105  000020             	b0mov	a,num1_h
   106  000020             	b0xch	a,num2_h
   107  000020             	b0xch	a,num1_h
   108  000020             	endm
   109  000020             //==================================================================================================
   110  000020             //num ++
   111  000020             cnt_inc_16b macro  num_l,num_h
   112  000020                	incms	num1_l
   113  000020                	jmp	$ + 3
   114  000020                	incms	num_h
   115  000020                	nop
   116  000020                	endm
   117  000020             //==================================================================================================
   118  000020             // num1 = num1 + num2
   119  000020             add_16b macro num1_l,num1_h,num2_l,num2_h
   120  000020                	b0mov	a,num2_l
   121  000020                	add	num1_l,a
   122  000020                	b0mov	a,num2_h
   123  000020                	adc	num1_h,a
   124  000020                	endm
   125  000020             //==================================================================================================
   126  000020             // num1 = num1 - num2
   127  000020             sub_16b macro num1_l,num1_h,num2_l,num2_h
   128  000020                	b0mov	a,num1_l
   129  000020                	sub	a,num2_l
   130  000020             	b0mov	num1_l,a
   131  000020                	b0mov	a,num1_h
   132  000020                	sbc	a,num2_h
   133  000020             	b0mov	num1_h,a
   134  000020                	endm
   135  000020             //==================================================================================================
   136  000020             	__div_u8_u8:
   137  000020             	//8位数除法
   138  000020             	//d_math_input0  = 被除数	
   139  000020             	//d_math_input1  = 除数		
   140  000020             	//d_math_output0 = 商	
   141  000020             	//d_math_output1 = 中间变量(余数)   	
   142  000020   2B09(1)  		   clr		_d_math_output0    	//清0商
   143  000021   2B0C(1)  		   clr		_d_math_output1		//清0中间变量(余数)   
   144  000022   2B0F(1)  		   clr      _count
   145  000023             		div_u8_u8_0:
   146  000023   160F(1+S)  		   incms	_count	 			//count加一
   147  000024   6286(1)  		   b0bclr	fc
   148  000025   0B09(1)  		   rlcm		_d_math_output0    	//商左移一位至
   149  000026                        	   //b0bclr	fc
   150  000026   0B03(1)  		   rlcm		_d_math_input0     	//被除数中间变量左移1位存入中间变量
   151  000027   0B0C(1)  		   rlcm		_d_math_output1
   152  000028   1E0C(1)  		   mov		a,_d_math_output1  	//中间变量减去除数
   153  000029   2206(1)  		   sub		a,_d_math_input1
   154  00002A   7286(1+S)  		   b0bts0	fc 	 				//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   155  00002B   802D(2)  		   jmp		div_u8_u8_1
   156  00002C   8030(2)  		   jmp		div_u8_u8_2
   157  00002D             		div_u8_u8_1:         	 			//没有借位
   158  00002D   1F0C(1)  		   mov		_d_math_output1,a   //得到余数
   159  00002E   6809(1)  		   b0bset	_d_math_output0.0
   160  00002F   8030(2)  		   jmp		div_u8_u8_3
   161  000030             		div_u8_u8_2:		 					//如果有借位
   162  000030             		   //b0bclr	_d_math_output0.0
   163  000030             		div_u8_u8_3:
   164  000030   2D08(1)  		   mov		a,#8	 			//判断是否循环了8次
   165  000031   070F(1+S)  		   cmprs	a,_count
   166  000032   8023(2)  		   jmp		div_u8_u8_0
   167  000033   0E00(2)  		   ret
   168  000034             
   169  000034             //==================================================================================================
   170  000034              	__div_u16_u16:
   171  000034             		//16位数除16位数除法
   172  000034             		//d_math_input0  = 被除数	
   173  000034             		//d_math_input1  = 除数		
   174  000034             		//d_math_output0 = 商	
   175  000034             		//d_math_output1 = 中间变量(余数)   	
   176  000034   2B09(1)  		   clr		_d_math_output0    		//清0商
   177  000035   2B0A(1)  		   clr      	_d_math_output0 + 1
   178  000036   2B0C(1)  		   clr		_d_math_output1			//清0中间变量(余数)   
   179  000037   2B0D(1)  		   clr		_d_math_output1 + 1
   180  000038   2B0F(1)  		   clr      	_count
   181  000039             		div_u16_u16_0:
   182  000039   160F(1+S)  		   incms	_count	 				//count加一
   183  00003A   6286(1)  		   b0bclr	fc
   184  00003B   0B09(1)  		   rlcm		_d_math_output0    		//商左移1位
   185  00003C   0B0A(1)  		   rlcm     	_d_math_output0 + 1
   186  00003D             		   //b0bclr	fc
   187  00003D   0B03(1)  		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   188  00003E   0B04(1)  		   rlcm     	_d_math_input0 + 1
   189  00003F   0B0C(1)  		   rlcm		_d_math_output1
   190  000040   0B0D(1)  		   rlcm     	_d_math_output1 + 1
   191  000041             
   192  000041   2E0C(1)  		   b0mov	a,_d_math_output1  		//中间变量减去除数
   193  000042   2206(1)  		   sub		a,_d_math_input1
   194  000043   2F10(1)  		   b0mov    	_math_tmp0,a
   195  000044   2E0D(1)  		   b0mov    	a,_d_math_output1 + 1
   196  000045   2007(1)  		   sbc      	a,_d_math_input1 + 1
   197  000046             		   //b0mov    	_tmp1,a
   198  000046   7286(1+S)  		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   199  000047   8049(2)  		   jmp		div_u16_u16_1
   200  000048   804E(2)  		   jmp		div_u16_u16_2
   201  000049             		div_u16_u16_1:         	 				//没有借位
   202  000049   2F0D(1)  		   b0mov	_d_math_output1 + 1,a   //得到余数
   203  00004A   2E10(1)  		   b0mov    	a,_math_tmp0
   204  00004B   2F0C(1)  		   b0mov    	_d_math_output1,a
   205  00004C   6809(1)  		   b0bset	_d_math_output0.0
   206  00004D   804E(2)  		   jmp		div_u16_u16_3
   207  00004E             		div_u16_u16_2:		 					//如果有借位
   208  00004E             		   //b0bclr	_d_math_output0.0
   209  00004E             		div_u16_u16_3:
   210  00004E   2D10(1)  		   mov		a,#16	 				//判断是否循环了16次
   211  00004F   070F(1+S)  		   cmprs	a,_count
   212  000050   8039(2)  		   jmp		div_u16_u16_0
   213  000051   0E00(2)  		   ret
   214  000052             //==================================================================================================
   215  000052             /* 	__div_u24_u16:
   216  000052             		//24位数除16位数除法
   217  000052             		//d_math_input0  = 被除数	
   218  000052             		//d_math_input1  = 除数		
   219  000052             		//d_math_output0 = 商	
   220  000052             		//d_math_output1 = 中间变量(余数)   	
   221  000052             		   clr          _d_math_input1 + 2		//清除数高位
   222  000052             		   clr		_d_math_output0    		//清0商
   223  000052             		   clr      	_d_math_output0 + 1
   224  000052             		   clr      	_d_math_output0 + 2
   225  000052             		   clr		_d_math_output1			//清0中间变量(余数)   
   226  000052             		   clr		_d_math_output1 + 1		
   227  000052             		   clr		_d_math_output1 + 2
   228  000052             		   clr      	_count
   229  000052             		div_u24_u16_0:
   230  000052             		   incms	_count	 				//count加一
   231  000052             		   b0bclr	fc
   232  000052             		   rlcm		_d_math_output0    		//商左移1位
   233  000052             		   rlcm     	_d_math_output0 + 1
   234  000052             		   rlcm     	_d_math_output0 + 2	
   235  000052             		   //b0bclr	fc
   236  000052             		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   237  000052             		   rlcm     	_d_math_input0 + 1
   238  000052             		   rlcm     	_d_math_input0 + 2
   239  000052             		   rlcm		_d_math_output1
   240  000052             		   rlcm     	_d_math_output1 + 1
   241  000052             	    	   rlcm     	_d_math_output1 + 2
   242  000052             
   243  000052             		   b0mov	a,_d_math_output1  		//中间变量减去除数
   244  000052             		   sub		a,_d_math_input1
   245  000052             		   b0mov    	_math_tmp0,a
   246  000052             		   b0mov    	a,_d_math_output1 + 1
   247  000052             		   sbc      	a,_d_math_input1 + 1
   248  000052             		   b0mov    	_math_tmp0 + 1,a
   249  000052             		   b0mov    	a,_d_math_output1 + 2
   250  000052             		   sbc      	a,_d_math_input1 + 2
   251  000052             		   //b0mov    	_tmp1,a
   252  000052             		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   253  000052             		   jmp		div_u24_u16_1
   254  000052             		   jmp		div_u24_u16_2
   255  000052             		div_u24_u16_1:         	 				//没有借位
   256  000052             		   b0mov	_d_math_output1 + 2,a   //得到余数
   257  000052             		   b0mov    	a,_math_tmp0
   258  000052             		   b0mov    	_d_math_output1,a
   259  000052                 		   b0mov    	a,_math_tmp0 + 1
   260  000052             		   b0mov    	_d_math_output1 + 1,a
   261  000052             		   b0bset	_d_math_output0.0
   262  000052             		   jmp		div_u24_u16_3
   263  000052             		div_u24_u16_2:		 					//如果有借位
   264  000052             		   //b0bclr	_d_math_output0.0
   265  000052             		div_u24_u16_3:
   266  000052             		   mov		a,#24	 				//判断是否循环了24次
   267  000052             		   cmprs	a,_count
   268  000052             		   jmp		div_u24_u16_0
   269  000052             		   ret
   270  000052             */
   271  000052             //==================================================================================================
   272  000052             	__mul_u16_u8: //2711B没有乘法指令
   273  000052             		//16位数 x 8位数 乘法(结果不超出24位)
   274  000052             		//d_math_input0  = 被乘数	
   275  000052             		//d_math_input1  = 乘数		
   276  000052             		//d_math_output0 = 积
   277  000052             		/*	b0mov	a,_d_math_input0+0
   278  000052             			mul	a,_d_math_input1+0
   279  000052             			b0mov	_d_math_output0,a
   280  000052             			b0mov	a,R
   281  000052             			b0mov	_d_math_output0+1,a
   282  000052             			b0mov	a,_d_math_input0+1
   283  000052             			mul	a,_d_math_input1+0
   284  000052             			add	_d_math_output0+1,a
   285  000052             			b0mov	a,R
   286  000052             			clr	_d_math_output0+2
   287  000052             			adc	_d_math_output0+2,a
   288  000052             			ret*/
   289  000052   2B05(1)  			clr		_d_math_input0 + 2     	//清被乘数高位
   290  000053   2B08(1)                          clr             _d_math_input1 + 2	//清乘数高位
   291  000054   2B07(1)  			clr             _d_math_input1 + 1	//清乘数中位
   292  000055   2B09(1)  		   	clr		_d_math_output0    	//清0积
   293  000056   2B0A(1)  			clr		_d_math_output0 + 1
   294  000057   2B0B(1)  			clr		_d_math_output0 + 2
   295  000058   2B0F(1)  		   	clr     	_count
   296  000059             		mul_u16_u8_0:
   297  000059   160F(1+S)  		   	incms		_count	 		//count加一
   298  00005A             
   299  00005A   0906(1)  			rrcm    	_d_math_input1      	//乘数右移1位
   300  00005B   7A86(1+S)  			b0bts1		fc  				
   301  00005C   8063(2)  			jmp		mul_u16_u8_1
   302  00005D             
   303  00005D   2E03(1)  			b0mov   	a,_d_math_input0     	//被乘数加到积
   304  00005E   1309(1)  			add     	_d_math_output0,a
   305  00005F   2E04(1)  			b0mov   	a,_d_math_input0 + 1
   306  000060   110A(1)  			adc     	_d_math_output0 + 1,a
   307  000061   1E05(1)  			mov		a,_d_math_input0 + 2
   308  000062   110B(1)  			adc		_d_math_output0 + 2,a
   309  000063             		mul_u16_u8_1:
   310  000063   6286(1)  			b0bclr		fc         	 			
   311  000064   0B03(1)  		   	rlcm    	_d_math_input0  	//被乘数左移
   312  000065   0B04(1)  			rlcm    	_d_math_input0 + 1
   313  000066   0B05(1)  			rlcm    	_d_math_input0 + 2
   314  000067             		mul_u16_u8_2:
   315  000067   2D08(1)  		   	mov		a,#8	 		//判断是否循环了8次
   316  000068   070F(1+S)  		   	cmprs		a,_count
   317  000069   8059(2)  		   	jmp		mul_u16_u8_0
   318  00006A   0E00(2)  			ret
   319  00006B             //==================================================================================================
   320  00006B             /*		//16位数 x 16位数 乘法(结果不超出32位)
   321  00006B             		//d_math_input0  = 被乘数	
   322  00006B             		//d_math_input1  = 乘数		
   323  00006B             		//d_math_output0 = 积
   324  00006B             		//_math_tmp0
   325  00006B             	__mul_u16_u16:
   326  00006B             		call	__mul_u16_u8
   327  00006B             		b0mov	a,_d_math_output0+0
   328  00006B             		b0mov	_math_tmp0+0,a
   329  00006B             		b0mov	a,_d_math_output0+1
   330  00006B             		b0mov	_math_tmp0+1,a
   331  00006B             		b0mov	a,_d_math_output0+2
   332  00006B             		b0mov	_math_tmp0+2,a
   333  00006B             		b0mov	a,_d_math_input1+1
   334  00006B             		b0mov	_d_math_input1+0,a
   335  00006B             		call	__mul_u16_u8
   336  00006B             		b0mov	a,_d_math_output0+2
   337  00006B             		b0mov	_d_math_output0+3,a
   338  00006B             		b0mov	a,_d_math_output0+1
   339  00006B             		b0mov	_d_math_output0+2,a
   340  00006B             		b0mov	a,_d_math_output0+0
   341  00006B             		b0mov	_d_math_output0+1,a
   342  00006B             		b0mov	a,_math_tmp0+0
   343  00006B             		b0mov	_d_math_output0+0,a 
   344  00006B             		b0mov	a,_math_tmp0+1
   345  00006B             		add	_d_math_output0+1,a
   346  00006B             		b0mov	a,_math_tmp0+2
   347  00006B             		adc	_d_math_output0+2,a
   348  00006B             		mov	a,#(0)
   349  00006B             		adc	_d_math_output0+3,a	
   350  00006B             		ret*/
   351  00006B             //==================================================================================================
   352  00006B             //end files
   353  00006B             
   354  00006B             
   355  00006B             	include sensor.h
   356  00006B             /*
   357  00006B             
   358  00006B             */
   359  00006B             //========================================================================================
   360  00006B             	//结果存入 _ad_buf_tmp
   361  00006B             	SensorADConvert_CH	macro	ch
   362  00006B             		mov	a,#(ch | BIT4 | BIT7)
   363  00006B             		b0mov	ADM,a
   364  00006B             		call	SensorADConvert
   365  00006B             		endm
   366  00006B             //========================================================================================
   367  00006B             	AdcDelay:
   368  00006B   2D32(1)  		mov	a,#(50)
   369  00006C   2F1F(1)  		b0mov	_adc_delay_count,a
   370  00006D   261F(1+S)  		decms	_adc_delay_count
   371  00006E   806D(2)  		jmp	$ - 1
   372  00006F   0E00(2)  		ret
   373  000070             //========================================================================================
   374  000070             	//启动一次ADC转换
   375  000070             	//结果存入 _ad_buf_tmp
   376  000070             	SensorADConvert:
   377  000070   2D50(1)  		MOV A, #(0x50)
   378  000071   2FB3(1)    		B0MOV ADR, A	//ADC clock: 2MHZ,ADC resolution: -1
   379  000072   2D00(1)    		MOV A, #(0x00)
   380  000073   2FAF(1)    		B0MOV VREFH, A	//Internal VREFH: 2V
   381  000074             
   382  000074   C06B(2)  		call	AdcDelay
   383  000075   6EB1(1)  		b0bset	FADS			//start adc
   384  000076             	SensorADConvert_wait_adc:
   385  000076   7DB1(1+S)  		b0bts1	FEOC			//检查ADC状态标志
   386  000077   8076(2)     		jmp	SensorADConvert_wait_adc	//eco=0：AD转换中
   387  000078   2EB2(1)  		b0mov	a,ADB
   388  000079   2F19(1)  		b0mov	_ad_buf_tmp + 1,a
   389  00007A   2EB3(1)  		b0mov	a,ADR
   390  00007B   2F18(1)  		b0mov	_ad_buf_tmp + 0,a
   391  00007C   0B18(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   392  00007D   0B18(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   393  00007E   0B18(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   394  00007F   0B18(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   395  000080   0919(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   396  000081   0918(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   397  000082   0919(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   398  000083   0918(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   399  000084   0919(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   400  000085   0918(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   401  000086   0919(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   402  000087   0918(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   403  000088   2D0F(1)  		mov	a,#(0x0f)
   404  000089   2919(1)  		and	_ad_buf_tmp + 1,a	//把高位的高4位清零
   405  00008A   0E00(2)  		ret
   406  00008B             //========================================================================================
   407  00008B             /*	//对同一个通道6次采样求平均(去掉最大值和最小值)
   408  00008B             	//结果存入 _ad_buf_tmp
   409  00008B             	SensorAdAverage:
   410  00008B             		//if(++_ad_buf_index < 6) return
   411  00008B             		incms	_ad_buf_index
   412  00008B             		nop
   413  00008B             		b0mov	a,_ad_buf_index
   414  00008B             		sub	a,#(6)
   415  00008B             		b0bts1	fc
   416  00008B             		jmp	$+2  		//<6
   417  00008B             		clr	_ad_buf_index
   418  00008B             		
   419  00008B             		call	SensorADConvert
   420  00008B             		//_ad_buf_l[_ad_buf_index] = _ad_buf_tmp+0
   421  00008B             		b0mov	Y,#(0)
   422  00008B             		b0mov	Z,#_ad_buf_l$L
   423  00008B             		b0mov	A,_ad_buf_index
   424  00008B             		add	Z,A
   425  00008B             		b0mov	a,_ad_buf_tmp+0
   426  00008B             		b0mov	@YZ,a
   427  00008B             
   428  00008B             		//_ad_buf_h[_ad_buf_index] = _ad_buf_tmp+1
   429  00008B             		//b0mov	Y,#(0)
   430  00008B             		b0mov	Z,#_ad_buf_h$L
   431  00008B             		b0mov	A,_ad_buf_index
   432  00008B             		add	Z,A
   433  00008B             		b0mov	a,_ad_buf_tmp+1
   434  00008B             		b0mov	@YZ,a
   435  00008B             	//======================================================================
   436  00008B             	//复制数据到排序缓冲区
   437  00008B             		b0mov	a,_ad_buf_l+0
   438  00008B             		b0mov	_ad_buf_l_sort+0,a
   439  00008B             		b0mov	a,_ad_buf_l+1
   440  00008B             		b0mov	_ad_buf_l_sort+1,a
   441  00008B             		b0mov	a,_ad_buf_l+2
   442  00008B             		b0mov	_ad_buf_l_sort+2,a
   443  00008B             		b0mov	a,_ad_buf_l+3
   444  00008B             		b0mov	_ad_buf_l_sort+3,a
   445  00008B             		b0mov	a,_ad_buf_l+4
   446  00008B             		b0mov	_ad_buf_l_sort+4,a
   447  00008B             		b0mov	a,_ad_buf_l+5
   448  00008B             		b0mov	_ad_buf_l_sort+5,a
   449  00008B             
   450  00008B             		b0mov	a,_ad_buf_h+0
   451  00008B             		b0mov	_ad_buf_h_sort+0,a
   452  00008B             		b0mov	a,_ad_buf_h+1
   453  00008B             		b0mov	_ad_buf_h_sort+1,a
   454  00008B             		b0mov	a,_ad_buf_h+2
   455  00008B             		b0mov	_ad_buf_h_sort+2,a
   456  00008B             		b0mov	a,_ad_buf_h+3
   457  00008B             		b0mov	_ad_buf_h_sort+3,a
   458  00008B             		b0mov	a,_ad_buf_h+4
   459  00008B             		b0mov	_ad_buf_h_sort+4,a
   460  00008B             		b0mov	a,_ad_buf_h+5
   461  00008B             		b0mov	_ad_buf_h_sort+5,a
   462  00008B             	//======================================================================
   463  00008B             	//排序
   464  00008B             		mov	a,#(5)
   465  00008B             		b0mov	_ad_buf_sort_i,a
   466  00008B                	SensorAdAverage_comp_01:
   467  00008B             		comparison_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1,SensorAdAverage_swap_01,SensorAdAverage_comp_12
   468  00008B             	SensorAdAverage_swap_01:
   469  00008B             		swap_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   470  00008B             	SensorAdAverage_comp_12:
   471  00008B             		comparison_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2,SensorAdAverage_swap_12,SensorAdAverage_comp_23
   472  00008B             	SensorAdAverage_swap_12:
   473  00008B             		swap_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   474  00008B             	SensorAdAverage_comp_23:
   475  00008B             		comparison_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3,SensorAdAverage_swap_23,SensorAdAverage_comp_34
   476  00008B             	SensorAdAverage_swap_23:
   477  00008B             		swap_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   478  00008B             	SensorAdAverage_comp_34:
   479  00008B             		comparison_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4,SensorAdAverage_swap_34,SensorAdAverage_comp_45
   480  00008B             	SensorAdAverage_swap_34:
   481  00008B             		swap_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   482  00008B             	SensorAdAverage_comp_45:
   483  00008B             		comparison_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5,SensorAdAverage_swap_45,SensorAdAverage_comp_56
   484  00008B             	SensorAdAverage_swap_45:
   485  00008B             		swap_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5
   486  00008B             	SensorAdAverage_comp_56:
   487  00008B             		decms	_ad_buf_sort_i
   488  00008B             		jmp	SensorAdAverage_comp_01
   489  00008B             	//======================================================================
   490  00008B             	//求中间四次的平均值,去掉最大的1个和最小的1个数
   491  00008B             		clr	_ad_buf_tmp+0	
   492  00008B             		clr	_ad_buf_tmp+1
   493  00008B             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   494  00008B             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   495  00008B             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   496  00008B             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   497  00008B             	
   498  00008B             		rrcm	_ad_buf_tmp+1	;高位带进位右移
   499  00008B                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   500  00008B                		rrcm	_ad_buf_tmp+1	;高位带进位右移
   501  00008B                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   502  00008B                		mov	a,#(0x0F) 	;把高位的左4为置0
   503  00008B                		and	_ad_buf_tmp+1,a
   504  00008B             		ret*/
   505  00008B             //========================================================================================
   506  00008B             //计算电池电量
   507  00008B             /*	//AD = 256 * V(0.1V) / 5  
   508  00008B             	//4096 = 256 * 80 / 5
   509  00008B             	batt_capacity_tab_add:
   510  00008B             		dw	2150	//4.2
   511  00008B             		dw	2110
   512  00008B             		dw	2070
   513  00008B             		dw	2030
   514  00008B             		dw	1990
   515  00008B             		dw	1950
   516  00008B             		dw	1910
   517  00008B             		dw	1870	
   518  00008B             		dw	1830
   519  00008B             		dw	1790
   520  00008B             		dw	1750	//3.42
   521  00008B             	batt_capacity_tab_dec:
   522  00008B             		dw	2090	//4.08
   523  00008B             		dw	2040
   524  00008B             		dw	1990
   525  00008B             		dw	1940
   526  00008B             		dw	1890
   527  00008B             		dw	1840
   528  00008B             		dw	1790
   529  00008B             		dw	1740
   530  00008B             		dw	1690
   531  00008B             		dw	1640
   532  00008B             		dw	1590	//3.1
   533  00008B             */
   534  00008B             	SensorMathBattCapacity:
   535  00008B   7C00(1+S)  		b0bts1	_input_power_flag
   536  00008C   810E(2)  		jmp	SensorMathBattCapacity_DEC
   537  00008D             //==================================================================================================
   538  00008D             		comparison_16b	#(2155&0xff),#((2155>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_nofull,SensorMathBattCapacity_ADD_full
   539  00008D   2D6B(1)     	mov  	a,#(2155&0xff)	//先减低字节
   540  00008E   2218(1)     	sub    	a,_ad_buf_tmp+0	
   541  00008F   2D08(1)     	mov  	a,#((2155>>8)&0xff)	//再减高字节
   542  000090   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   543  000091   7286(1+S)     	b0bts0 	FC         	//
   544  000092   8097(2)     	jmp    	SensorMathBattCapacity_ADD_nofull     	//如果等于0就 >=
   545  000093   8094(2)     	jmp    	SensorMathBattCapacity_ADD_full     	//如果等于1就 <
   546  000094             	SensorMathBattCapacity_ADD_full:
   547  000094   2D64(1)  		mov	a,#(100)
   548  000095   2F1D(1)  		b0mov	_cur_batt_capacity,a
   549  000096   818E(2)  		jmp	SensorMathBattCapacity_Exit
   550  000097             	SensorMathBattCapacity_ADD_nofull:
   551  000097             		comparison_16b	#(2150&0xff),#((2150>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_90,SensorMathBattCapacity_ADD_99
   552  000097   2D66(1)     	mov  	a,#(2150&0xff)	//先减低字节
   553  000098   2218(1)     	sub    	a,_ad_buf_tmp+0	
   554  000099   2D08(1)     	mov  	a,#((2150>>8)&0xff)	//再减高字节
   555  00009A   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   556  00009B   7286(1+S)     	b0bts0 	FC         	//
   557  00009C   80A1(2)     	jmp    	SensorMathBattCapacity_ADD_90     	//如果等于0就 >=
   558  00009D   809E(2)     	jmp    	SensorMathBattCapacity_ADD_99     	//如果等于1就 <
   559  00009E             	SensorMathBattCapacity_ADD_99:
   560  00009E   2D63(1)  		mov	a,#(99)
   561  00009F   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   562  0000A0   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   563  0000A1             	SensorMathBattCapacity_ADD_90:
   564  0000A1             		comparison_16b	#(2110&0xff),#((2110>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_80,SensorMathBattCapacity_ADD_90_more
   565  0000A1   2D3E(1)     	mov  	a,#(2110&0xff)	//先减低字节
   566  0000A2   2218(1)     	sub    	a,_ad_buf_tmp+0	
   567  0000A3   2D08(1)     	mov  	a,#((2110>>8)&0xff)	//再减高字节
   568  0000A4   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   569  0000A5   7286(1+S)     	b0bts0 	FC         	//
   570  0000A6   80AB(2)     	jmp    	SensorMathBattCapacity_ADD_80     	//如果等于0就 >=
   571  0000A7   80A8(2)     	jmp    	SensorMathBattCapacity_ADD_90_more     	//如果等于1就 <
   572  0000A8             	SensorMathBattCapacity_ADD_90_more:
   573  0000A8   2D5A(1)  		mov	a,#(90)
   574  0000A9   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   575  0000AA   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   576  0000AB             	SensorMathBattCapacity_ADD_80:
   577  0000AB             		comparison_16b	#(2070&0xff),#((2070>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_70,SensorMathBattCapacity_ADD_80_more
   578  0000AB   2D16(1)     	mov  	a,#(2070&0xff)	//先减低字节
   579  0000AC   2218(1)     	sub    	a,_ad_buf_tmp+0	
   580  0000AD   2D08(1)     	mov  	a,#((2070>>8)&0xff)	//再减高字节
   581  0000AE   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   582  0000AF   7286(1+S)     	b0bts0 	FC         	//
   583  0000B0   80B5(2)     	jmp    	SensorMathBattCapacity_ADD_70     	//如果等于0就 >=
   584  0000B1   80B2(2)     	jmp    	SensorMathBattCapacity_ADD_80_more     	//如果等于1就 <
   585  0000B2             	SensorMathBattCapacity_ADD_80_more:
   586  0000B2   2D50(1)  		mov	a,#(80)
   587  0000B3   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   588  0000B4   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   589  0000B5             	SensorMathBattCapacity_ADD_70:
   590  0000B5             		comparison_16b	#(2030&0xff),#((2030>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_60,SensorMathBattCapacity_ADD_70_more
   591  0000B5   2DEE(1)     	mov  	a,#(2030&0xff)	//先减低字节
   592  0000B6   2218(1)     	sub    	a,_ad_buf_tmp+0	
   593  0000B7   2D07(1)     	mov  	a,#((2030>>8)&0xff)	//再减高字节
   594  0000B8   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   595  0000B9   7286(1+S)     	b0bts0 	FC         	//
   596  0000BA   80BF(2)     	jmp    	SensorMathBattCapacity_ADD_60     	//如果等于0就 >=
   597  0000BB   80BC(2)     	jmp    	SensorMathBattCapacity_ADD_70_more     	//如果等于1就 <
   598  0000BC             	SensorMathBattCapacity_ADD_70_more:
   599  0000BC   2D46(1)  		mov	a,#(70)
   600  0000BD   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   601  0000BE   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   602  0000BF             	SensorMathBattCapacity_ADD_60:
   603  0000BF             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_50,SensorMathBattCapacity_ADD_60_more
   604  0000BF   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   605  0000C0   2218(1)     	sub    	a,_ad_buf_tmp+0	
   606  0000C1   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   607  0000C2   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   608  0000C3   7286(1+S)     	b0bts0 	FC         	//
   609  0000C4   80C9(2)     	jmp    	SensorMathBattCapacity_ADD_50     	//如果等于0就 >=
   610  0000C5   80C6(2)     	jmp    	SensorMathBattCapacity_ADD_60_more     	//如果等于1就 <
   611  0000C6             	SensorMathBattCapacity_ADD_60_more:
   612  0000C6   2D3C(1)  		mov	a,#(60)
   613  0000C7   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   614  0000C8   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   615  0000C9             	SensorMathBattCapacity_ADD_50:
   616  0000C9             		comparison_16b	#(1950&0xff),#((1950>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_40,SensorMathBattCapacity_ADD_50_more
   617  0000C9   2D9E(1)     	mov  	a,#(1950&0xff)	//先减低字节
   618  0000CA   2218(1)     	sub    	a,_ad_buf_tmp+0	
   619  0000CB   2D07(1)     	mov  	a,#((1950>>8)&0xff)	//再减高字节
   620  0000CC   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   621  0000CD   7286(1+S)     	b0bts0 	FC         	//
   622  0000CE   80D3(2)     	jmp    	SensorMathBattCapacity_ADD_40     	//如果等于0就 >=
   623  0000CF   80D0(2)     	jmp    	SensorMathBattCapacity_ADD_50_more     	//如果等于1就 <
   624  0000D0             	SensorMathBattCapacity_ADD_50_more:
   625  0000D0   2D32(1)  		mov	a,#(50)
   626  0000D1   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   627  0000D2   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   628  0000D3             	SensorMathBattCapacity_ADD_40:
   629  0000D3             		comparison_16b	#(1910&0xff),#((1910>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_30,SensorMathBattCapacity_ADD_40_more
   630  0000D3   2D76(1)     	mov  	a,#(1910&0xff)	//先减低字节
   631  0000D4   2218(1)     	sub    	a,_ad_buf_tmp+0	
   632  0000D5   2D07(1)     	mov  	a,#((1910>>8)&0xff)	//再减高字节
   633  0000D6   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   634  0000D7   7286(1+S)     	b0bts0 	FC         	//
   635  0000D8   80DD(2)     	jmp    	SensorMathBattCapacity_ADD_30     	//如果等于0就 >=
   636  0000D9   80DA(2)     	jmp    	SensorMathBattCapacity_ADD_40_more     	//如果等于1就 <
   637  0000DA             	SensorMathBattCapacity_ADD_40_more:
   638  0000DA   2D28(1)  		mov	a,#(40)
   639  0000DB   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   640  0000DC   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   641  0000DD             	SensorMathBattCapacity_ADD_30:
   642  0000DD             		comparison_16b	#(1870&0xff),#((1870>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_20,SensorMathBattCapacity_ADD_30_more
   643  0000DD   2D4E(1)     	mov  	a,#(1870&0xff)	//先减低字节
   644  0000DE   2218(1)     	sub    	a,_ad_buf_tmp+0	
   645  0000DF   2D07(1)     	mov  	a,#((1870>>8)&0xff)	//再减高字节
   646  0000E0   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   647  0000E1   7286(1+S)     	b0bts0 	FC         	//
   648  0000E2   80E7(2)     	jmp    	SensorMathBattCapacity_ADD_20     	//如果等于0就 >=
   649  0000E3   80E4(2)     	jmp    	SensorMathBattCapacity_ADD_30_more     	//如果等于1就 <
   650  0000E4             	SensorMathBattCapacity_ADD_30_more:
   651  0000E4   2D1E(1)  		mov	a,#(30)
   652  0000E5   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   653  0000E6   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   654  0000E7             	SensorMathBattCapacity_ADD_20:
   655  0000E7             		comparison_16b	#(1830&0xff),#((1830>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_10,SensorMathBattCapacity_ADD_20_more
   656  0000E7   2D26(1)     	mov  	a,#(1830&0xff)	//先减低字节
   657  0000E8   2218(1)     	sub    	a,_ad_buf_tmp+0	
   658  0000E9   2D07(1)     	mov  	a,#((1830>>8)&0xff)	//再减高字节
   659  0000EA   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   660  0000EB   7286(1+S)     	b0bts0 	FC         	//
   661  0000EC   80F1(2)     	jmp    	SensorMathBattCapacity_ADD_10     	//如果等于0就 >=
   662  0000ED   80EE(2)     	jmp    	SensorMathBattCapacity_ADD_20_more     	//如果等于1就 <
   663  0000EE             	SensorMathBattCapacity_ADD_20_more:
   664  0000EE   2D14(1)  		mov	a,#(20)
   665  0000EF   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   666  0000F0   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   667  0000F1             	SensorMathBattCapacity_ADD_10:
   668  0000F1             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0,SensorMathBattCapacity_ADD_10_more
   669  0000F1   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   670  0000F2   2218(1)     	sub    	a,_ad_buf_tmp+0	
   671  0000F3   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   672  0000F4   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   673  0000F5   7286(1+S)     	b0bts0 	FC         	//
   674  0000F6   80FB(2)     	jmp    	SensorMathBattCapacity_ADD_0     	//如果等于0就 >=
   675  0000F7   80F8(2)     	jmp    	SensorMathBattCapacity_ADD_10_more     	//如果等于1就 <
   676  0000F8             	SensorMathBattCapacity_ADD_10_more:
   677  0000F8   2D0A(1)  		mov	a,#(10)
   678  0000F9   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   679  0000FA   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   680  0000FB             	SensorMathBattCapacity_ADD_0:
   681  0000FB             		comparison_16b	#(1750&0xff),#((1750>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0_less,SensorMathBattCapacity_ADD_0_more
   682  0000FB   2DD6(1)     	mov  	a,#(1750&0xff)	//先减低字节
   683  0000FC   2218(1)     	sub    	a,_ad_buf_tmp+0	
   684  0000FD   2D06(1)     	mov  	a,#((1750>>8)&0xff)	//再减高字节
   685  0000FE   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   686  0000FF   7286(1+S)     	b0bts0 	FC         	//
   687  000100   8105(2)     	jmp    	SensorMathBattCapacity_ADD_0_less     	//如果等于0就 >=
   688  000101   8102(2)     	jmp    	SensorMathBattCapacity_ADD_0_more     	//如果等于1就 <
   689  000102             	SensorMathBattCapacity_ADD_0_more:
   690  000102   2D01(1)  		mov	a,#(1)
   691  000103   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   692  000104   8107(2)  		jmp	SensorMathBattCapacity_ADD_End
   693  000105             	SensorMathBattCapacity_ADD_0_less:
   694  000105   2D00(1)  		mov	a,#(0)
   695  000106   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   696  000107             	SensorMathBattCapacity_ADD_End:
   697  000107   2E1E(1)  		b0mov	a,_batt_capacity_tmp
   698  000108   221D(1)  		sub	a,_cur_batt_capacity
   699  000109   7A86(1+S)  		b0bts1	fc
   700  00010A   818E(2)  		jmp	SensorMathBattCapacity_Exit
   701  00010B   2E1E(1)  		b0mov	a,_batt_capacity_tmp
   702  00010C   2F1D(1)  		b0mov	_cur_batt_capacity,a
   703  00010D   818E(2)  		jmp	SensorMathBattCapacity_Exit
   704  00010E             //==================================================================================================
   705  00010E             	SensorMathBattCapacity_DEC:
   706  00010E             	comparison_16b	#(2095&0xff),#((2095>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_nofull,SensorMathBattCapacity_DEC_full
   707  00010E   2D2F(1)     	mov  	a,#(2095&0xff)	//先减低字节
   708  00010F   2218(1)     	sub    	a,_ad_buf_tmp+0	
   709  000110   2D08(1)     	mov  	a,#((2095>>8)&0xff)	//再减高字节
   710  000111   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   711  000112   7286(1+S)     	b0bts0 	FC         	//
   712  000113   8118(2)     	jmp    	SensorMathBattCapacity_DEC_nofull     	//如果等于0就 >=
   713  000114   8115(2)     	jmp    	SensorMathBattCapacity_DEC_full     	//如果等于1就 <
   714  000115             	SensorMathBattCapacity_DEC_full:
   715  000115   2D64(1)  		mov	a,#(100)
   716  000116   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   717  000117   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   718  000118             	SensorMathBattCapacity_DEC_nofull:
   719  000118             		comparison_16b	#(2090&0xff),#((2090>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_90,SensorMathBattCapacity_DEC_99
   720  000118   2D2A(1)     	mov  	a,#(2090&0xff)	//先减低字节
   721  000119   2218(1)     	sub    	a,_ad_buf_tmp+0	
   722  00011A   2D08(1)     	mov  	a,#((2090>>8)&0xff)	//再减高字节
   723  00011B   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   724  00011C   7286(1+S)     	b0bts0 	FC         	//
   725  00011D   8122(2)     	jmp    	SensorMathBattCapacity_DEC_90     	//如果等于0就 >=
   726  00011E   811F(2)     	jmp    	SensorMathBattCapacity_DEC_99     	//如果等于1就 <
   727  00011F             	SensorMathBattCapacity_DEC_99:
   728  00011F   2D63(1)  		mov	a,#(99)
   729  000120   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   730  000121   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   731  000122             	SensorMathBattCapacity_DEC_90:
   732  000122             		comparison_16b	#(2040&0xff),#((2040>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_80,SensorMathBattCapacity_DEC_90_more
   733  000122   2DF8(1)     	mov  	a,#(2040&0xff)	//先减低字节
   734  000123   2218(1)     	sub    	a,_ad_buf_tmp+0	
   735  000124   2D07(1)     	mov  	a,#((2040>>8)&0xff)	//再减高字节
   736  000125   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   737  000126   7286(1+S)     	b0bts0 	FC         	//
   738  000127   812C(2)     	jmp    	SensorMathBattCapacity_DEC_80     	//如果等于0就 >=
   739  000128   8129(2)     	jmp    	SensorMathBattCapacity_DEC_90_more     	//如果等于1就 <
   740  000129             	SensorMathBattCapacity_DEC_90_more:
   741  000129   2D5A(1)  		mov	a,#(90)
   742  00012A   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   743  00012B   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   744  00012C             	SensorMathBattCapacity_DEC_80:
   745  00012C             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_70,SensorMathBattCapacity_DEC_80_more
   746  00012C   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   747  00012D   2218(1)     	sub    	a,_ad_buf_tmp+0	
   748  00012E   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   749  00012F   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   750  000130   7286(1+S)     	b0bts0 	FC         	//
   751  000131   8136(2)     	jmp    	SensorMathBattCapacity_DEC_70     	//如果等于0就 >=
   752  000132   8133(2)     	jmp    	SensorMathBattCapacity_DEC_80_more     	//如果等于1就 <
   753  000133             	SensorMathBattCapacity_DEC_80_more:
   754  000133   2D50(1)  		mov	a,#(80)
   755  000134   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   756  000135   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   757  000136             	SensorMathBattCapacity_DEC_70:
   758  000136             		comparison_16b	#(1940&0xff),#((1940>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_60,SensorMathBattCapacity_DEC_70_more
   759  000136   2D94(1)     	mov  	a,#(1940&0xff)	//先减低字节
   760  000137   2218(1)     	sub    	a,_ad_buf_tmp+0	
   761  000138   2D07(1)     	mov  	a,#((1940>>8)&0xff)	//再减高字节
   762  000139   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   763  00013A   7286(1+S)     	b0bts0 	FC         	//
   764  00013B   8140(2)     	jmp    	SensorMathBattCapacity_DEC_60     	//如果等于0就 >=
   765  00013C   813D(2)     	jmp    	SensorMathBattCapacity_DEC_70_more     	//如果等于1就 <
   766  00013D             	SensorMathBattCapacity_DEC_70_more:
   767  00013D   2D46(1)  		mov	a,#(70)
   768  00013E   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   769  00013F   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   770  000140             	SensorMathBattCapacity_DEC_60:
   771  000140             		comparison_16b	#(1890&0xff),#((1890>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_50,SensorMathBattCapacity_DEC_60_more
   772  000140   2D62(1)     	mov  	a,#(1890&0xff)	//先减低字节
   773  000141   2218(1)     	sub    	a,_ad_buf_tmp+0	
   774  000142   2D07(1)     	mov  	a,#((1890>>8)&0xff)	//再减高字节
   775  000143   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   776  000144   7286(1+S)     	b0bts0 	FC         	//
   777  000145   814A(2)     	jmp    	SensorMathBattCapacity_DEC_50     	//如果等于0就 >=
   778  000146   8147(2)     	jmp    	SensorMathBattCapacity_DEC_60_more     	//如果等于1就 <
   779  000147             	SensorMathBattCapacity_DEC_60_more:
   780  000147   2D3C(1)  		mov	a,#(60)
   781  000148   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   782  000149   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   783  00014A             	SensorMathBattCapacity_DEC_50:
   784  00014A             		comparison_16b	#(1840&0xff),#((1840>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_40,SensorMathBattCapacity_DEC_50_more
   785  00014A   2D30(1)     	mov  	a,#(1840&0xff)	//先减低字节
   786  00014B   2218(1)     	sub    	a,_ad_buf_tmp+0	
   787  00014C   2D07(1)     	mov  	a,#((1840>>8)&0xff)	//再减高字节
   788  00014D   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   789  00014E   7286(1+S)     	b0bts0 	FC         	//
   790  00014F   8154(2)     	jmp    	SensorMathBattCapacity_DEC_40     	//如果等于0就 >=
   791  000150   8151(2)     	jmp    	SensorMathBattCapacity_DEC_50_more     	//如果等于1就 <
   792  000151             	SensorMathBattCapacity_DEC_50_more:
   793  000151   2D32(1)  		mov	a,#(50)
   794  000152   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   795  000153   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   796  000154             	SensorMathBattCapacity_DEC_40:
   797  000154             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_30,SensorMathBattCapacity_DEC_40_more
   798  000154   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   799  000155   2218(1)     	sub    	a,_ad_buf_tmp+0	
   800  000156   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   801  000157   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   802  000158   7286(1+S)     	b0bts0 	FC         	//
   803  000159   815E(2)     	jmp    	SensorMathBattCapacity_DEC_30     	//如果等于0就 >=
   804  00015A   815B(2)     	jmp    	SensorMathBattCapacity_DEC_40_more     	//如果等于1就 <
   805  00015B             	SensorMathBattCapacity_DEC_40_more:
   806  00015B   2D28(1)  		mov	a,#(40)
   807  00015C   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   808  00015D   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   809  00015E             	SensorMathBattCapacity_DEC_30:
   810  00015E             		comparison_16b	#(1740&0xff),#((1740>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_20,SensorMathBattCapacity_DEC_30_more
   811  00015E   2DCC(1)     	mov  	a,#(1740&0xff)	//先减低字节
   812  00015F   2218(1)     	sub    	a,_ad_buf_tmp+0	
   813  000160   2D06(1)     	mov  	a,#((1740>>8)&0xff)	//再减高字节
   814  000161   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   815  000162   7286(1+S)     	b0bts0 	FC         	//
   816  000163   8168(2)     	jmp    	SensorMathBattCapacity_DEC_20     	//如果等于0就 >=
   817  000164   8165(2)     	jmp    	SensorMathBattCapacity_DEC_30_more     	//如果等于1就 <
   818  000165             	SensorMathBattCapacity_DEC_30_more:
   819  000165   2D1E(1)  		mov	a,#(30)
   820  000166   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   821  000167   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   822  000168             	SensorMathBattCapacity_DEC_20:
   823  000168             		comparison_16b	#(1690&0xff),#((1690>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_10,SensorMathBattCapacity_DEC_20_more
   824  000168   2D9A(1)     	mov  	a,#(1690&0xff)	//先减低字节
   825  000169   2218(1)     	sub    	a,_ad_buf_tmp+0	
   826  00016A   2D06(1)     	mov  	a,#((1690>>8)&0xff)	//再减高字节
   827  00016B   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   828  00016C   7286(1+S)     	b0bts0 	FC         	//
   829  00016D   8172(2)     	jmp    	SensorMathBattCapacity_DEC_10     	//如果等于0就 >=
   830  00016E   816F(2)     	jmp    	SensorMathBattCapacity_DEC_20_more     	//如果等于1就 <
   831  00016F             	SensorMathBattCapacity_DEC_20_more:
   832  00016F   2D14(1)  		mov	a,#(20)
   833  000170   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   834  000171   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   835  000172             	SensorMathBattCapacity_DEC_10:
   836  000172             		comparison_16b	#(1640&0xff),#((1640>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0,SensorMathBattCapacity_DEC_10_more
   837  000172   2D68(1)     	mov  	a,#(1640&0xff)	//先减低字节
   838  000173   2218(1)     	sub    	a,_ad_buf_tmp+0	
   839  000174   2D06(1)     	mov  	a,#((1640>>8)&0xff)	//再减高字节
   840  000175   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   841  000176   7286(1+S)     	b0bts0 	FC         	//
   842  000177   817C(2)     	jmp    	SensorMathBattCapacity_DEC_0     	//如果等于0就 >=
   843  000178   8179(2)     	jmp    	SensorMathBattCapacity_DEC_10_more     	//如果等于1就 <
   844  000179             	SensorMathBattCapacity_DEC_10_more:
   845  000179   2D0A(1)  		mov	a,#(10)
   846  00017A   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   847  00017B   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   848  00017C             	SensorMathBattCapacity_DEC_0:
   849  00017C             		comparison_16b	#(1590&0xff),#((1590>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0_less,SensorMathBattCapacity_DEC_0_more
   850  00017C   2D36(1)     	mov  	a,#(1590&0xff)	//先减低字节
   851  00017D   2218(1)     	sub    	a,_ad_buf_tmp+0	
   852  00017E   2D06(1)     	mov  	a,#((1590>>8)&0xff)	//再减高字节
   853  00017F   2019(1)     	sbc    	a,_ad_buf_tmp+1	//
   854  000180   7286(1+S)     	b0bts0 	FC         	//
   855  000181   8186(2)     	jmp    	SensorMathBattCapacity_DEC_0_less     	//如果等于0就 >=
   856  000182   8183(2)     	jmp    	SensorMathBattCapacity_DEC_0_more     	//如果等于1就 <
   857  000183             	SensorMathBattCapacity_DEC_0_more:
   858  000183   2D01(1)  		mov	a,#(1)
   859  000184   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   860  000185   8188(2)  		jmp	SensorMathBattCapacity_DEC_End
   861  000186             	SensorMathBattCapacity_DEC_0_less:
   862  000186   2D00(1)  		mov	a,#(0)
   863  000187   2F1E(1)  		b0mov	_batt_capacity_tmp,a
   864  000188             	SensorMathBattCapacity_DEC_End:
   865  000188   2E1E(1)  		b0mov	a,_batt_capacity_tmp
   866  000189   221D(1)  		sub	a,_cur_batt_capacity
   867  00018A   7286(1+S)  		b0bts0	fc
   868  00018B   818E(2)  		jmp	SensorMathBattCapacity_Exit
   869  00018C   2E1E(1)  		b0mov	a,_batt_capacity_tmp
   870  00018D   2F1D(1)  		b0mov	_cur_batt_capacity,a	
   871  00018E             //==================================================================================================
   872  00018E             	SensorMathBattCapacity_Exit:		
   873  00018E   0E00(2)  		ret
   874  00018F             //==================================================================================================
   875  00018F             //
   876  00018F             SensorFuntion macro
   877  00018F             		
   878  00018F             	
   879  00018F             		endm
   880  00018F             //========================================================================================
   881  00018F             	SensorInit macro
   882  00018F             		endm
   883  00018F             //========================================================================================
   884  00018F             //end files
   885  00018F             
   886  00018F             
   887  00018F             
   888  00018F             
   889  00018F             	include key.h
   890  00018F             /*
   891  00018F             	按键扫描和执行
   892  00018F             */
   893  00018F             //==========================================================
   894  00018F             	KeyFuntion macro
   895  00018F             		rlcm	_key_bit_map  //左移位
   896  00018F             		b0bts1	P0.4
   897  00018F             		jmp	$+3
   898  00018F             		b0bset	_key_bit_map.0
   899  00018F             		jmp	$+2
   900  00018F             		b0bclr	_key_bit_map.0
   901  00018F             		
   902  00018F             		incs	_key_bit_map
   903  00018F             		jmp	$+2
   904  00018F             		jmp	KeyFuntion_NOKEY
   905  00018F             
   906  00018F             		mov	a#(0xF0)
   907  00018F             		cmprs	a,_key_bit_map
   908  00018F             		jmp	$+2
   909  00018F             		jmp	KeyFuntion_CLICK
   910  00018F             		/*mov	a,#(11111010b)
   911  00018F             		cmprs	a,_key_bit_map
   912  00018F             		jmp	$+2
   913  00018F             		jmp	KeyFuntion_DOUBLE
   914  00018F             		mov	a,#(1110110b)
   915  00018F             		cmprs	a,_key_bit_map
   916  00018F             		jmp	$+2
   917  00018F             		jmp	KeyFuntion_DOUBLE
   918  00018F             		mov	a,#(11101110b)
   919  00018F             		cmprs	a,_key_bit_map
   920  00018F             		jmp	$+2
   921  00018F             		jmp	KeyFuntion_DOUBLE*/
   922  00018F             		
   923  00018F             		mov	a,#(11110010b)
   924  00018F             		cmprs	a,_key_bit_map
   925  00018F             		jmp	$+2
   926  00018F             		jmp	KeyFuntion_DOUBLE
   927  00018F             		mov	a,#(1100110b)
   928  00018F             		cmprs	a,_key_bit_map
   929  00018F             		jmp	$+2
   930  00018F             		jmp	KeyFuntion_DOUBLE
   931  00018F             		mov	a,#(11001110b)
   932  00018F             		cmprs	a,_key_bit_map
   933  00018F             		jmp	$+2
   934  00018F             		jmp	KeyFuntion_DOUBLE
   935  00018F             
   936  00018F             		/*mov	a,#(11100010b)
   937  00018F             		cmprs	a,_key_bit_map
   938  00018F             		jmp	$+2
   939  00018F             		jmp	KeyFuntion_DOUBLE*/
   940  00018F             		mov	a,#(11000110b)
   941  00018F             		cmprs	a,_key_bit_map
   942  00018F             		jmp	$+2
   943  00018F             		jmp	KeyFuntion_DOUBLE
   944  00018F             		mov	a,#(10001110b)
   945  00018F             		cmprs	a,_key_bit_map
   946  00018F             		jmp	$+2
   947  00018F             		jmp	KeyFuntion_DOUBLE
   948  00018F             		jmp	KeyFuntion_NOKEY
   949  00018F             
   950  00018F             		mov	a,#(00011110b)
   951  00018F             		cmprs	a,_key_bit_map
   952  00018F             		jmp	$+2
   953  00018F             		jmp	KeyFuntion_DOUBLE
   954  00018F             		mov	a,#(10011110b)
   955  00018F             		cmprs	a,_key_bit_map
   956  00018F             		jmp	$+2
   957  00018F             		jmp	KeyFuntion_DOUBLE
   958  00018F             		mov	a,#(00001110b)
   959  00018F             		cmprs	a,_key_bit_map
   960  00018F             		jmp	$+2
   961  00018F             		jmp	KeyFuntion_DOUBLE	
   962  00018F             	KeyFuntion_CLICK:	//单击
   963  00018F             		b0bts1	_led_on_off_flag
   964  00018F             		jmp	KeyFuntion_Exit
   965  00018F             		decms	_led_mode
   966  00018F             		jmp	KeyFuntion_Exit
   967  00018F             		mov	a,#(5)
   968  00018F             		b0mov	_led_mode,a
   969  00018F             		b0mov	_led_dly,a
   970  00018F             		jmp	KeyFuntion_Exit
   971  00018F             	KeyFuntion_DOUBLE:	//双击
   972  00018F             		b0bts0	_led_on_off_flag
   973  00018F             		jmp	KeyFuntion_DOUBLE_1
   974  00018F             		b0bset	_led_on_off_flag
   975  00018F             		mov	a,#(5)
   976  00018F             		b0mov	_led_mode,a
   977  00018F             		b0mov	_led_dly,a
   978  00018F             		jmp	KeyFuntion_Exit
   979  00018F             	KeyFuntion_DOUBLE_1:
   980  00018F             		b0bclr	_led_on_off_flag
   981  00018F             		jmp	KeyFuntion_Exit
   982  00018F             	KeyFuntion_NOKEY:	
   983  00018F             	KeyFuntion_Exit:
   984  00018F             		endm
   985  00018F             //==========================================================
   986  00018F             	LED_W_ON	macro
   987  00018F             		b0bset	P5.3
   988  00018F             		endm
   989  00018F             	LED_W_OFF	macro
   990  00018F             		b0bclr	P5.3
   991  00018F             		endm
   992  00018F             
   993  E 000200D0         	LED_R	equ	P0.2
   994  00018F             	LED_R_ON	macro
   995  00018F             		b0bset	P0.2
   996  00018F             		endm
   997  00018F             	LED_R_OFF	macro
   998  00018F             		b0bclr	P0.2
   999  00018F             		endm
  1000  00018F             
  1001  E 000300D0         	LED_B	equ	P0.3
  1002  00018F             	LED_B_ON	macro
  1003  00018F             		b0bset	P0.3
  1004  00018F             		endm
  1005  00018F             	LED_B_OFF	macro
  1006  00018F             		b0bclr	P0.3
  1007  00018F             		endm
  1008  00018F             
  1009  00018F             	LedFunction:
  1010  00018F   1E22(1)  		mov	a,_led_mode
  1011  000190   2401(1)  		sub	a,#(1)
  1012  000191             		@JMP_A	5
  1013  000191   03CE(1)  	b0add PCl ,a
  1014  000192   8197(2)  		jmp	LedFunction_R_FLASH
  1015  000193   819D(2)  		jmp	LedFunction_RB 
  1016  000194   81AA(2)  		jmp	LedFunction_R
  1017  000195   81AE(2)  		jmp	LedFunction_B
  1018  000196   81B2(2)  		jmp	LedFunction_W
  1019  000197             	LedFunction_R_FLASH:
  1020  000197             		LED_W_OFF
  1021  000197   63D5(1)  		b0bclr	P5.3
  1022  000198   2623(1+S)  		decms	_led_dly
  1023  000199   81B6(2)  		jmp	LedFunction_Exit
  1024  00019A   2D14(1)  		mov	a,#(SYSTEM_TICK)
  1025  00019B   2F23(1)  		b0mov	_led_dly,a
  1026  00019C             
  1027  00019C   81B6(2)  		jmp	LedFunction_Exit
  1028  00019D             	LedFunction_RB:
  1029  00019D             		LED_W_OFF
  1030  00019D   63D5(1)  		b0bclr	P5.3
  1031  00019E   2623(1+S)  		decms	_led_dly
  1032  00019F   81B6(2)  		jmp	LedFunction_Exit
  1033  0001A0   2D14(1)  		mov	a,#(SYSTEM_TICK)
  1034  0001A1   2F23(1)  		b0mov	_led_dly,a
  1035  0001A2             
  1036  0001A2   72D0(1+S)  		b0bts0	LED_R
  1037  0001A3   81A7(2)  		jmp	LedFunction_RB_B_ON
  1038  0001A4             	  LedFunction_RB_R_ON:
  1039  0001A4             		LED_R_ON
  1040  0001A4   6AD0(1)  		b0bset	P0.2
  1041  0001A5             		LED_B_OFF
  1042  0001A5   63D0(1)  		b0bclr	P0.3
  1043  0001A6   81B6(2)  		jmp	LedFunction_Exit
  1044  0001A7             	  LedFunction_RB_B_ON:
  1045  0001A7             		LED_R_OFF
  1046  0001A7   62D0(1)  		b0bclr	P0.2
  1047  0001A8             		LED_B_ON
  1048  0001A8   6BD0(1)  		b0bset	P0.3
  1049  0001A9   81B6(2)  		jmp	LedFunction_Exit
  1050  0001AA             	LedFunction_R:
  1051  0001AA             		LED_W_OFF
  1052  0001AA   63D5(1)  		b0bclr	P5.3
  1053  0001AB             		LED_R_ON
  1054  0001AB   6AD0(1)  		b0bset	P0.2
  1055  0001AC             		LED_B_OFF
  1056  0001AC   63D0(1)  		b0bclr	P0.3
  1057  0001AD   81B6(2)  		jmp	LedFunction_Exit
  1058  0001AE             	LedFunction_B:
  1059  0001AE             		LED_W_OFF
  1060  0001AE   63D5(1)  		b0bclr	P5.3
  1061  0001AF             		LED_R_OFF
  1062  0001AF   62D0(1)  		b0bclr	P0.2
  1063  0001B0             		LED_B_ON
  1064  0001B0   6BD0(1)  		b0bset	P0.3
  1065  0001B1   81B6(2)  		jmp	LedFunction_Exit
  1066  0001B2             	LedFunction_W:
  1067  0001B2             		LED_W_ON
  1068  0001B2   6BD5(1)  		b0bset	P5.3
  1069  0001B3             		LED_R_OFF
  1070  0001B3   62D0(1)  		b0bclr	P0.2
  1071  0001B4             		LED_B_OFF
  1072  0001B4   63D0(1)  		b0bclr	P0.3
  1073  0001B5   81B6(2)  		jmp	LedFunction_Exit
  1074  0001B6             	LedFunction_Exit:
  1075  0001B6   0E00(2)  		ret
  1076  0001B7             //==========================================================
  1077  0001B7             	KeyInit macro
  1078  0001B7             		mov	a,#(1)
  1079  0001B7             		b0mov	_led_mode,a
  1080  0001B7             		endm
  1081  0001B7             //==========================================================
  1082  0001B7             	include display.h
  1083  0001B7             /*
  1084  0001B7             	数码管扫描和显示相关代码
  1085  0001B7             	上电全显2S
  1086  0001B7             	温度数据显示每秒刷新一次
  1087  0001B7             	温度过高显示 "Hi"
  1088  0001B7             	温度过低显示 "Lo"
  1089  0001B7             */
  1090  0001B7             //==========================================================
  1091  0001B7             //宏定义
  1092  0001B7             	COM_ALL_LOW	macro
  1093  0001B7             		mov	a,#(~(BIT0 | BIT1))
  1094  0001B7             		and	P0,a
  1095  0001B7             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1096  0001B7             		and	P4,a
  1097  0001B7             		mov	a,#(~(BIT4))
  1098  0001B7             		and	P5,a
  1099  0001B7             		endm
  1100  0001B7             		
  1101  0001B7             	COM_ALL_INPUT	macro
  1102  0001B7             		mov	a,#(~(BIT0 | BIT1))
  1103  0001B7             		and	P0M,a
  1104  0001B7             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1105  0001B7             		and	P4M,a
  1106  0001B7             		mov	a,#(~(BIT4))
  1107  0001B7             		and	P5M,a
  1108  0001B7             		endm
  1109  0001B7             
  1110  0001B7             	COM6_OUT_PP	macro
  1111  0001B7             		b0bset	P0M.1
  1112  0001B7             		endm
  1113  0001B7             	COM6_LOW  	macro	
  1114  0001B7             		b0bclr	P0.1
  1115  0001B7             		endm
  1116  0001B7             	COM6_HIGH  	macro	
  1117  0001B7             		b0bset	P0.1
  1118  0001B7             		endm
  1119  0001B7             
  1120  0001B7             	COM5_OUT_PP	macro
  1121  0001B7             		b0bset	P5M.4
  1122  0001B7             		endm
  1123  0001B7             	COM5_LOW  	macro	
  1124  0001B7             		b0bclr	P5.4
  1125  0001B7             		endm
  1126  0001B7             	COM5_HIGH  	macro	
  1127  0001B7             		b0bset	P5.4
  1128  0001B7             		endm
  1129  0001B7             
  1130  0001B7             	COM4_OUT_PP	macro
  1131  0001B7             		b0bset	P4M.1
  1132  0001B7             		endm
  1133  0001B7             	COM4_LOW  	macro	
  1134  0001B7             		b0bclr	P4.1
  1135  0001B7             		endm
  1136  0001B7             	COM4_HIGH  	macro	
  1137  0001B7             		b0bset	P4.1
  1138  0001B7             		endm
  1139  0001B7             
  1140  0001B7             	COM3_OUT_PP	macro
  1141  0001B7             		b0bset	P4M.0
  1142  0001B7             		endm
  1143  0001B7             	COM3_LOW  	macro	
  1144  0001B7             		b0bclr	P4.0
  1145  0001B7             		endm
  1146  0001B7             	COM3_HIGH  	macro	
  1147  0001B7             		b0bset	P4.0
  1148  0001B7             		endm
  1149  0001B7             
  1150  0001B7             	COM2_OUT_PP	macro
  1151  0001B7             		b0bset	P0M.0
  1152  0001B7             		endm
  1153  0001B7             	COM2_LOW  	macro	
  1154  0001B7             		b0bclr	P0.0
  1155  0001B7             		endm
  1156  0001B7             	COM2_HIGH  	macro	
  1157  0001B7             		b0bset	P0.0
  1158  0001B7             		endm
  1159  0001B7             
  1160  0001B7             	COM1_OUT_PP	macro
  1161  0001B7             		b0bset	P4M.2
  1162  0001B7             		endm
  1163  0001B7             	COM1_LOW  	macro	
  1164  0001B7             		b0bclr	P4.2
  1165  0001B7             		endm
  1166  0001B7             	COM1_HIGH  	macro	
  1167  0001B7             		b0bset	P4.2
  1168  0001B7             		endm
  1169  0001B7             //==========================================================
  1170  0001B7             //函数
  1171  0001B7             
  1172  0001B7             //==========================================================
  1173  0001B7             //此函数在2.5ms中断中调用
  1174  0001B7             	LedScan_ISR macro
  1175  0001B7             		COM_ALL_LOW
  1176  0001B7             		nop
  1177  0001B7             		COM_ALL_INPUT
  1178  0001B7             		
  1179  0001B7             		//if(--_led_scan_index == 0)
  1180  0001B7             		//{
  1181  0001B7             		//	_led_scan_index = 6;
  1182  0001B7             		//}
  1183  0001B7             		decms	_led_scan_index
  1184  0001B7             		jmp	$ + 3
  1185  0001B7             		mov	a,#(6)
  1186  0001B7             		b0mov	_led_scan_index,a
  1187  0001B7             		
  1188  0001B7             		mov	a,_led_scan_index
  1189  0001B7             		sub	a,#(1)
  1190  0001B7             		@JMP_A	6
  1191  0001B7             		jmp	LedScan_ISR_COM1
  1192  0001B7             		jmp	LedScan_ISR_COM2
  1193  0001B7             		jmp	LedScan_ISR_COM3
  1194  0001B7             		jmp	LedScan_ISR_COM4
  1195  0001B7             		jmp	LedScan_ISR_COM5
  1196  0001B7             		jmp	LedScan_ISR_COM6
  1197  0001B7             	LedScan_ISR_COM1:
  1198  0001B7             		b0bts1 _disp_map+0.7
  1199  0001B7             		jmp	$+3
  1200  0001B7             		COM4_HIGH
  1201  0001B7             		COM4_OUT_PP
  1202  0001B7             		
  1203  0001B7             		b0bts1 _disp_map+1.7
  1204  0001B7             		jmp	$+3
  1205  0001B7             		COM5_HIGH
  1206  0001B7             		COM5_OUT_PP
  1207  0001B7             		
  1208  0001B7             		b0bts1 _disp_map+2.7
  1209  0001B7             		jmp	$+3
  1210  0001B7             		COM6_HIGH
  1211  0001B7             		COM6_OUT_PP
  1212  0001B7             
  1213  0001B7             		COM3_LOW
  1214  0001B7             		COM3_OUT_PP
  1215  0001B7             		jmp	LedScan_ISR_END
  1216  0001B7             	LedScan_ISR_COM2:
  1217  0001B7             		b0bts1 _disp_map+0.0
  1218  0001B7             		jmp	$+3
  1219  0001B7             		COM2_HIGH
  1220  0001B7             		COM2_OUT_PP
  1221  0001B7             	
  1222  0001B7             		b0bts1 _disp_map+0.1
  1223  0001B7             		jmp	$+3
  1224  0001B7             		COM3_HIGH
  1225  0001B7             		COM3_OUT_PP
  1226  0001B7             	
  1227  0001B7             		b0bts1 _disp_map+0.2
  1228  0001B7             		jmp	$+3
  1229  0001B7             		COM4_HIGH
  1230  0001B7             		COM4_OUT_PP
  1231  0001B7             	
  1232  0001B7             		b0bts1 _disp_map+0.3
  1233  0001B7             		jmp	$+3
  1234  0001B7             		COM5_HIGH
  1235  0001B7             		COM5_OUT_PP
  1236  0001B7             	
  1237  0001B7             		b0bts1 _disp_map+0.4
  1238  0001B7             		jmp	$+3
  1239  0001B7             		COM6_HIGH
  1240  0001B7             		COM6_OUT_PP
  1241  0001B7             		
  1242  0001B7             		COM1_LOW
  1243  0001B7             		COM1_OUT_PP
  1244  0001B7             		jmp	LedScan_ISR_END
  1245  0001B7             	LedScan_ISR_COM3:
  1246  0001B7             		b0bts1 _disp_map+1.0
  1247  0001B7             		jmp	$+3
  1248  0001B7             		COM2_LOW
  1249  0001B7             		COM2_OUT_PP
  1250  0001B7             	
  1251  0001B7             		b0bts1 _disp_map+1.1
  1252  0001B7             		jmp	$+3
  1253  0001B7             		COM3_LOW
  1254  0001B7             		COM3_OUT_PP
  1255  0001B7             	
  1256  0001B7             		b0bts1 _disp_map+1.2
  1257  0001B7             		jmp	$+3
  1258  0001B7             		COM4_LOW
  1259  0001B7             		COM4_OUT_PP
  1260  0001B7             	
  1261  0001B7             		b0bts1 _disp_map+1.3
  1262  0001B7             		jmp	$+3
  1263  0001B7             		COM5_LOW
  1264  0001B7             		COM5_OUT_PP
  1265  0001B7             	
  1266  0001B7             		b0bts1 _disp_map+1.4
  1267  0001B7             		jmp	$+3
  1268  0001B7             		COM6_LOW
  1269  0001B7             		COM6_OUT_PP
  1270  0001B7             		
  1271  0001B7             		COM1_HIGH
  1272  0001B7             		COM1_OUT_PP
  1273  0001B7             		jmp	LedScan_ISR_END
  1274  0001B7             	LedScan_ISR_COM4:
  1275  0001B7             		b0bts1 _disp_map+0.5
  1276  0001B7             		jmp	$+3
  1277  0001B7             		COM3_HIGH
  1278  0001B7             		COM3_OUT_PP
  1279  0001B7             
  1280  0001B7             		b0bts1 _disp_map+0.6
  1281  0001B7             		jmp	$+3
  1282  0001B7             		COM4_HIGH
  1283  0001B7             		COM4_OUT_PP
  1284  0001B7             
  1285  0001B7             		b0bts1 _disp_map+1.5
  1286  0001B7             		jmp	$+3
  1287  0001B7             		COM5_HIGH
  1288  0001B7             		COM5_OUT_PP
  1289  0001B7             
  1290  0001B7             		b0bts1 _disp_map+1.6
  1291  0001B7             		jmp	$+3
  1292  0001B7             		COM6_HIGH
  1293  0001B7             		COM6_OUT_PP
  1294  0001B7             		
  1295  0001B7             		COM2_LOW
  1296  0001B7             		COM2_OUT_PP
  1297  0001B7             		jmp	LedScan_ISR_END
  1298  0001B7             	LedScan_ISR_COM5:
  1299  0001B7             		b0bts1 _disp_map+2.0
  1300  0001B7             		jmp	$+3
  1301  0001B7             		COM3_LOW
  1302  0001B7             		COM3_OUT_PP
  1303  0001B7             
  1304  0001B7             		b0bts1 _disp_map+2.1
  1305  0001B7             		jmp	$+3
  1306  0001B7             		COM4_LOW
  1307  0001B7             		COM4_OUT_PP
  1308  0001B7             
  1309  0001B7             		b0bts1 _disp_map+2.2
  1310  0001B7             		jmp	$+3
  1311  0001B7             		COM5_LOW
  1312  0001B7             		COM5_OUT_PP
  1313  0001B7             
  1314  0001B7             		b0bts1 _disp_map+2.3
  1315  0001B7             		jmp	$+3
  1316  0001B7             		COM6_LOW
  1317  0001B7             		COM6_OUT_PP
  1318  0001B7             
  1319  0001B7             		COM2_HIGH
  1320  0001B7             		COM2_OUT_PP
  1321  0001B7             		jmp	LedScan_ISR_END
  1322  0001B7             	LedScan_ISR_COM6:
  1323  0001B7             		b0bts1 _disp_map+2.4
  1324  0001B7             		jmp	$+3
  1325  0001B7             		COM4_LOW
  1326  0001B7             		COM4_OUT_PP
  1327  0001B7             
  1328  0001B7             		b0bts1 _disp_map+2.5
  1329  0001B7             		jmp	$+3
  1330  0001B7             		COM5_LOW
  1331  0001B7             		COM5_OUT_PP
  1332  0001B7             
  1333  0001B7             		b0bts1 _disp_map+2.6
  1334  0001B7             		jmp	$+3
  1335  0001B7             		COM6_LOW
  1336  0001B7             		COM6_OUT_PP
  1337  0001B7             
  1338  0001B7             		COM3_HIGH
  1339  0001B7             		COM3_OUT_PP
  1340  0001B7             	LedScan_ISR_END:
  1341  0001B7             		endm
  1342  0001B7             
  1343  0001B7             //==================================================================================================
  1344  0001B7             
  1345  0001B7             //==================================================================================================
  1346  0001B7             
  1347  0001B7             //==================================================================================================
  1348  0001B7             
  1349  0001B7             //==================================================================================================	
  1350  0001B7             //在main中每50ms调用一次
  1351  0001B7             DisplayFuntion	macro
  1352  0001B7             		decms	_disp_swap_dly
  1353  0001B7             		jmp	DisplayFuntion_start_0
  1354  0001B7             		mov	a,#(SYSTEM_TICK * 3)
  1355  0001B7             		b0mov	_disp_swap_dly,a
  1356  0001B7             		
  1357  0001B7             		b0bts1  _input_power_flag
  1358  0001B7             		jmp	$+3
  1359  0001B7             		b0bts1	_disp_voltage_flag
  1360  0001B7             		jmp	$+3
  1361  0001B7             		b0bclr  _disp_voltage_flag
  1362  0001B7             		jmp	$+2
  1363  0001B7             		b0bset	_disp_voltage_flag
  1364  0001B7             
  1365  0001B7             	DisplayFuntion_start_0:	
  1366  0001B7             		b0bts0	_lcd_init_flag
  1367  0001B7             		jmp	DisplayFuntion_start
  1368  0001B7             		//if(_disp_update_dly) 
  1369  0001B7             		//{
  1370  0001B7             		//	--_disp_update_dly;
  1371  0001B7             		//	return;
  1372  0001B7             		//}
  1373  0001B7             		mov	a,#(0)
  1374  0001B7             		cmprs	a,_disp_update_dly
  1375  0001B7             		jmp	$ + 2
  1376  0001B7             		jmp	$ + 3
  1377  0001B7             		decms	_disp_update_dly
  1378  0001B7             		jmp	DisplayFuntion_END
  1379  0001B7             
  1380  0001B7             		b0bset	_lcd_init_flag
  1381  0001B7             		mov	a,#(20)
  1382  0001B7             		b0mov	_disp_update_dly,a
  1383  0001B7             
  1384  0001B7             	DisplayFuntion_start:	
  1385  0001B7             		mov	a,#(0x00)
  1386  0001B7             		b0mov	_disp_map + 0, a
  1387  0001B7             		b0mov	_disp_map + 1, a
  1388  0001B7             		b0mov	_disp_map + 2, a
  1389  0001B7             
  1390  0001B7             		b0bts0	_disp_voltage_flag
  1391  0001B7             		jmp	$+3
  1392  0001B7             		mov	a,_cur_batt_capacity
  1393  0001B7             		jmp	$+2
  1394  0001B7             		mov	a,_cur_input_volgate
  1395  0001B7             
  1396  0001B7             	DisplayFuntion_bai_wei:
  1397  0001B7             		b0mov	_d_math_input0+0,a
  1398  0001B7             		mov	a,#(100)
  1399  0001B7             		b0mov	_d_math_input1+0,a
  1400  0001B7             		call	__div_u8_u8	
  1401  0001B7             		
  1402  0001B7             		b0mov	Y,#led_num_tab$M
  1403  0001B7             		b0mov	Z,#led_num_tab$L
  1404  0001B7             		b0mov	A,_d_math_output0+0	//百位
  1405  0001B7             		add	Z,A
  1406  0001B7             		movc
  1407  0001B7             		b0mov	_disp_map+0,a
  1408  0001B7             	DisplayFuntion_shi_wei:
  1409  0001B7             		b0mov	a,_d_math_output1+0
  1410  0001B7             		b0mov	_d_math_input0+0,a
  1411  0001B7             		mov	a,#(10)
  1412  0001B7             		b0mov	_d_math_input1+0,a
  1413  0001B7             		call	__div_u8_u8
  1414  0001B7             
  1415  0001B7             		b0mov	Y,#led_num_tab$M
  1416  0001B7             		b0mov	Z,#led_num_tab$L
  1417  0001B7             		b0mov	A,_d_math_output0+0	//十位
  1418  0001B7             		add	Z,A
  1419  0001B7             		movc
  1420  0001B7             		b0mov	_disp_map+1,a
  1421  0001B7             	DisplayFuntion_ge_wei:
  1422  0001B7             		b0mov	Z,#led_num_tab$L
  1423  0001B7             		b0mov	A,_d_math_output1+0	//个位
  1424  0001B7             		add	Z,A
  1425  0001B7             		movc
  1426  0001B7             		b0mov	_disp_map+2,a
  1427  0001B7             
  1428  0001B7             		b0bts1	_disp_voltage_flag
  1429  0001B7             		jmp	DisplayFuntion_END
  1430  0001B7             
  1431  0001B7             		mov	a,#(LCD_DP)
  1432  0001B7             		or	_disp_map+2,a
  1433  0001B7             	DisplayFuntion_END:
  1434  0001B7             		endm
  1435  0001B7             //==================================================================================================
  1436  0001B7             	DisplayInit macro
  1437  0001B7             		mov	a,#(2)
  1438  0001B7             		mov	_led_scan_index,a
  1439  0001B7             		mov	_disp_swap_dly,a
  1440  0001B7             
  1441  0001B7             		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1442  0001B7             		b0mov	_disp_update_dly,a
  1443  0001B7             		mov	a,#(0xFF)
  1444  0001B7             		b0mov	_disp_map + 0, a
  1445  0001B7             		b0mov	_disp_map + 1, a
  1446  0001B7             		b0mov	_disp_map + 2, a
  1447  0001B7             
  1448  0001B7             		mov	a,#(123)
  1449  0001B7             		b0mov	_cur_input_volgate,a
  1450  0001B7             		mov	a,#(99)
  1451  0001B7             		b0mov	_cur_batt_capacity,a
  1452  0001B7             		endm
  1453  0001B7             //==================================================================================================
  1454  0001B7             /*	_disp_map[3]
  1455  0001B7             	b00->A2  b10->A3  b20->A4
  1456  0001B7             	b01->B2  b11->B3  b21->B4
  1457  0001B7             	b02->C2  b12->C3  b22->C4
  1458  0001B7             	b03->D2  b13->D3  b23->D4
  1459  0001B7             	b04->E2  b14->E3  b24->E4
  1460  0001B7             	b05->F2  b15->F3  b25->F4
  1461  0001B7             	b06->G2  b16->G3  b26->G4
  1462  0001B7             	b07->B1  b17->C1  b27->DP
  1463  0001B7             */
  1464  0001B7             //==================================================================================================
  1465  E 00000001         	LCD_A	equ	0x01
  1466  E 00000002         	LCD_B	equ     0x02
  1467  E 00000004         	LCD_C	equ     0x04
  1468  E 00000008         	LCD_D	equ     0x08
  1469  E 00000010         	LCD_E	equ     0x10
  1470  E 00000020         	LCD_F	equ     0x20
  1471  E 00000040         	LCD_G	equ     0x40
  1472  E 00000080         	LCD_H	equ    	0x80
  1473  E 00000080         	LCD_DP	equ    	0x80
  1474  0001B7             	led_num_tab:
  1475  0001B7   003F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F		/* 0 */
  1476  0001B8   0006(1)  		dw	LCD_B | LCD_C                                          	/* 1 */
  1477  0001B9   005B(1)  		dw	LCD_A | LCD_B | LCD_D | LCD_E | LCD_G                  	/* 2 */
  1478  0001BA   004F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_G                  	/* 3 */
  1479  0001BB   0066(1)  		dw	LCD_B | LCD_C | LCD_F | LCD_G                         	/* 4 */
  1480  0001BC   006D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_F | LCD_G                  	/* 5 */
  1481  0001BD   007D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G          	/* 6 */
  1482  0001BE   0027(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_F                          	/* 7 */
  1483  0001BF   007F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G  	/* 8 */
  1484  0001C0   006F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_F | LCD_G          	/* 9 */
  1485  0001C1             		//dw	LCD_A | LCD_B | LCD_C | LCD_E | LCD_F | LCD_G          	/* a */
  1486  0001C1             		//dw	LCD_C | LCD_D | LCD_E | LCD_F | LCD_G                  	/* b */
  1487  0001C1             		//dw	LCD_A | LCD_D | LCD_E | LCD_F                          	/* c */
  1488  0001C1             		//dw	LCD_B | LCD_C | LCD_D | LCD_E | LCD_G                  	/* d */
  1489  0001C1             		//dw	LCD_A | LCD_D | LCD_E | LCD_F | LCD_G                  	/* e */
  1490  0001C1             		//dw	LCD_A | LCD_E | LCD_F | LCD_G              		/* f */
  1491  0001C1             //==================================================================================================
  1492  0001C1             //==========================================================
  1493  0001C1             //end files
  1494  0001C1             
  1495  0001C1             
  1496  0001C1             //==============================================================================
  1497  0001C1             ;-------------------------------------------------------------------------------
  1498  0001C1             ; ClrRAM
  1499  0001C1             ; Use index @YZ to clear RAM 
  1500  0001C1             ;-------------------------------------------------------------------------------
  1501  0001C1             __ClrRAM:
  1502  0001C1             
  1503  0001C1   2B84(1)  	CLR 		Y
  1504  0001C2   333F(1)  	B0MOV		Z,#0x3f
  1505  0001C3             
  1506  0001C3             ClrRAM10:
  1507  0001C3   2BE7(1)  	CLR 		@YZ
  1508  0001C4   2683(1+S)  	DECMS		Z
  1509  0001C5   81C3(2)  	JMP 		ClrRAM10
  1510  0001C6   2BE7(1)  	CLR 		@YZ
  1511  0001C7             
  1512  0001C7   0E00(2)  	RET
  1513  0001C8             
  1514  0001C8             reset:
  1515  0001C8             //_IO_Setting:
  1516  0001C8   2D0F(1)   	MOV A, #(0x0F)
  1517  0001C9   2FB8(1)    	B0MOV P0M, A	//P0 Input-Output value
  1518  0001CA   2D00(1)    	MOV A, #(0x00)
  1519  0001CB   2FE0(1)    	B0MOV P0UR, A	//P0 pull up value
  1520  0001CC   1E00(1)    	MOV A, 0x00
  1521  0001CD   2FD0(1)    	B0MOV P0, A	//P0 register value
  1522  0001CE             
  1523  0001CE   2D07(1)    	MOV A, #(0x07)
  1524  0001CF   2FC4(1)    	B0MOV P4M, A		//P4 Input-Output value
  1525  0001D0   2D00(1)    	MOV A, #(0x00)
  1526  0001D1   2FE4(1)    	B0MOV P4UR, A		//P4 pull up value
  1527  0001D2   2D08(1)    	MOV A, #(0x08)
  1528  0001D3   2FAE(1)    	B0MOV P4CON, A	//P4 Analog-Digital value
  1529  0001D4   1E00(1)    	MOV A, 0x00
  1530  0001D5   2FD4(1)    	B0MOV P4, A		//P4 register value
  1531  0001D6             
  1532  0001D6   2D18(1)    	MOV A, #(0x18)
  1533  0001D7   2FC5(1)    	B0MOV P5M, A		//P5 Input-Output value
  1534  0001D8   2D00(1)    	MOV A, #(0x00)
  1535  0001D9   2FE5(1)    	B0MOV P5UR, A		//P5 pull up value
  1536  0001DA   1E00(1)    	MOV A, 0x00
  1537  0001DB   2FD5(1)    	B0MOV P5, A	                //P5 register value
  1538  0001DC             //_Timer_Setting:
  1539  0001DC   2D24(1)  	MOV A, #0x24
  1540  0001DD   2FDA(1)  	B0MOV TC0M, A	//TC0M register value, Fcpu: 4.000000MHZ
  1541  0001DE   62D8(1)  	B0BCLR FTC0X8 //CLK source: Fcpu
  1542  0001DF   2D64(1)  	MOV A, #(0x64)
  1543  0001E0   2FDB(1)  	B0MOV TC0C, A	//TC0C register value, time: 2.500000ms(400.000000HZ)
  1544  0001E1   2D64(1)  	MOV A, #(0x64)
  1545  0001E2   2FCD(1)  	B0MOV TC0R, A	//TC0R register value
  1546  0001E3   65C8(1)  	B0BCLR FTC0IRQ
  1547  0001E4   6DC9(1)  	B0BSET FTC0IEN	//TC0 Interrupt enable
  1548  0001E5   63DA(1)  	B0BCLR FTC0CKS
  1549  0001E6   6FDA(1)  	B0BSET FTC0ENB	//TC0 enable
  1550  0001E7   69D8(1)  	B0BSET FTC0GN
  1551  0001E8             	
  1552  0001E8   C1C1(2)  	call	__ClrRAM
  1553  0001E9             	SensorInit
  1554  0001E9             	KeyInit
  1555  0001E9   2D01(1)  		mov	a,#(1)
  1556  0001EA   2F22(1)  		b0mov	_led_mode,a
  1557  0001EB             	DisplayInit
  1558  0001EB   2D02(1)  		mov	a,#(2)
  1559  0001EC   1F16(1)  		mov	_led_scan_index,a
  1560  0001ED   1F11(1)  		mov	_disp_swap_dly,a
  1561  0001EE   2D28(1)  		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1562  0001EF   2F12(1)  		b0mov	_disp_update_dly,a
  1563  0001F0   2DFF(1)  		mov	a,#(0xFF)
  1564  0001F1   2F13(1)  		b0mov	_disp_map + 0, a
  1565  0001F2   2F14(1)  		b0mov	_disp_map + 1, a
  1566  0001F3   2F15(1)  		b0mov	_disp_map + 2, a
  1567  0001F4   2D7B(1)  		mov	a,#(123)
  1568  0001F5   2F1C(1)  		b0mov	_cur_input_volgate,a
  1569  0001F6   2D63(1)  		mov	a,#(99)
  1570  0001F7   2F1D(1)  		b0mov	_cur_batt_capacity,a
  1571  0001F8             
  1572  0001F8   6FDF(1)    	B0BSET FGIE
  1573  0001F9   6000(1)  	b0bclr	system_idle_flag
  1574  0001FA             public _main
  1575  0001FA             _main:
  1576  0001FA   2D5A(1)  	MOV 	A, #(0x5A)
  1577  0001FB   2FCC(1)    	B0MOV 	WDTR, A
  1578  0001FC             	
  1579  0001FC   7000(1+S)  	b0bts0  system_idle_flag
  1580  0001FD   82B7(2)  	jmp	_main_system_idle_function
  1581  0001FE             //====================================================================
  1582  0001FE             //NORMAL
  1583  0001FE   7900(1+S)    	b0bts1	system_tick_flag
  1584  0001FF   81FA(2)  	jmp	_main
  1585  000200   6100(1)  	b0bclr	system_tick_flag
  1586  000201             //================================================
  1587  000201             //SensorFuntion
  1588  000201   1620(1+S)  		incms	_adc_ch_dly
  1589  000202   0000(1)  		nop
  1590  000203   2E20(1)  		b0mov	a,_adc_ch_dly
  1591  000204   240A(1)  		sub	a,#(10)
  1592  000205   7A86(1+S)  		b0bts1	fc
  1593  000206   8239(2)  		jmp	SensorFuntion_END  		
  1594  000207   2B20(1)  		clr	_adc_ch_dly
  1595  000208             	SensorFuntion_start_adc:
  1596  000208   2E17(1)  		b0mov	a,_adc_ch_index
  1597  000209             		@JMP_A	3
  1598  000209   03CE(1)  	b0add PCl ,a
  1599  00020A   820D(2)  		jmp	SensorFuntion_BATT   
  1600  00020B   8214(2)  		jmp	SensorFuntion_INPUT   
  1601  00020C   8232(2)  		jmp	SensorFuntion_OUTPUT
  1602  00020D             	SensorFuntion_BATT:
  1603  00020D             		SensorADConvert_CH 5
  1604  00020D   2D95(1)  		mov	a,#(5 | BIT4 | BIT7)
  1605  00020E   2FB1(1)  		b0mov	ADM,a
  1606  00020F   C070(2)  		call	SensorADConvert
  1607  000210   C08B(2)                  call	SensorMathBattCapacity
  1608  000211   2D01(1)  		mov	a,#(1)
  1609  000212   2F17(1)  		b0mov	_adc_ch_index,a
  1610  000213   8239(2)  		jmp	SensorFuntion_END
  1611  000214             	SensorFuntion_INPUT:
  1612  000214             		SensorADConvert_CH 3
  1613  000214   2D93(1)  		mov	a,#(3 | BIT4 | BIT7)
  1614  000215   2FB1(1)  		b0mov	ADM,a
  1615  000216   C070(2)  		call	SensorADConvert
  1616  000217             	
  1617  000217             		//V = 21 * AD / 2048
  1618  000217   2E18(1)  		b0mov	a,_ad_buf_tmp+0
  1619  000218   2F03(1)  		b0mov	_d_math_input0+0,a
  1620  000219   2E19(1)  		b0mov	a,_ad_buf_tmp+1
  1621  00021A   2F04(1)  		b0mov	_d_math_input0+1,a
  1622  00021B   2D15(1)  		mov	a,#(21)
  1623  00021C   2F06(1)  		b0mov	_d_math_input1+0,a
  1624  00021D   C052(2)  		call	__mul_u16_u8
  1625  00021E             		
  1626  00021E   2E09(1)  		b0mov	a,_d_math_output0+0
  1627  00021F   2F03(1)  		b0mov	_d_math_input0+0,a
  1628  000220   2E0A(1)  		b0mov	a,_d_math_output0+1
  1629  000221   2F04(1)  		b0mov	_d_math_input0+1,a
  1630  000222   2D08(1)  		mov	a,#((2048 >> 8) & 0xFF)
  1631  000223   2F06(1)  		b0mov	_d_math_input1+0,a
  1632  000224   2D00(1)  		mov	a,#((2048) & 0xFF)
  1633  000225   2F07(1)  		b0mov	_d_math_input1+1,a
  1634  000226   C034(2)  		call	__div_u16_u16
  1635  000227             
  1636  000227   2E09(1)  		b0mov	a,_d_math_output0+0
  1637  000228   2F1C(1)  		b0mov	_cur_input_volgate,a
  1638  000229   245A(1)  		sub	a,#(90)
  1639  00022A   7A86(1+S)  		b0bts1	fc
  1640  00022B   822E(2)  		jmp	$+3
  1641  00022C   6C00(1)  		b0bset	_input_power_flag
  1642  00022D   822F(2)  		jmp	$+2
  1643  00022E   6400(1)  		b0bclr	_input_power_flag
  1644  00022F             	
  1645  00022F   2D02(1)  		mov	a,#(2)
  1646  000230   2F17(1)  		b0mov	_adc_ch_index,a
  1647  000231   8239(2)  		jmp	SensorFuntion_END
  1648  000232             	SensorFuntion_OUTPUT:
  1649  000232   7CD4(1+S)  		b0bts1	P4.4
  1650  000233   8236(2)  		jmp	$+3
  1651  000234   6F00(1)  		b0bset 	_is_output_en_flag
  1652  000235   8237(2)  		jmp	$+2
  1653  000236   6700(1)  		b0bclr	_is_output_en_flag
  1654  000237             
  1655  000237   2D00(1)  		mov	a,#(0)
  1656  000238   2F17(1)  		b0mov	_adc_ch_index,a
  1657  000239             	SensorFuntion_END:
  1658  000239             //================================================
  1659  000239             	
  1660  000239             		KeyFuntion
  1661  000239   0B21(1)  		rlcm	_key_bit_map  //左移位
  1662  00023A   7CD0(1+S)  		b0bts1	P0.4
  1663  00023B   823E(2)  		jmp	$+3
  1664  00023C   6821(1)  		b0bset	_key_bit_map.0
  1665  00023D   823F(2)  		jmp	$+2
  1666  00023E   6021(1)  		b0bclr	_key_bit_map.0
  1667  00023F   1521(1+S)  		incs	_key_bit_map
  1668  000240   8242(2)  		jmp	$+2
  1669  000241   8278(2)  		jmp	KeyFuntion_NOKEY
  1670  000242   2DF0(1)  		mov	a#(0xF0)
  1671  000243   0721(1+S)  		cmprs	a,_key_bit_map
  1672  000244   8246(2)  		jmp	$+2
  1673  000245   8267(2)  		jmp	KeyFuntion_CLICK
  1674  000246   2DF2(1)  		mov	a,#(11110010b)
  1675  000247   0721(1+S)  		cmprs	a,_key_bit_map
  1676  000248   824A(2)  		jmp	$+2
  1677  000249   826F(2)  		jmp	KeyFuntion_DOUBLE
  1678  00024A   2D66(1)  		mov	a,#(1100110b)
  1679  00024B   0721(1+S)  		cmprs	a,_key_bit_map
  1680  00024C   824E(2)  		jmp	$+2
  1681  00024D   826F(2)  		jmp	KeyFuntion_DOUBLE
  1682  00024E   2DCE(1)  		mov	a,#(11001110b)
  1683  00024F   0721(1+S)  		cmprs	a,_key_bit_map
  1684  000250   8252(2)  		jmp	$+2
  1685  000251   826F(2)  		jmp	KeyFuntion_DOUBLE
  1686  000252   2DC6(1)  		mov	a,#(11000110b)
  1687  000253   0721(1+S)  		cmprs	a,_key_bit_map
  1688  000254   8256(2)  		jmp	$+2
  1689  000255   826F(2)  		jmp	KeyFuntion_DOUBLE
  1690  000256   2D8E(1)  		mov	a,#(10001110b)
  1691  000257   0721(1+S)  		cmprs	a,_key_bit_map
  1692  000258   825A(2)  		jmp	$+2
  1693  000259   826F(2)  		jmp	KeyFuntion_DOUBLE
  1694  00025A   8278(2)  		jmp	KeyFuntion_NOKEY
  1695  00025B   2D1E(1)  		mov	a,#(00011110b)
  1696  00025C   0721(1+S)  		cmprs	a,_key_bit_map
  1697  00025D   825F(2)  		jmp	$+2
  1698  00025E   826F(2)  		jmp	KeyFuntion_DOUBLE
  1699  00025F   2D9E(1)  		mov	a,#(10011110b)
  1700  000260   0721(1+S)  		cmprs	a,_key_bit_map
  1701  000261   8263(2)  		jmp	$+2
  1702  000262   826F(2)  		jmp	KeyFuntion_DOUBLE
  1703  000263   2D0E(1)  		mov	a,#(00001110b)
  1704  000264   0721(1+S)  		cmprs	a,_key_bit_map
  1705  000265   8267(2)  		jmp	$+2
  1706  000266   826F(2)  		jmp	KeyFuntion_DOUBLE	
  1707  000267   7D00(1+S)  		b0bts1	_led_on_off_flag
  1708  000268   8278(2)  		jmp	KeyFuntion_Exit
  1709  000269   2622(1+S)  		decms	_led_mode
  1710  00026A   8278(2)  		jmp	KeyFuntion_Exit
  1711  00026B   2D05(1)  		mov	a,#(5)
  1712  00026C   2F22(1)  		b0mov	_led_mode,a
  1713  00026D   2F23(1)  		b0mov	_led_dly,a
  1714  00026E   8278(2)  		jmp	KeyFuntion_Exit
  1715  00026F   7500(1+S)  		b0bts0	_led_on_off_flag
  1716  000270   8276(2)  		jmp	KeyFuntion_DOUBLE_1
  1717  000271   6D00(1)  		b0bset	_led_on_off_flag
  1718  000272   2D05(1)  		mov	a,#(5)
  1719  000273   2F22(1)  		b0mov	_led_mode,a
  1720  000274   2F23(1)  		b0mov	_led_dly,a
  1721  000275   8278(2)  		jmp	KeyFuntion_Exit
  1722  000276   6500(1)  		b0bclr	_led_on_off_flag
  1723  000277   8278(2)  		jmp	KeyFuntion_Exit
  1724  000278   C18F(2)  		call	LedFunction
  1725  000279             		DisplayFuntion
  1726  000279   2611(1+S)  		decms	_disp_swap_dly
  1727  00027A   8284(2)  		jmp	DisplayFuntion_start_0
  1728  00027B   2D3C(1)  		mov	a,#(SYSTEM_TICK * 3)
  1729  00027C   2F11(1)  		b0mov	_disp_swap_dly,a
  1730  00027D   7C00(1+S)  		b0bts1  _input_power_flag
  1731  00027E   8281(2)  		jmp	$+3
  1732  00027F   7B00(1+S)  		b0bts1	_disp_voltage_flag
  1733  000280   8283(2)  		jmp	$+3
  1734  000281   6300(1)  		b0bclr  _disp_voltage_flag
  1735  000282   8284(2)  		jmp	$+2
  1736  000283   6B00(1)  		b0bset	_disp_voltage_flag
  1737  000284   7600(1+S)  		b0bts0	_lcd_init_flag
  1738  000285   828F(2)  		jmp	DisplayFuntion_start
  1739  000286   2D00(1)  		mov	a,#(0)
  1740  000287   0712(1+S)  		cmprs	a,_disp_update_dly
  1741  000288   828A(2)  		jmp	$ + 2
  1742  000289   828C(2)  		jmp	$ + 3
  1743  00028A   2612(1+S)  		decms	_disp_update_dly
  1744  00028B   82B6(2)  		jmp	DisplayFuntion_END
  1745  00028C   6E00(1)  		b0bset	_lcd_init_flag
  1746  00028D   2D14(1)  		mov	a,#(20)
  1747  00028E   2F12(1)  		b0mov	_disp_update_dly,a
  1748  00028F   2D00(1)  		mov	a,#(0x00)
  1749  000290   2F13(1)  		b0mov	_disp_map + 0, a
  1750  000291   2F14(1)  		b0mov	_disp_map + 1, a
  1751  000292   2F15(1)  		b0mov	_disp_map + 2, a
  1752  000293   7300(1+S)  		b0bts0	_disp_voltage_flag
  1753  000294   8297(2)  		jmp	$+3
  1754  000295   1E1D(1)  		mov	a,_cur_batt_capacity
  1755  000296   8298(2)  		jmp	$+2
  1756  000297   1E1C(1)  		mov	a,_cur_input_volgate
  1757  000298   2F03(1)  		b0mov	_d_math_input0+0,a
  1758  000299   2D64(1)  		mov	a,#(100)
  1759  00029A   2F06(1)  		b0mov	_d_math_input1+0,a
  1760  00029B   C020(2)  		call	__div_u8_u8	
  1761  00029C   3401(1)  		b0mov	Y,#led_num_tab$M
  1762  00029D   33B7(1)  		b0mov	Z,#led_num_tab$L
  1763  00029E   2E09(1)  		b0mov	A,_d_math_output0+0	//百位
  1764  00029F   1383(1)  		add	Z,A
  1765  0002A0   0D00(2)  		movc
  1766  0002A1   2F13(1)  		b0mov	_disp_map+0,a
  1767  0002A2   2E0C(1)  		b0mov	a,_d_math_output1+0
  1768  0002A3   2F03(1)  		b0mov	_d_math_input0+0,a
  1769  0002A4   2D0A(1)  		mov	a,#(10)
  1770  0002A5   2F06(1)  		b0mov	_d_math_input1+0,a
  1771  0002A6   C020(2)  		call	__div_u8_u8
  1772  0002A7   3401(1)  		b0mov	Y,#led_num_tab$M
  1773  0002A8   33B7(1)  		b0mov	Z,#led_num_tab$L
  1774  0002A9   2E09(1)  		b0mov	A,_d_math_output0+0	//十位
  1775  0002AA   1383(1)  		add	Z,A
  1776  0002AB   0D00(2)  		movc
  1777  0002AC   2F14(1)  		b0mov	_disp_map+1,a
  1778  0002AD   33B7(1)  		b0mov	Z,#led_num_tab$L
  1779  0002AE   2E0C(1)  		b0mov	A,_d_math_output1+0	//个位
  1780  0002AF   1383(1)  		add	Z,A
  1781  0002B0   0D00(2)  		movc
  1782  0002B1   2F15(1)  		b0mov	_disp_map+2,a
  1783  0002B2   7B00(1+S)  		b0bts1	_disp_voltage_flag
  1784  0002B3   82B6(2)  		jmp	DisplayFuntion_END
  1785  0002B4   2D80(1)  		mov	a,#(LCD_DP)
  1786  0002B5   1915(1)  		or	_disp_map+2,a
  1787  0002B6   81FA(2)  		jmp	_main
  1788  0002B7             //====================================================================
  1789  0002B7             //IDLE
  1790  0002B7             _main_system_idle_function:
  1791  0002B7             _main_end:
  1792  0002B7             	//GreenMode
  1793  0002B7   81FA(2)    	JMP _main
  1794  0002B8             
  1795  0002B8             isr:
  1796  0002B8   0400(1)  	push
  1797  0002B9   7DC8(1+S)  	b0bts1	FTC0IRQ
  1798  0002BA   834F(2)          jmp	isr_exit
  1799  0002BB   65C8(1)  	b0bclr  FTC0IRQ
  1800  0002BC             	
  1801  0002BC             	LedScan_ISR
  1802  0002BC   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  1803  0002BD   29D0(1)  		and	P0,a
  1804  0002BE   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1805  0002BF   29D4(1)  		and	P4,a
  1806  0002C0   2DEF(1)  		mov	a,#(~(BIT4))
  1807  0002C1   29D5(1)  		and	P5,a
  1808  0002C2   0000(1)  		nop
  1809  0002C3   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  1810  0002C4   29B8(1)  		and	P0M,a
  1811  0002C5   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1812  0002C6   29C4(1)  		and	P4M,a
  1813  0002C7   2DEF(1)  		mov	a,#(~(BIT4))
  1814  0002C8   29C5(1)  		and	P5M,a
  1815  0002C9   2616(1+S)  		decms	_led_scan_index
  1816  0002CA   82CD(2)  		jmp	$ + 3
  1817  0002CB   2D06(1)  		mov	a,#(6)
  1818  0002CC   2F16(1)  		b0mov	_led_scan_index,a
  1819  0002CD   1E16(1)  		mov	a,_led_scan_index
  1820  0002CE   2401(1)  		sub	a,#(1)
  1821  0002CF   03CE(1)  	b0add PCl ,a
  1822  0002D0   82D6(2)  		jmp	LedScan_ISR_COM1
  1823  0002D1   82E5(2)  		jmp	LedScan_ISR_COM2
  1824  0002D2   82FC(2)  		jmp	LedScan_ISR_COM3
  1825  0002D3   8313(2)  		jmp	LedScan_ISR_COM4
  1826  0002D4   8326(2)  		jmp	LedScan_ISR_COM5
  1827  0002D5   8339(2)  		jmp	LedScan_ISR_COM6
  1828  0002D6   7F13(1+S)  		b0bts1 _disp_map+0.7
  1829  0002D7   82DA(2)  		jmp	$+3
  1830  0002D8   69D4(1)  		b0bset	P4.1
  1831  0002D9   69C4(1)  		b0bset	P4M.1
  1832  0002DA   7F14(1+S)  		b0bts1 _disp_map+1.7
  1833  0002DB   82DE(2)  		jmp	$+3
  1834  0002DC   6CD5(1)  		b0bset	P5.4
  1835  0002DD   6CC5(1)  		b0bset	P5M.4
  1836  0002DE   7F15(1+S)  		b0bts1 _disp_map+2.7
  1837  0002DF   82E2(2)  		jmp	$+3
  1838  0002E0   69D0(1)  		b0bset	P0.1
  1839  0002E1   69B8(1)  		b0bset	P0M.1
  1840  0002E2   60D4(1)  		b0bclr	P4.0
  1841  0002E3   68C4(1)  		b0bset	P4M.0
  1842  0002E4   8347(2)  		jmp	LedScan_ISR_END
  1843  0002E5   7813(1+S)  		b0bts1 _disp_map+0.0
  1844  0002E6   82E9(2)  		jmp	$+3
  1845  0002E7   68D0(1)  		b0bset	P0.0
  1846  0002E8   68B8(1)  		b0bset	P0M.0
  1847  0002E9   7913(1+S)  		b0bts1 _disp_map+0.1
  1848  0002EA   82ED(2)  		jmp	$+3
  1849  0002EB   68D4(1)  		b0bset	P4.0
  1850  0002EC   68C4(1)  		b0bset	P4M.0
  1851  0002ED   7A13(1+S)  		b0bts1 _disp_map+0.2
  1852  0002EE   82F1(2)  		jmp	$+3
  1853  0002EF   69D4(1)  		b0bset	P4.1
  1854  0002F0   69C4(1)  		b0bset	P4M.1
  1855  0002F1   7B13(1+S)  		b0bts1 _disp_map+0.3
  1856  0002F2   82F5(2)  		jmp	$+3
  1857  0002F3   6CD5(1)  		b0bset	P5.4
  1858  0002F4   6CC5(1)  		b0bset	P5M.4
  1859  0002F5   7C13(1+S)  		b0bts1 _disp_map+0.4
  1860  0002F6   82F9(2)  		jmp	$+3
  1861  0002F7   69D0(1)  		b0bset	P0.1
  1862  0002F8   69B8(1)  		b0bset	P0M.1
  1863  0002F9   62D4(1)  		b0bclr	P4.2
  1864  0002FA   6AC4(1)  		b0bset	P4M.2
  1865  0002FB   8347(2)  		jmp	LedScan_ISR_END
  1866  0002FC   7814(1+S)  		b0bts1 _disp_map+1.0
  1867  0002FD   8300(2)  		jmp	$+3
  1868  0002FE   60D0(1)  		b0bclr	P0.0
  1869  0002FF   68B8(1)  		b0bset	P0M.0
  1870  000300   7914(1+S)  		b0bts1 _disp_map+1.1
  1871  000301   8304(2)  		jmp	$+3
  1872  000302   60D4(1)  		b0bclr	P4.0
  1873  000303   68C4(1)  		b0bset	P4M.0
  1874  000304   7A14(1+S)  		b0bts1 _disp_map+1.2
  1875  000305   8308(2)  		jmp	$+3
  1876  000306   61D4(1)  		b0bclr	P4.1
  1877  000307   69C4(1)  		b0bset	P4M.1
  1878  000308   7B14(1+S)  		b0bts1 _disp_map+1.3
  1879  000309   830C(2)  		jmp	$+3
  1880  00030A   64D5(1)  		b0bclr	P5.4
  1881  00030B   6CC5(1)  		b0bset	P5M.4
  1882  00030C   7C14(1+S)  		b0bts1 _disp_map+1.4
  1883  00030D   8310(2)  		jmp	$+3
  1884  00030E   61D0(1)  		b0bclr	P0.1
  1885  00030F   69B8(1)  		b0bset	P0M.1
  1886  000310   6AD4(1)  		b0bset	P4.2
  1887  000311   6AC4(1)  		b0bset	P4M.2
  1888  000312   8347(2)  		jmp	LedScan_ISR_END
  1889  000313   7D13(1+S)  		b0bts1 _disp_map+0.5
  1890  000314   8317(2)  		jmp	$+3
  1891  000315   68D4(1)  		b0bset	P4.0
  1892  000316   68C4(1)  		b0bset	P4M.0
  1893  000317   7E13(1+S)  		b0bts1 _disp_map+0.6
  1894  000318   831B(2)  		jmp	$+3
  1895  000319   69D4(1)  		b0bset	P4.1
  1896  00031A   69C4(1)  		b0bset	P4M.1
  1897  00031B   7D14(1+S)  		b0bts1 _disp_map+1.5
  1898  00031C   831F(2)  		jmp	$+3
  1899  00031D   6CD5(1)  		b0bset	P5.4
  1900  00031E   6CC5(1)  		b0bset	P5M.4
  1901  00031F   7E14(1+S)  		b0bts1 _disp_map+1.6
  1902  000320   8323(2)  		jmp	$+3
  1903  000321   69D0(1)  		b0bset	P0.1
  1904  000322   69B8(1)  		b0bset	P0M.1
  1905  000323   60D0(1)  		b0bclr	P0.0
  1906  000324   68B8(1)  		b0bset	P0M.0
  1907  000325   8347(2)  		jmp	LedScan_ISR_END
  1908  000326   7815(1+S)  		b0bts1 _disp_map+2.0
  1909  000327   832A(2)  		jmp	$+3
  1910  000328   60D4(1)  		b0bclr	P4.0
  1911  000329   68C4(1)  		b0bset	P4M.0
  1912  00032A   7915(1+S)  		b0bts1 _disp_map+2.1
  1913  00032B   832E(2)  		jmp	$+3
  1914  00032C   61D4(1)  		b0bclr	P4.1
  1915  00032D   69C4(1)  		b0bset	P4M.1
  1916  00032E   7A15(1+S)  		b0bts1 _disp_map+2.2
  1917  00032F   8332(2)  		jmp	$+3
  1918  000330   64D5(1)  		b0bclr	P5.4
  1919  000331   6CC5(1)  		b0bset	P5M.4
  1920  000332   7B15(1+S)  		b0bts1 _disp_map+2.3
  1921  000333   8336(2)  		jmp	$+3
  1922  000334   61D0(1)  		b0bclr	P0.1
  1923  000335   69B8(1)  		b0bset	P0M.1
  1924  000336   68D0(1)  		b0bset	P0.0
  1925  000337   68B8(1)  		b0bset	P0M.0
  1926  000338   8347(2)  		jmp	LedScan_ISR_END
  1927  000339   7C15(1+S)  		b0bts1 _disp_map+2.4
  1928  00033A   833D(2)  		jmp	$+3
  1929  00033B   61D4(1)  		b0bclr	P4.1
  1930  00033C   69C4(1)  		b0bset	P4M.1
  1931  00033D   7D15(1+S)  		b0bts1 _disp_map+2.5
  1932  00033E   8341(2)  		jmp	$+3
  1933  00033F   64D5(1)  		b0bclr	P5.4
  1934  000340   6CC5(1)  		b0bset	P5M.4
  1935  000341   7E15(1+S)  		b0bts1 _disp_map+2.6
  1936  000342   8345(2)  		jmp	$+3
  1937  000343   61D0(1)  		b0bclr	P0.1
  1938  000344   69B8(1)  		b0bset	P0M.1
  1939  000345   68D4(1)  		b0bset	P4.0
  1940  000346   68C4(1)  		b0bset	P4M.0
  1941  000347             	
  1942  000347             	//if(_50ms_count >= 20)
  1943  000347             	//{
  1944  000347             	//	_50ms_count = 0;
  1945  000347             	//	system_tick_flag = 1
  1946  000347             	//}
  1947  000347             	//else
  1948  000347             	//{
  1949  000347             	//	++_50ms_count;
  1950  000347             	//}
  1951  000347                isr_50ms_start:
  1952  000347   2E02(1)  	b0mov	a,_50ms_count
  1953  000348   2414(1)  	sub	a,#(20)       	//2.5ms * 20 = 50ms
  1954  000349   7A86(1+S)  	b0bts1  fc		
  1955  00034A   834D(2)          jmp	isr_50ms_1	//<20
  1956  00034B   2B02(1)  	clr	_50ms_count
  1957  00034C   6900(1)  	b0bset	system_tick_flag
  1958  00034D                isr_50ms_1:
  1959  00034D             	//++_50ms_count
  1960  00034D   1602(1+S)  	incms _50ms_count
  1961  00034E   0000(1)  	nop
  1962  00034F                isr_50ms_end:
  1963  00034F             isr_exit:
  1964  00034F   0500(1)  	pop
  1965  000350   0F00(2)  	reti
  1966  000351             
  1967  000351             
  1968  000351             .ENDP
