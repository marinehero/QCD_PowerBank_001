     1  000000             CHIP SN8P2711B
     2  000000             //{{SONIX_CODE_OPTION
     3  000000             	.Code_Option	LVD		LVD_H		; 2.4V Reset Enable LVD36 bit of PFLAG for 3.6V Low Voltage Indicator
     4  000000             	.Code_Option	Reset_Pin	P04
     5  000000             	.Code_Option	Watch_Dog	Always_On	; Watchdog still enable even in Green and Sleep mode
     6  000000             	.Code_Option	High_Clk	IHRC_16M	; Internal 16M RC Oscillator
     7  000000             	.Code_Option	Fcpu		#2     ; Fcpu = Fosc/4
     8  000000             	.Code_Option	Security	Enable
     9  000000             	.Code_Option	Noise_Filter	Disable
    10  000000             //}}SONIX_CODE_OPTION
    11  000000             	INCLUDESTD		MACRO1.H
    12  000000             	INCLUDESTD		MACRO2.H
    13  000000             	INCLUDESTD	 	MACRO3.H
    14  000000             	
    15  000000             .data
    16  E 00000001         	BIT0		equ	0x01
    17  E 00000002         	BIT1		equ	0x02
    18  E 00000004         	BIT2		equ	0x04
    19  E 00000008         	BIT3		equ	0x08
    20  E 00000010         	BIT4		equ	0x10
    21  E 00000020         	BIT5		equ	0x20
    22  E 00000040         	BIT6		equ	0x40
    23  E 00000080         	BIT7		equ	0x80
    24  E 00000014         	SYSTEM_TICK	equ	20	//50ms中断
    25  000000             
    26  0000 D             	flag0			ds	1
    27  E 00000000         	system_idle_flag	equ	flag0.0		//0->正常工作 1->待机模式
    28  E 00010000         	system_tick_flag	equ	flag0.1		//50ms置位一次
    29  E 00020000         	_disp_update_flag	equ	flag0.2		//刷新显示标志
    30  E 00030000         	_disp_voltage_flag	equ	flag0.3		//0->显示电量  1->显示电压
    31  E 00040000         	_input_power_flag	equ	flag0.4		//0->没有外部电源 1->有外部电源
    32  E 00050000         	_led_on_off_flag	equ	flag0.5		//0->LED_OFF	1->LED_ON
    33  E 00060000         	_lcd_init_flag		equ	flag0.6		//此标志为1表示LCD上电全显已执行过
    34  E 00070000         	_is_output_en_flag	equ	flag0.7		//0->升压输出未开启 1->升压输出开启
    35  000001             
    36  0001 D             	flag1			ds	1
    37  E 00000001         	_key_long_flag		equ	flag1.0		//长按执行标记,避免重复响应
    38  000002             
    39  0002 D             	tmp			ds	1		//临时变量
    40  0003 D             	_50ms_count		ds	1		//50ms计时
    41  0004 D             	_enter_idle_dly		ds	1		//按键唤醒后,延时进入IDLE
    42  000005             	
    43  000005             	//math.h
    44  0005 D             	_d_math_input0		ds	3     //被乘数 被除数
    45  0008 D             	_d_math_input1		ds	3     //乘数   除数
    46  000B D             	_d_math_output0		ds 	3     //积     商
    47  000E D             	_d_math_output1		ds	3     //余数 
    48  0011 D             	_count			ds	1     //循环移位计数器
    49  0012 D             	_math_tmp0		ds	1
    50  000013             
    51  000013             	//display.h
    52  0013 D             	_disp_swap_dly		ds	1	//电压和电量交替显示间隔计时
    53  0014 D             	_disp_update_dly	ds	1	//显示更新延时,避免数据刷新过快
    54  0015 D             	_disp_map		ds	3	//显存映射
    55  0018 D             	_led_scan_index		ds	1	//当前扫描的COM
    56  000019             
    57  000019             	//sensor.h
    58  0019 D             	_adc_ch_index		ds	1	//当前ADC通道
    59  001A D             	_ad_buf_tmp		ds	2	//AD转换的结果缓冲,主要是用于做移位和对齐
    60  00001C             	//_ad_buf_l		ds	6	//此数据用于做平均值滤波,去掉最大值与最小值
    61  00001C             	//_ad_buf_h		ds	6
    62  00001C             	//_ad_buf_l_sort		ds	6	//此数据用于做平均值滤波,去掉最大值与最小值
    63  00001C             	//_ad_buf_h_sort		ds	6
    64  001C D             	_ad_buf_index		ds	1	//
    65  001D D             	_ad_buf_sort_i		ds	1	//用于对多组AD数据进行排序
    66  001E D             	_cur_input_volgate	ds	1	//当前输入电压
    67  001F D             	_cur_batt_capacity	ds	1	//当前电池电量
    68  0020 D             	_batt_capacity_tmp	ds	1
    69  000021             	
    70  0021 D             	_adc_delay_count	ds	1	//转换前的延时计数
    71  0022 D             	_adc_ch_dly		ds	1	//通道采集切换延时
    72  000023             	
    73  000023             	//key.h
    74  0023 D             	key_value_tmp		ds	1
    75  0024 D             	key_value_old		ds	1
    76  0025 D             	key_value_cur		ds	1
    77  0026 D             	key_hold_tick		ds	1
    78  0027 D             	key_state_cur		ds	1
    79  0028 D             	key_repeat_tick		ds	1
    80  000029             
    81  0029 D             	_led_mode		ds	1	//LED模式
    82  002A D             	_led_mode_sub		ds	1	//对应模式下的亮灯控制
    83  002B D             	_led_dly		ds	1	//LED控制延时
    84  00002C             
    85  000000             .code
    86  000000               org 0x00
    87  000000   81B6(2)    jmp reset
    88  000008               org 0x08
    89  000008   833A(2)    jmp isr
    90  000020               org 0x20
    91  000020             
    92  000020             	include math.h
    93  000020             /*
    94  000020             	数学运算库
    95  000020             */
    96  000020             //==========================================================
    97  000020             //比较高低字节,不改变原数据
    98  000020             //num1-num2
    99  000020             //>=0: jmp->cjmp_1
   100  000020             //<0 : jmp->cjmp_2
   101  000020             //tmp0
   102  000020             comparison_16b macro  num1_l,num1_h,num2_l,num2_h,cjmp_1,cjmp_2
   103  000020                	mov  	a,num1_l	//先减低字节
   104  000020                	sub    	a,num2_l	
   105  000020                	mov  	a,num1_h	//再减高字节
   106  000020                	sbc    	a,num2_h	//
   107  000020                	b0bts0 	FC         	//
   108  000020                	jmp    	cjmp_1     	//如果等于0就 >=
   109  000020                	jmp    	cjmp_2     	//如果等于1就 <
   110  000020                	endm
   111  000020             //==================================================================================================
   112  000020             //交换两个16位数据
   113  000020             swap_16b macro num1_l,num1_h,num2_l,num2_h
   114  000020             	b0mov	a,num1_l
   115  000020             	b0xch	a,num2_l
   116  000020             	b0xch	a,num1_l
   117  000020             	b0mov	a,num1_h
   118  000020             	b0xch	a,num2_h
   119  000020             	b0xch	a,num1_h
   120  000020             	endm
   121  000020             //==================================================================================================
   122  000020             //num ++
   123  000020             cnt_inc_16b macro  num_l,num_h
   124  000020                	incms	num1_l
   125  000020                	jmp	$ + 3
   126  000020                	incms	num_h
   127  000020                	nop
   128  000020                	endm
   129  000020             //==================================================================================================
   130  000020             // num1 = num1 + num2
   131  000020             add_16b macro num1_l,num1_h,num2_l,num2_h
   132  000020                	b0mov	a,num2_l
   133  000020                	add	num1_l,a
   134  000020                	b0mov	a,num2_h
   135  000020                	adc	num1_h,a
   136  000020                	endm
   137  000020             //==================================================================================================
   138  000020             // num1 = num1 - num2
   139  000020             sub_16b macro num1_l,num1_h,num2_l,num2_h
   140  000020                	b0mov	a,num1_l
   141  000020                	sub	a,num2_l
   142  000020             	b0mov	num1_l,a
   143  000020                	b0mov	a,num1_h
   144  000020                	sbc	a,num2_h
   145  000020             	b0mov	num1_h,a
   146  000020                	endm
   147  000020             //==================================================================================================
   148  000020             	__div_u8_u8:
   149  000020             	//8位数除法
   150  000020             	//d_math_input0  = 被除数	
   151  000020             	//d_math_input1  = 除数		
   152  000020             	//d_math_output0 = 商	
   153  000020             	//d_math_output1 = 中间变量(余数)   	
   154  000020   2B0B(1)  		   clr		_d_math_output0    	//清0商
   155  000021   2B0E(1)  		   clr		_d_math_output1		//清0中间变量(余数)   
   156  000022   2B11(1)  		   clr      _count
   157  000023             		div_u8_u8_0:
   158  000023   1611(1+S)  		   incms	_count	 			//count加一
   159  000024   6286(1)  		   b0bclr	fc
   160  000025   0B0B(1)  		   rlcm		_d_math_output0    	//商左移一位至
   161  000026                        	   //b0bclr	fc
   162  000026   0B05(1)  		   rlcm		_d_math_input0     	//被除数中间变量左移1位存入中间变量
   163  000027   0B0E(1)  		   rlcm		_d_math_output1
   164  000028   1E0E(1)  		   mov		a,_d_math_output1  	//中间变量减去除数
   165  000029   2208(1)  		   sub		a,_d_math_input1
   166  00002A   7286(1+S)  		   b0bts0	fc 	 				//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   167  00002B   802D(2)  		   jmp		div_u8_u8_1
   168  00002C   8030(2)  		   jmp		div_u8_u8_2
   169  00002D             		div_u8_u8_1:         	 			//没有借位
   170  00002D   1F0E(1)  		   mov		_d_math_output1,a   //得到余数
   171  00002E   680B(1)  		   b0bset	_d_math_output0.0
   172  00002F   8030(2)  		   jmp		div_u8_u8_3
   173  000030             		div_u8_u8_2:		 					//如果有借位
   174  000030             		   //b0bclr	_d_math_output0.0
   175  000030             		div_u8_u8_3:
   176  000030   2D08(1)  		   mov		a,#8	 			//判断是否循环了8次
   177  000031   0711(1+S)  		   cmprs	a,_count
   178  000032   8023(2)  		   jmp		div_u8_u8_0
   179  000033   0E00(2)  		   ret
   180  000034             
   181  000034             //==================================================================================================
   182  000034              	__div_u16_u16:
   183  000034             		//16位数除16位数除法
   184  000034             		//d_math_input0  = 被除数	
   185  000034             		//d_math_input1  = 除数		
   186  000034             		//d_math_output0 = 商	
   187  000034             		//d_math_output1 = 中间变量(余数)   	
   188  000034   2B0B(1)  		   clr		_d_math_output0    		//清0商
   189  000035   2B0C(1)  		   clr      	_d_math_output0 + 1
   190  000036   2B0E(1)  		   clr		_d_math_output1			//清0中间变量(余数)   
   191  000037   2B0F(1)  		   clr		_d_math_output1 + 1
   192  000038   2B11(1)  		   clr      	_count
   193  000039             		div_u16_u16_0:
   194  000039   1611(1+S)  		   incms	_count	 				//count加一
   195  00003A   6286(1)  		   b0bclr	fc
   196  00003B   0B0B(1)  		   rlcm		_d_math_output0    		//商左移1位
   197  00003C   0B0C(1)  		   rlcm     	_d_math_output0 + 1
   198  00003D             		   //b0bclr	fc
   199  00003D   0B05(1)  		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   200  00003E   0B06(1)  		   rlcm     	_d_math_input0 + 1
   201  00003F   0B0E(1)  		   rlcm		_d_math_output1
   202  000040   0B0F(1)  		   rlcm     	_d_math_output1 + 1
   203  000041             
   204  000041   2E0E(1)  		   b0mov	a,_d_math_output1  		//中间变量减去除数
   205  000042   2208(1)  		   sub		a,_d_math_input1
   206  000043   2F12(1)  		   b0mov    	_math_tmp0,a
   207  000044   2E0F(1)  		   b0mov    	a,_d_math_output1 + 1
   208  000045   2009(1)  		   sbc      	a,_d_math_input1 + 1
   209  000046             		   //b0mov    	_tmp1,a
   210  000046   7286(1+S)  		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   211  000047   8049(2)  		   jmp		div_u16_u16_1
   212  000048   804E(2)  		   jmp		div_u16_u16_2
   213  000049             		div_u16_u16_1:         	 				//没有借位
   214  000049   2F0F(1)  		   b0mov	_d_math_output1 + 1,a   //得到余数
   215  00004A   2E12(1)  		   b0mov    	a,_math_tmp0
   216  00004B   2F0E(1)  		   b0mov    	_d_math_output1,a
   217  00004C   680B(1)  		   b0bset	_d_math_output0.0
   218  00004D   804E(2)  		   jmp		div_u16_u16_3
   219  00004E             		div_u16_u16_2:		 					//如果有借位
   220  00004E             		   //b0bclr	_d_math_output0.0
   221  00004E             		div_u16_u16_3:
   222  00004E   2D10(1)  		   mov		a,#16	 				//判断是否循环了16次
   223  00004F   0711(1+S)  		   cmprs	a,_count
   224  000050   8039(2)  		   jmp		div_u16_u16_0
   225  000051   0E00(2)  		   ret
   226  000052             //==================================================================================================
   227  000052             /* 	__div_u24_u16:
   228  000052             		//24位数除16位数除法
   229  000052             		//d_math_input0  = 被除数	
   230  000052             		//d_math_input1  = 除数		
   231  000052             		//d_math_output0 = 商	
   232  000052             		//d_math_output1 = 中间变量(余数)   	
   233  000052             		   clr          _d_math_input1 + 2		//清除数高位
   234  000052             		   clr		_d_math_output0    		//清0商
   235  000052             		   clr      	_d_math_output0 + 1
   236  000052             		   clr      	_d_math_output0 + 2
   237  000052             		   clr		_d_math_output1			//清0中间变量(余数)   
   238  000052             		   clr		_d_math_output1 + 1		
   239  000052             		   clr		_d_math_output1 + 2
   240  000052             		   clr      	_count
   241  000052             		div_u24_u16_0:
   242  000052             		   incms	_count	 				//count加一
   243  000052             		   b0bclr	fc
   244  000052             		   rlcm		_d_math_output0    		//商左移1位
   245  000052             		   rlcm     	_d_math_output0 + 1
   246  000052             		   rlcm     	_d_math_output0 + 2	
   247  000052             		   //b0bclr	fc
   248  000052             		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   249  000052             		   rlcm     	_d_math_input0 + 1
   250  000052             		   rlcm     	_d_math_input0 + 2
   251  000052             		   rlcm		_d_math_output1
   252  000052             		   rlcm     	_d_math_output1 + 1
   253  000052             	    	   rlcm     	_d_math_output1 + 2
   254  000052             
   255  000052             		   b0mov	a,_d_math_output1  		//中间变量减去除数
   256  000052             		   sub		a,_d_math_input1
   257  000052             		   b0mov    	_math_tmp0,a
   258  000052             		   b0mov    	a,_d_math_output1 + 1
   259  000052             		   sbc      	a,_d_math_input1 + 1
   260  000052             		   b0mov    	_math_tmp0 + 1,a
   261  000052             		   b0mov    	a,_d_math_output1 + 2
   262  000052             		   sbc      	a,_d_math_input1 + 2
   263  000052             		   //b0mov    	_tmp1,a
   264  000052             		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   265  000052             		   jmp		div_u24_u16_1
   266  000052             		   jmp		div_u24_u16_2
   267  000052             		div_u24_u16_1:         	 				//没有借位
   268  000052             		   b0mov	_d_math_output1 + 2,a   //得到余数
   269  000052             		   b0mov    	a,_math_tmp0
   270  000052             		   b0mov    	_d_math_output1,a
   271  000052                 		   b0mov    	a,_math_tmp0 + 1
   272  000052             		   b0mov    	_d_math_output1 + 1,a
   273  000052             		   b0bset	_d_math_output0.0
   274  000052             		   jmp		div_u24_u16_3
   275  000052             		div_u24_u16_2:		 					//如果有借位
   276  000052             		   //b0bclr	_d_math_output0.0
   277  000052             		div_u24_u16_3:
   278  000052             		   mov		a,#24	 				//判断是否循环了24次
   279  000052             		   cmprs	a,_count
   280  000052             		   jmp		div_u24_u16_0
   281  000052             		   ret
   282  000052             */
   283  000052             //==================================================================================================
   284  000052             	__mul_u16_u8: //2711B没有乘法指令
   285  000052             		//16位数 x 8位数 乘法(结果不超出24位)
   286  000052             		//d_math_input0  = 被乘数	
   287  000052             		//d_math_input1  = 乘数		
   288  000052             		//d_math_output0 = 积
   289  000052             		/*	b0mov	a,_d_math_input0+0
   290  000052             			mul	a,_d_math_input1+0
   291  000052             			b0mov	_d_math_output0,a
   292  000052             			b0mov	a,R
   293  000052             			b0mov	_d_math_output0+1,a
   294  000052             			b0mov	a,_d_math_input0+1
   295  000052             			mul	a,_d_math_input1+0
   296  000052             			add	_d_math_output0+1,a
   297  000052             			b0mov	a,R
   298  000052             			clr	_d_math_output0+2
   299  000052             			adc	_d_math_output0+2,a
   300  000052             			ret*/
   301  000052   2B07(1)  			clr		_d_math_input0 + 2     	//清被乘数高位
   302  000053   2B0A(1)                          clr             _d_math_input1 + 2	//清乘数高位
   303  000054   2B09(1)  			clr             _d_math_input1 + 1	//清乘数中位
   304  000055   2B0B(1)  		   	clr		_d_math_output0    	//清0积
   305  000056   2B0C(1)  			clr		_d_math_output0 + 1
   306  000057   2B0D(1)  			clr		_d_math_output0 + 2
   307  000058   2B11(1)  		   	clr     	_count
   308  000059             		mul_u16_u8_0:
   309  000059   1611(1+S)  		   	incms		_count	 		//count加一
   310  00005A             
   311  00005A   0908(1)  			rrcm    	_d_math_input1      	//乘数右移1位
   312  00005B   7A86(1+S)  			b0bts1		fc  				
   313  00005C   8063(2)  			jmp		mul_u16_u8_1
   314  00005D             
   315  00005D   2E05(1)  			b0mov   	a,_d_math_input0     	//被乘数加到积
   316  00005E   130B(1)  			add     	_d_math_output0,a
   317  00005F   2E06(1)  			b0mov   	a,_d_math_input0 + 1
   318  000060   110C(1)  			adc     	_d_math_output0 + 1,a
   319  000061   1E07(1)  			mov		a,_d_math_input0 + 2
   320  000062   110D(1)  			adc		_d_math_output0 + 2,a
   321  000063             		mul_u16_u8_1:
   322  000063   6286(1)  			b0bclr		fc         	 			
   323  000064   0B05(1)  		   	rlcm    	_d_math_input0  	//被乘数左移
   324  000065   0B06(1)  			rlcm    	_d_math_input0 + 1
   325  000066   0B07(1)  			rlcm    	_d_math_input0 + 2
   326  000067             		mul_u16_u8_2:
   327  000067   2D08(1)  		   	mov		a,#8	 		//判断是否循环了8次
   328  000068   0711(1+S)  		   	cmprs		a,_count
   329  000069   8059(2)  		   	jmp		mul_u16_u8_0
   330  00006A   0E00(2)  			ret
   331  00006B             //==================================================================================================
   332  00006B             /*		//16位数 x 16位数 乘法(结果不超出32位)
   333  00006B             		//d_math_input0  = 被乘数	
   334  00006B             		//d_math_input1  = 乘数		
   335  00006B             		//d_math_output0 = 积
   336  00006B             		//_math_tmp0
   337  00006B             	__mul_u16_u16:
   338  00006B             		call	__mul_u16_u8
   339  00006B             		b0mov	a,_d_math_output0+0
   340  00006B             		b0mov	_math_tmp0+0,a
   341  00006B             		b0mov	a,_d_math_output0+1
   342  00006B             		b0mov	_math_tmp0+1,a
   343  00006B             		b0mov	a,_d_math_output0+2
   344  00006B             		b0mov	_math_tmp0+2,a
   345  00006B             		b0mov	a,_d_math_input1+1
   346  00006B             		b0mov	_d_math_input1+0,a
   347  00006B             		call	__mul_u16_u8
   348  00006B             		b0mov	a,_d_math_output0+2
   349  00006B             		b0mov	_d_math_output0+3,a
   350  00006B             		b0mov	a,_d_math_output0+1
   351  00006B             		b0mov	_d_math_output0+2,a
   352  00006B             		b0mov	a,_d_math_output0+0
   353  00006B             		b0mov	_d_math_output0+1,a
   354  00006B             		b0mov	a,_math_tmp0+0
   355  00006B             		b0mov	_d_math_output0+0,a 
   356  00006B             		b0mov	a,_math_tmp0+1
   357  00006B             		add	_d_math_output0+1,a
   358  00006B             		b0mov	a,_math_tmp0+2
   359  00006B             		adc	_d_math_output0+2,a
   360  00006B             		mov	a,#(0)
   361  00006B             		adc	_d_math_output0+3,a	
   362  00006B             		ret*/
   363  00006B             //==================================================================================================
   364  00006B             //end files
   365  00006B             
   366  00006B             
   367  00006B             	include sensor.h
   368  00006B             /*
   369  00006B             
   370  00006B             */
   371  00006B             //========================================================================================
   372  00006B             	//结果存入 _ad_buf_tmp
   373  00006B             	SensorADConvert_CH	macro	ch
   374  00006B             		mov	a,#(ch | BIT4 | BIT7)
   375  00006B             		b0mov	ADM,a
   376  00006B             		call	SensorADConvert
   377  00006B             		endm
   378  00006B             //========================================================================================
   379  00006B             	AdcDelay macro
   380  00006B             		mov	a,#(50)
   381  00006B             		b0mov	_adc_delay_count,a
   382  00006B             		decms	_adc_delay_count
   383  00006B             		jmp	$ - 1
   384  00006B             		endm
   385  00006B             //========================================================================================
   386  00006B             	//启动一次ADC转换
   387  00006B             	//结果存入 _ad_buf_tmp
   388  00006B             	SensorADConvert:
   389  00006B   2D50(1)  		MOV A, #(0x50)
   390  00006C   2FB3(1)    		B0MOV ADR, A	//ADC clock: 2MHZ,ADC resolution: -1
   391  00006D   2D00(1)    		MOV A, #(0x00)
   392  00006E   2FAF(1)    		B0MOV VREFH, A	//Internal VREFH: 2V
   393  00006F             
   394  00006F             		AdcDelay
   395  00006F   2D32(1)  		mov	a,#(50)
   396  000070   2F21(1)  		b0mov	_adc_delay_count,a
   397  000071   2621(1+S)  		decms	_adc_delay_count
   398  000072   8071(2)  		jmp	$ - 1
   399  000073   6EB1(1)  		b0bset	FADS			//start adc
   400  000074             	SensorADConvert_wait_adc:
   401  000074   7DB1(1+S)  		b0bts1	FEOC			//检查ADC状态标志
   402  000075   8074(2)     		jmp	SensorADConvert_wait_adc	//eco=0：AD转换中
   403  000076   2EB2(1)  		b0mov	a,ADB
   404  000077   2F1B(1)  		b0mov	_ad_buf_tmp + 1,a
   405  000078   2EB3(1)  		b0mov	a,ADR
   406  000079   2F1A(1)  		b0mov	_ad_buf_tmp + 0,a
   407  00007A   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   408  00007B   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   409  00007C   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   410  00007D   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   411  00007E   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   412  00007F   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   413  000080   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   414  000081   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   415  000082   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   416  000083   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   417  000084   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   418  000085   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   419  000086   2D0F(1)  		mov	a,#(0x0f)
   420  000087   291B(1)  		and	_ad_buf_tmp + 1,a	//把高位的高4位清零
   421  000088   0E00(2)  		ret
   422  000089             //========================================================================================
   423  000089             /*	//对同一个通道6次采样求平均(去掉最大值和最小值)
   424  000089             	//结果存入 _ad_buf_tmp
   425  000089             	SensorAdAverage:
   426  000089             		//if(++_ad_buf_index < 6) return
   427  000089             		incms	_ad_buf_index
   428  000089             		nop
   429  000089             		b0mov	a,_ad_buf_index
   430  000089             		sub	a,#(6)
   431  000089             		b0bts1	fc
   432  000089             		jmp	$+2  		//<6
   433  000089             		clr	_ad_buf_index
   434  000089             		
   435  000089             		call	SensorADConvert
   436  000089             		//_ad_buf_l[_ad_buf_index] = _ad_buf_tmp+0
   437  000089             		b0mov	Y,#(0)
   438  000089             		b0mov	Z,#_ad_buf_l$L
   439  000089             		b0mov	A,_ad_buf_index
   440  000089             		add	Z,A
   441  000089             		b0mov	a,_ad_buf_tmp+0
   442  000089             		b0mov	@YZ,a
   443  000089             
   444  000089             		//_ad_buf_h[_ad_buf_index] = _ad_buf_tmp+1
   445  000089             		//b0mov	Y,#(0)
   446  000089             		b0mov	Z,#_ad_buf_h$L
   447  000089             		b0mov	A,_ad_buf_index
   448  000089             		add	Z,A
   449  000089             		b0mov	a,_ad_buf_tmp+1
   450  000089             		b0mov	@YZ,a
   451  000089             	//======================================================================
   452  000089             	//复制数据到排序缓冲区
   453  000089             		b0mov	a,_ad_buf_l+0
   454  000089             		b0mov	_ad_buf_l_sort+0,a
   455  000089             		b0mov	a,_ad_buf_l+1
   456  000089             		b0mov	_ad_buf_l_sort+1,a
   457  000089             		b0mov	a,_ad_buf_l+2
   458  000089             		b0mov	_ad_buf_l_sort+2,a
   459  000089             		b0mov	a,_ad_buf_l+3
   460  000089             		b0mov	_ad_buf_l_sort+3,a
   461  000089             		b0mov	a,_ad_buf_l+4
   462  000089             		b0mov	_ad_buf_l_sort+4,a
   463  000089             		b0mov	a,_ad_buf_l+5
   464  000089             		b0mov	_ad_buf_l_sort+5,a
   465  000089             
   466  000089             		b0mov	a,_ad_buf_h+0
   467  000089             		b0mov	_ad_buf_h_sort+0,a
   468  000089             		b0mov	a,_ad_buf_h+1
   469  000089             		b0mov	_ad_buf_h_sort+1,a
   470  000089             		b0mov	a,_ad_buf_h+2
   471  000089             		b0mov	_ad_buf_h_sort+2,a
   472  000089             		b0mov	a,_ad_buf_h+3
   473  000089             		b0mov	_ad_buf_h_sort+3,a
   474  000089             		b0mov	a,_ad_buf_h+4
   475  000089             		b0mov	_ad_buf_h_sort+4,a
   476  000089             		b0mov	a,_ad_buf_h+5
   477  000089             		b0mov	_ad_buf_h_sort+5,a
   478  000089             	//======================================================================
   479  000089             	//排序
   480  000089             		mov	a,#(5)
   481  000089             		b0mov	_ad_buf_sort_i,a
   482  000089                	SensorAdAverage_comp_01:
   483  000089             		comparison_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1,SensorAdAverage_swap_01,SensorAdAverage_comp_12
   484  000089             	SensorAdAverage_swap_01:
   485  000089             		swap_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   486  000089             	SensorAdAverage_comp_12:
   487  000089             		comparison_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2,SensorAdAverage_swap_12,SensorAdAverage_comp_23
   488  000089             	SensorAdAverage_swap_12:
   489  000089             		swap_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   490  000089             	SensorAdAverage_comp_23:
   491  000089             		comparison_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3,SensorAdAverage_swap_23,SensorAdAverage_comp_34
   492  000089             	SensorAdAverage_swap_23:
   493  000089             		swap_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   494  000089             	SensorAdAverage_comp_34:
   495  000089             		comparison_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4,SensorAdAverage_swap_34,SensorAdAverage_comp_45
   496  000089             	SensorAdAverage_swap_34:
   497  000089             		swap_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   498  000089             	SensorAdAverage_comp_45:
   499  000089             		comparison_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5,SensorAdAverage_swap_45,SensorAdAverage_comp_56
   500  000089             	SensorAdAverage_swap_45:
   501  000089             		swap_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5
   502  000089             	SensorAdAverage_comp_56:
   503  000089             		decms	_ad_buf_sort_i
   504  000089             		jmp	SensorAdAverage_comp_01
   505  000089             	//======================================================================
   506  000089             	//求中间四次的平均值,去掉最大的1个和最小的1个数
   507  000089             		clr	_ad_buf_tmp+0	
   508  000089             		clr	_ad_buf_tmp+1
   509  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   510  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   511  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   512  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   513  000089             	
   514  000089             		rrcm	_ad_buf_tmp+1	;高位带进位右移
   515  000089                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   516  000089                		rrcm	_ad_buf_tmp+1	;高位带进位右移
   517  000089                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   518  000089                		mov	a,#(0x0F) 	;把高位的左4为置0
   519  000089                		and	_ad_buf_tmp+1,a
   520  000089             		ret*/
   521  000089             //========================================================================================
   522  000089             //计算电池电量
   523  000089             /*	//AD = 256 * V(0.1V) / 5  
   524  000089             	//4096 = 256 * 80 / 5
   525  000089             	batt_capacity_tab_add:
   526  000089             		dw	2150	//4.2
   527  000089             		dw	2110
   528  000089             		dw	2070
   529  000089             		dw	2030
   530  000089             		dw	1990
   531  000089             		dw	1950
   532  000089             		dw	1910
   533  000089             		dw	1870	
   534  000089             		dw	1830
   535  000089             		dw	1790
   536  000089             		dw	1750	//3.42
   537  000089             	batt_capacity_tab_dec:
   538  000089             		dw	2090	//4.08
   539  000089             		dw	2040
   540  000089             		dw	1990
   541  000089             		dw	1940
   542  000089             		dw	1890
   543  000089             		dw	1840
   544  000089             		dw	1790
   545  000089             		dw	1740
   546  000089             		dw	1690
   547  000089             		dw	1640
   548  000089             		dw	1590	//3.1
   549  000089             */
   550  000089             	SensorMathBattCapacity:
   551  000089   7C00(1+S)  		b0bts1	_input_power_flag
   552  00008A   810C(2)  		jmp	SensorMathBattCapacity_DEC
   553  00008B             //==================================================================================================
   554  00008B             		comparison_16b	#(2155&0xff),#((2155>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_nofull,SensorMathBattCapacity_ADD_full
   555  00008B   2D6B(1)     	mov  	a,#(2155&0xff)	//先减低字节
   556  00008C   221A(1)     	sub    	a,_ad_buf_tmp+0	
   557  00008D   2D08(1)     	mov  	a,#((2155>>8)&0xff)	//再减高字节
   558  00008E   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   559  00008F   7286(1+S)     	b0bts0 	FC         	//
   560  000090   8095(2)     	jmp    	SensorMathBattCapacity_ADD_nofull     	//如果等于0就 >=
   561  000091   8092(2)     	jmp    	SensorMathBattCapacity_ADD_full     	//如果等于1就 <
   562  000092             	SensorMathBattCapacity_ADD_full:
   563  000092   2D64(1)  		mov	a,#(100)
   564  000093   2F1F(1)  		b0mov	_cur_batt_capacity,a
   565  000094   818C(2)  		jmp	SensorMathBattCapacity_Exit
   566  000095             	SensorMathBattCapacity_ADD_nofull:
   567  000095             		comparison_16b	#(2150&0xff),#((2150>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_90,SensorMathBattCapacity_ADD_99
   568  000095   2D66(1)     	mov  	a,#(2150&0xff)	//先减低字节
   569  000096   221A(1)     	sub    	a,_ad_buf_tmp+0	
   570  000097   2D08(1)     	mov  	a,#((2150>>8)&0xff)	//再减高字节
   571  000098   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   572  000099   7286(1+S)     	b0bts0 	FC         	//
   573  00009A   809F(2)     	jmp    	SensorMathBattCapacity_ADD_90     	//如果等于0就 >=
   574  00009B   809C(2)     	jmp    	SensorMathBattCapacity_ADD_99     	//如果等于1就 <
   575  00009C             	SensorMathBattCapacity_ADD_99:
   576  00009C   2D63(1)  		mov	a,#(99)
   577  00009D   2F20(1)  		b0mov	_batt_capacity_tmp,a
   578  00009E   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   579  00009F             	SensorMathBattCapacity_ADD_90:
   580  00009F             		comparison_16b	#(2110&0xff),#((2110>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_80,SensorMathBattCapacity_ADD_90_more
   581  00009F   2D3E(1)     	mov  	a,#(2110&0xff)	//先减低字节
   582  0000A0   221A(1)     	sub    	a,_ad_buf_tmp+0	
   583  0000A1   2D08(1)     	mov  	a,#((2110>>8)&0xff)	//再减高字节
   584  0000A2   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   585  0000A3   7286(1+S)     	b0bts0 	FC         	//
   586  0000A4   80A9(2)     	jmp    	SensorMathBattCapacity_ADD_80     	//如果等于0就 >=
   587  0000A5   80A6(2)     	jmp    	SensorMathBattCapacity_ADD_90_more     	//如果等于1就 <
   588  0000A6             	SensorMathBattCapacity_ADD_90_more:
   589  0000A6   2D5A(1)  		mov	a,#(90)
   590  0000A7   2F20(1)  		b0mov	_batt_capacity_tmp,a
   591  0000A8   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   592  0000A9             	SensorMathBattCapacity_ADD_80:
   593  0000A9             		comparison_16b	#(2070&0xff),#((2070>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_70,SensorMathBattCapacity_ADD_80_more
   594  0000A9   2D16(1)     	mov  	a,#(2070&0xff)	//先减低字节
   595  0000AA   221A(1)     	sub    	a,_ad_buf_tmp+0	
   596  0000AB   2D08(1)     	mov  	a,#((2070>>8)&0xff)	//再减高字节
   597  0000AC   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   598  0000AD   7286(1+S)     	b0bts0 	FC         	//
   599  0000AE   80B3(2)     	jmp    	SensorMathBattCapacity_ADD_70     	//如果等于0就 >=
   600  0000AF   80B0(2)     	jmp    	SensorMathBattCapacity_ADD_80_more     	//如果等于1就 <
   601  0000B0             	SensorMathBattCapacity_ADD_80_more:
   602  0000B0   2D50(1)  		mov	a,#(80)
   603  0000B1   2F20(1)  		b0mov	_batt_capacity_tmp,a
   604  0000B2   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   605  0000B3             	SensorMathBattCapacity_ADD_70:
   606  0000B3             		comparison_16b	#(2030&0xff),#((2030>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_60,SensorMathBattCapacity_ADD_70_more
   607  0000B3   2DEE(1)     	mov  	a,#(2030&0xff)	//先减低字节
   608  0000B4   221A(1)     	sub    	a,_ad_buf_tmp+0	
   609  0000B5   2D07(1)     	mov  	a,#((2030>>8)&0xff)	//再减高字节
   610  0000B6   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   611  0000B7   7286(1+S)     	b0bts0 	FC         	//
   612  0000B8   80BD(2)     	jmp    	SensorMathBattCapacity_ADD_60     	//如果等于0就 >=
   613  0000B9   80BA(2)     	jmp    	SensorMathBattCapacity_ADD_70_more     	//如果等于1就 <
   614  0000BA             	SensorMathBattCapacity_ADD_70_more:
   615  0000BA   2D46(1)  		mov	a,#(70)
   616  0000BB   2F20(1)  		b0mov	_batt_capacity_tmp,a
   617  0000BC   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   618  0000BD             	SensorMathBattCapacity_ADD_60:
   619  0000BD             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_50,SensorMathBattCapacity_ADD_60_more
   620  0000BD   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   621  0000BE   221A(1)     	sub    	a,_ad_buf_tmp+0	
   622  0000BF   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   623  0000C0   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   624  0000C1   7286(1+S)     	b0bts0 	FC         	//
   625  0000C2   80C7(2)     	jmp    	SensorMathBattCapacity_ADD_50     	//如果等于0就 >=
   626  0000C3   80C4(2)     	jmp    	SensorMathBattCapacity_ADD_60_more     	//如果等于1就 <
   627  0000C4             	SensorMathBattCapacity_ADD_60_more:
   628  0000C4   2D3C(1)  		mov	a,#(60)
   629  0000C5   2F20(1)  		b0mov	_batt_capacity_tmp,a
   630  0000C6   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   631  0000C7             	SensorMathBattCapacity_ADD_50:
   632  0000C7             		comparison_16b	#(1950&0xff),#((1950>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_40,SensorMathBattCapacity_ADD_50_more
   633  0000C7   2D9E(1)     	mov  	a,#(1950&0xff)	//先减低字节
   634  0000C8   221A(1)     	sub    	a,_ad_buf_tmp+0	
   635  0000C9   2D07(1)     	mov  	a,#((1950>>8)&0xff)	//再减高字节
   636  0000CA   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   637  0000CB   7286(1+S)     	b0bts0 	FC         	//
   638  0000CC   80D1(2)     	jmp    	SensorMathBattCapacity_ADD_40     	//如果等于0就 >=
   639  0000CD   80CE(2)     	jmp    	SensorMathBattCapacity_ADD_50_more     	//如果等于1就 <
   640  0000CE             	SensorMathBattCapacity_ADD_50_more:
   641  0000CE   2D32(1)  		mov	a,#(50)
   642  0000CF   2F20(1)  		b0mov	_batt_capacity_tmp,a
   643  0000D0   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   644  0000D1             	SensorMathBattCapacity_ADD_40:
   645  0000D1             		comparison_16b	#(1910&0xff),#((1910>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_30,SensorMathBattCapacity_ADD_40_more
   646  0000D1   2D76(1)     	mov  	a,#(1910&0xff)	//先减低字节
   647  0000D2   221A(1)     	sub    	a,_ad_buf_tmp+0	
   648  0000D3   2D07(1)     	mov  	a,#((1910>>8)&0xff)	//再减高字节
   649  0000D4   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   650  0000D5   7286(1+S)     	b0bts0 	FC         	//
   651  0000D6   80DB(2)     	jmp    	SensorMathBattCapacity_ADD_30     	//如果等于0就 >=
   652  0000D7   80D8(2)     	jmp    	SensorMathBattCapacity_ADD_40_more     	//如果等于1就 <
   653  0000D8             	SensorMathBattCapacity_ADD_40_more:
   654  0000D8   2D28(1)  		mov	a,#(40)
   655  0000D9   2F20(1)  		b0mov	_batt_capacity_tmp,a
   656  0000DA   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   657  0000DB             	SensorMathBattCapacity_ADD_30:
   658  0000DB             		comparison_16b	#(1870&0xff),#((1870>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_20,SensorMathBattCapacity_ADD_30_more
   659  0000DB   2D4E(1)     	mov  	a,#(1870&0xff)	//先减低字节
   660  0000DC   221A(1)     	sub    	a,_ad_buf_tmp+0	
   661  0000DD   2D07(1)     	mov  	a,#((1870>>8)&0xff)	//再减高字节
   662  0000DE   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   663  0000DF   7286(1+S)     	b0bts0 	FC         	//
   664  0000E0   80E5(2)     	jmp    	SensorMathBattCapacity_ADD_20     	//如果等于0就 >=
   665  0000E1   80E2(2)     	jmp    	SensorMathBattCapacity_ADD_30_more     	//如果等于1就 <
   666  0000E2             	SensorMathBattCapacity_ADD_30_more:
   667  0000E2   2D1E(1)  		mov	a,#(30)
   668  0000E3   2F20(1)  		b0mov	_batt_capacity_tmp,a
   669  0000E4   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   670  0000E5             	SensorMathBattCapacity_ADD_20:
   671  0000E5             		comparison_16b	#(1830&0xff),#((1830>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_10,SensorMathBattCapacity_ADD_20_more
   672  0000E5   2D26(1)     	mov  	a,#(1830&0xff)	//先减低字节
   673  0000E6   221A(1)     	sub    	a,_ad_buf_tmp+0	
   674  0000E7   2D07(1)     	mov  	a,#((1830>>8)&0xff)	//再减高字节
   675  0000E8   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   676  0000E9   7286(1+S)     	b0bts0 	FC         	//
   677  0000EA   80EF(2)     	jmp    	SensorMathBattCapacity_ADD_10     	//如果等于0就 >=
   678  0000EB   80EC(2)     	jmp    	SensorMathBattCapacity_ADD_20_more     	//如果等于1就 <
   679  0000EC             	SensorMathBattCapacity_ADD_20_more:
   680  0000EC   2D14(1)  		mov	a,#(20)
   681  0000ED   2F20(1)  		b0mov	_batt_capacity_tmp,a
   682  0000EE   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   683  0000EF             	SensorMathBattCapacity_ADD_10:
   684  0000EF             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0,SensorMathBattCapacity_ADD_10_more
   685  0000EF   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   686  0000F0   221A(1)     	sub    	a,_ad_buf_tmp+0	
   687  0000F1   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   688  0000F2   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   689  0000F3   7286(1+S)     	b0bts0 	FC         	//
   690  0000F4   80F9(2)     	jmp    	SensorMathBattCapacity_ADD_0     	//如果等于0就 >=
   691  0000F5   80F6(2)     	jmp    	SensorMathBattCapacity_ADD_10_more     	//如果等于1就 <
   692  0000F6             	SensorMathBattCapacity_ADD_10_more:
   693  0000F6   2D0A(1)  		mov	a,#(10)
   694  0000F7   2F20(1)  		b0mov	_batt_capacity_tmp,a
   695  0000F8   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   696  0000F9             	SensorMathBattCapacity_ADD_0:
   697  0000F9             		comparison_16b	#(1750&0xff),#((1750>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0_less,SensorMathBattCapacity_ADD_0_more
   698  0000F9   2DD6(1)     	mov  	a,#(1750&0xff)	//先减低字节
   699  0000FA   221A(1)     	sub    	a,_ad_buf_tmp+0	
   700  0000FB   2D06(1)     	mov  	a,#((1750>>8)&0xff)	//再减高字节
   701  0000FC   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   702  0000FD   7286(1+S)     	b0bts0 	FC         	//
   703  0000FE   8103(2)     	jmp    	SensorMathBattCapacity_ADD_0_less     	//如果等于0就 >=
   704  0000FF   8100(2)     	jmp    	SensorMathBattCapacity_ADD_0_more     	//如果等于1就 <
   705  000100             	SensorMathBattCapacity_ADD_0_more:
   706  000100   2D01(1)  		mov	a,#(1)
   707  000101   2F20(1)  		b0mov	_batt_capacity_tmp,a
   708  000102   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   709  000103             	SensorMathBattCapacity_ADD_0_less:
   710  000103   2D00(1)  		mov	a,#(0)
   711  000104   2F20(1)  		b0mov	_batt_capacity_tmp,a
   712  000105             	SensorMathBattCapacity_ADD_End:
   713  000105   2E20(1)  		b0mov	a,_batt_capacity_tmp
   714  000106   221F(1)  		sub	a,_cur_batt_capacity
   715  000107   7A86(1+S)  		b0bts1	fc
   716  000108   818C(2)  		jmp	SensorMathBattCapacity_Exit
   717  000109   2E20(1)  		b0mov	a,_batt_capacity_tmp
   718  00010A   2F1F(1)  		b0mov	_cur_batt_capacity,a
   719  00010B   818C(2)  		jmp	SensorMathBattCapacity_Exit
   720  00010C             //==================================================================================================
   721  00010C             	SensorMathBattCapacity_DEC:
   722  00010C             	comparison_16b	#(2095&0xff),#((2095>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_nofull,SensorMathBattCapacity_DEC_full
   723  00010C   2D2F(1)     	mov  	a,#(2095&0xff)	//先减低字节
   724  00010D   221A(1)     	sub    	a,_ad_buf_tmp+0	
   725  00010E   2D08(1)     	mov  	a,#((2095>>8)&0xff)	//再减高字节
   726  00010F   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   727  000110   7286(1+S)     	b0bts0 	FC         	//
   728  000111   8116(2)     	jmp    	SensorMathBattCapacity_DEC_nofull     	//如果等于0就 >=
   729  000112   8113(2)     	jmp    	SensorMathBattCapacity_DEC_full     	//如果等于1就 <
   730  000113             	SensorMathBattCapacity_DEC_full:
   731  000113   2D64(1)  		mov	a,#(100)
   732  000114   2F20(1)  		b0mov	_batt_capacity_tmp,a
   733  000115   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   734  000116             	SensorMathBattCapacity_DEC_nofull:
   735  000116             		comparison_16b	#(2090&0xff),#((2090>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_90,SensorMathBattCapacity_DEC_99
   736  000116   2D2A(1)     	mov  	a,#(2090&0xff)	//先减低字节
   737  000117   221A(1)     	sub    	a,_ad_buf_tmp+0	
   738  000118   2D08(1)     	mov  	a,#((2090>>8)&0xff)	//再减高字节
   739  000119   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   740  00011A   7286(1+S)     	b0bts0 	FC         	//
   741  00011B   8120(2)     	jmp    	SensorMathBattCapacity_DEC_90     	//如果等于0就 >=
   742  00011C   811D(2)     	jmp    	SensorMathBattCapacity_DEC_99     	//如果等于1就 <
   743  00011D             	SensorMathBattCapacity_DEC_99:
   744  00011D   2D63(1)  		mov	a,#(99)
   745  00011E   2F20(1)  		b0mov	_batt_capacity_tmp,a
   746  00011F   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   747  000120             	SensorMathBattCapacity_DEC_90:
   748  000120             		comparison_16b	#(2040&0xff),#((2040>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_80,SensorMathBattCapacity_DEC_90_more
   749  000120   2DF8(1)     	mov  	a,#(2040&0xff)	//先减低字节
   750  000121   221A(1)     	sub    	a,_ad_buf_tmp+0	
   751  000122   2D07(1)     	mov  	a,#((2040>>8)&0xff)	//再减高字节
   752  000123   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   753  000124   7286(1+S)     	b0bts0 	FC         	//
   754  000125   812A(2)     	jmp    	SensorMathBattCapacity_DEC_80     	//如果等于0就 >=
   755  000126   8127(2)     	jmp    	SensorMathBattCapacity_DEC_90_more     	//如果等于1就 <
   756  000127             	SensorMathBattCapacity_DEC_90_more:
   757  000127   2D5A(1)  		mov	a,#(90)
   758  000128   2F20(1)  		b0mov	_batt_capacity_tmp,a
   759  000129   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   760  00012A             	SensorMathBattCapacity_DEC_80:
   761  00012A             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_70,SensorMathBattCapacity_DEC_80_more
   762  00012A   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   763  00012B   221A(1)     	sub    	a,_ad_buf_tmp+0	
   764  00012C   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   765  00012D   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   766  00012E   7286(1+S)     	b0bts0 	FC         	//
   767  00012F   8134(2)     	jmp    	SensorMathBattCapacity_DEC_70     	//如果等于0就 >=
   768  000130   8131(2)     	jmp    	SensorMathBattCapacity_DEC_80_more     	//如果等于1就 <
   769  000131             	SensorMathBattCapacity_DEC_80_more:
   770  000131   2D50(1)  		mov	a,#(80)
   771  000132   2F20(1)  		b0mov	_batt_capacity_tmp,a
   772  000133   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   773  000134             	SensorMathBattCapacity_DEC_70:
   774  000134             		comparison_16b	#(1940&0xff),#((1940>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_60,SensorMathBattCapacity_DEC_70_more
   775  000134   2D94(1)     	mov  	a,#(1940&0xff)	//先减低字节
   776  000135   221A(1)     	sub    	a,_ad_buf_tmp+0	
   777  000136   2D07(1)     	mov  	a,#((1940>>8)&0xff)	//再减高字节
   778  000137   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   779  000138   7286(1+S)     	b0bts0 	FC         	//
   780  000139   813E(2)     	jmp    	SensorMathBattCapacity_DEC_60     	//如果等于0就 >=
   781  00013A   813B(2)     	jmp    	SensorMathBattCapacity_DEC_70_more     	//如果等于1就 <
   782  00013B             	SensorMathBattCapacity_DEC_70_more:
   783  00013B   2D46(1)  		mov	a,#(70)
   784  00013C   2F20(1)  		b0mov	_batt_capacity_tmp,a
   785  00013D   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   786  00013E             	SensorMathBattCapacity_DEC_60:
   787  00013E             		comparison_16b	#(1890&0xff),#((1890>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_50,SensorMathBattCapacity_DEC_60_more
   788  00013E   2D62(1)     	mov  	a,#(1890&0xff)	//先减低字节
   789  00013F   221A(1)     	sub    	a,_ad_buf_tmp+0	
   790  000140   2D07(1)     	mov  	a,#((1890>>8)&0xff)	//再减高字节
   791  000141   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   792  000142   7286(1+S)     	b0bts0 	FC         	//
   793  000143   8148(2)     	jmp    	SensorMathBattCapacity_DEC_50     	//如果等于0就 >=
   794  000144   8145(2)     	jmp    	SensorMathBattCapacity_DEC_60_more     	//如果等于1就 <
   795  000145             	SensorMathBattCapacity_DEC_60_more:
   796  000145   2D3C(1)  		mov	a,#(60)
   797  000146   2F20(1)  		b0mov	_batt_capacity_tmp,a
   798  000147   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   799  000148             	SensorMathBattCapacity_DEC_50:
   800  000148             		comparison_16b	#(1840&0xff),#((1840>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_40,SensorMathBattCapacity_DEC_50_more
   801  000148   2D30(1)     	mov  	a,#(1840&0xff)	//先减低字节
   802  000149   221A(1)     	sub    	a,_ad_buf_tmp+0	
   803  00014A   2D07(1)     	mov  	a,#((1840>>8)&0xff)	//再减高字节
   804  00014B   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   805  00014C   7286(1+S)     	b0bts0 	FC         	//
   806  00014D   8152(2)     	jmp    	SensorMathBattCapacity_DEC_40     	//如果等于0就 >=
   807  00014E   814F(2)     	jmp    	SensorMathBattCapacity_DEC_50_more     	//如果等于1就 <
   808  00014F             	SensorMathBattCapacity_DEC_50_more:
   809  00014F   2D32(1)  		mov	a,#(50)
   810  000150   2F20(1)  		b0mov	_batt_capacity_tmp,a
   811  000151   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   812  000152             	SensorMathBattCapacity_DEC_40:
   813  000152             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_30,SensorMathBattCapacity_DEC_40_more
   814  000152   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   815  000153   221A(1)     	sub    	a,_ad_buf_tmp+0	
   816  000154   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   817  000155   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   818  000156   7286(1+S)     	b0bts0 	FC         	//
   819  000157   815C(2)     	jmp    	SensorMathBattCapacity_DEC_30     	//如果等于0就 >=
   820  000158   8159(2)     	jmp    	SensorMathBattCapacity_DEC_40_more     	//如果等于1就 <
   821  000159             	SensorMathBattCapacity_DEC_40_more:
   822  000159   2D28(1)  		mov	a,#(40)
   823  00015A   2F20(1)  		b0mov	_batt_capacity_tmp,a
   824  00015B   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   825  00015C             	SensorMathBattCapacity_DEC_30:
   826  00015C             		comparison_16b	#(1740&0xff),#((1740>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_20,SensorMathBattCapacity_DEC_30_more
   827  00015C   2DCC(1)     	mov  	a,#(1740&0xff)	//先减低字节
   828  00015D   221A(1)     	sub    	a,_ad_buf_tmp+0	
   829  00015E   2D06(1)     	mov  	a,#((1740>>8)&0xff)	//再减高字节
   830  00015F   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   831  000160   7286(1+S)     	b0bts0 	FC         	//
   832  000161   8166(2)     	jmp    	SensorMathBattCapacity_DEC_20     	//如果等于0就 >=
   833  000162   8163(2)     	jmp    	SensorMathBattCapacity_DEC_30_more     	//如果等于1就 <
   834  000163             	SensorMathBattCapacity_DEC_30_more:
   835  000163   2D1E(1)  		mov	a,#(30)
   836  000164   2F20(1)  		b0mov	_batt_capacity_tmp,a
   837  000165   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   838  000166             	SensorMathBattCapacity_DEC_20:
   839  000166             		comparison_16b	#(1690&0xff),#((1690>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_10,SensorMathBattCapacity_DEC_20_more
   840  000166   2D9A(1)     	mov  	a,#(1690&0xff)	//先减低字节
   841  000167   221A(1)     	sub    	a,_ad_buf_tmp+0	
   842  000168   2D06(1)     	mov  	a,#((1690>>8)&0xff)	//再减高字节
   843  000169   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   844  00016A   7286(1+S)     	b0bts0 	FC         	//
   845  00016B   8170(2)     	jmp    	SensorMathBattCapacity_DEC_10     	//如果等于0就 >=
   846  00016C   816D(2)     	jmp    	SensorMathBattCapacity_DEC_20_more     	//如果等于1就 <
   847  00016D             	SensorMathBattCapacity_DEC_20_more:
   848  00016D   2D14(1)  		mov	a,#(20)
   849  00016E   2F20(1)  		b0mov	_batt_capacity_tmp,a
   850  00016F   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   851  000170             	SensorMathBattCapacity_DEC_10:
   852  000170             		comparison_16b	#(1640&0xff),#((1640>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0,SensorMathBattCapacity_DEC_10_more
   853  000170   2D68(1)     	mov  	a,#(1640&0xff)	//先减低字节
   854  000171   221A(1)     	sub    	a,_ad_buf_tmp+0	
   855  000172   2D06(1)     	mov  	a,#((1640>>8)&0xff)	//再减高字节
   856  000173   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   857  000174   7286(1+S)     	b0bts0 	FC         	//
   858  000175   817A(2)     	jmp    	SensorMathBattCapacity_DEC_0     	//如果等于0就 >=
   859  000176   8177(2)     	jmp    	SensorMathBattCapacity_DEC_10_more     	//如果等于1就 <
   860  000177             	SensorMathBattCapacity_DEC_10_more:
   861  000177   2D0A(1)  		mov	a,#(10)
   862  000178   2F20(1)  		b0mov	_batt_capacity_tmp,a
   863  000179   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   864  00017A             	SensorMathBattCapacity_DEC_0:
   865  00017A             		comparison_16b	#(1590&0xff),#((1590>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0_less,SensorMathBattCapacity_DEC_0_more
   866  00017A   2D36(1)     	mov  	a,#(1590&0xff)	//先减低字节
   867  00017B   221A(1)     	sub    	a,_ad_buf_tmp+0	
   868  00017C   2D06(1)     	mov  	a,#((1590>>8)&0xff)	//再减高字节
   869  00017D   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   870  00017E   7286(1+S)     	b0bts0 	FC         	//
   871  00017F   8184(2)     	jmp    	SensorMathBattCapacity_DEC_0_less     	//如果等于0就 >=
   872  000180   8181(2)     	jmp    	SensorMathBattCapacity_DEC_0_more     	//如果等于1就 <
   873  000181             	SensorMathBattCapacity_DEC_0_more:
   874  000181   2D01(1)  		mov	a,#(1)
   875  000182   2F20(1)  		b0mov	_batt_capacity_tmp,a
   876  000183   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   877  000184             	SensorMathBattCapacity_DEC_0_less:
   878  000184   2D00(1)  		mov	a,#(0)
   879  000185   2F20(1)  		b0mov	_batt_capacity_tmp,a
   880  000186             	SensorMathBattCapacity_DEC_End:
   881  000186   2E20(1)  		b0mov	a,_batt_capacity_tmp
   882  000187   221F(1)  		sub	a,_cur_batt_capacity
   883  000188   7286(1+S)  		b0bts0	fc
   884  000189   818C(2)  		jmp	SensorMathBattCapacity_Exit
   885  00018A   2E20(1)  		b0mov	a,_batt_capacity_tmp
   886  00018B   2F1F(1)  		b0mov	_cur_batt_capacity,a	
   887  00018C             //====================================================================
   888  00018C             	SensorMathBattCapacity_Exit:		
   889  00018C   0E00(2)  		ret
   890  00018D             //==================================================================================================
   891  00018D             	SensorMathInputVolgate:
   892  00018D             		//V = 21 * AD / 2048
   893  00018D   2E1A(1)  		b0mov	a,_ad_buf_tmp+0
   894  00018E   2F05(1)  		b0mov	_d_math_input0+0,a
   895  00018F   2E1B(1)  		b0mov	a,_ad_buf_tmp+1
   896  000190   2F06(1)  		b0mov	_d_math_input0+1,a
   897  000191   2D15(1)  		mov	a,#(21)
   898  000192   2F08(1)  		b0mov	_d_math_input1+0,a
   899  000193   C052(2)  		call	__mul_u16_u8
   900  000194             		
   901  000194   2E0B(1)  		b0mov	a,_d_math_output0+0
   902  000195   2F05(1)  		b0mov	_d_math_input0+0,a
   903  000196   2E0C(1)  		b0mov	a,_d_math_output0+1
   904  000197   2F06(1)  		b0mov	_d_math_input0+1,a
   905  000198   2D08(1)  		mov	a,#((2048 >> 8) & 0xFF)
   906  000199   2F08(1)  		b0mov	_d_math_input1+0,a
   907  00019A   2D00(1)  		mov	a,#((2048) & 0xFF)
   908  00019B   2F09(1)  		b0mov	_d_math_input1+1,a
   909  00019C   C034(2)  		call	__div_u16_u16
   910  00019D             
   911  00019D   2E0B(1)  		b0mov	a,_d_math_output0+0
   912  00019E   2F1E(1)  		b0mov	_cur_input_volgate,a
   913  00019F   245A(1)  		sub	a,#(90)
   914  0001A0   7A86(1+S)  		b0bts1	fc
   915  0001A1   81A4(2)  		jmp	$+3
   916  0001A2   6C00(1)  		b0bset	_input_power_flag
   917  0001A3   81A5(2)  		jmp	$+2
   918  0001A4   6400(1)  		b0bclr	_input_power_flag
   919  0001A5   0E00(2)  		ret
   920  0001A6             //==================================================================================================
   921  0001A6             //
   922  0001A6             	SensorFuntion macro
   923  0001A6             		incms	_adc_ch_dly
   924  0001A6             		nop
   925  0001A6             		b0mov	a,_adc_ch_dly
   926  0001A6             		sub	a,#(10)
   927  0001A6             		b0bts1	fc
   928  0001A6             		jmp	SensorFuntion_END  		
   929  0001A6             		clr	_adc_ch_dly
   930  0001A6             	SensorFuntion_start_adc:
   931  0001A6             		b0mov	a,_adc_ch_index
   932  0001A6             		@JMP_A	3
   933  0001A6             		jmp	SensorFuntion_BATT   
   934  0001A6             		jmp	SensorFuntion_INPUT   
   935  0001A6             		jmp	SensorFuntion_OUTPUT
   936  0001A6             	SensorFuntion_BATT:
   937  0001A6             		SensorADConvert_CH 5
   938  0001A6                             call	SensorMathBattCapacity
   939  0001A6             		mov	a,#(1)
   940  0001A6             		b0mov	_adc_ch_index,a
   941  0001A6             		jmp	SensorFuntion_END
   942  0001A6             	SensorFuntion_INPUT:
   943  0001A6             		SensorADConvert_CH 3
   944  0001A6             		call	SensorMathInputVolgate
   945  0001A6             	
   946  0001A6             		mov	a,#(2)
   947  0001A6             		b0mov	_adc_ch_index,a
   948  0001A6             		jmp	SensorFuntion_END
   949  0001A6             	SensorFuntion_OUTPUT:
   950  0001A6             		b0bts1	P4.4
   951  0001A6             		jmp	$+3
   952  0001A6             		b0bset 	_is_output_en_flag
   953  0001A6             		jmp	$+2
   954  0001A6             		b0bclr	_is_output_en_flag
   955  0001A6             
   956  0001A6             		mov	a,#(0)
   957  0001A6             		b0mov	_adc_ch_index,a
   958  0001A6             	SensorFuntion_END:
   959  0001A6             		endm
   960  0001A6             //========================================================================================
   961  0001A6             	SensorFuntion_IDLE:
   962  0001A6             		//SensorADConvert_CH 3
   963  0001A6             		//call	SensorMathInputVolgate
   964  0001A6             		//mov	a,#(0)
   965  0001A6             		//b0mov	ADM,a
   966  0001A6             
   967  0001A6   7CD4(1+S)  		b0bts1	P4.4
   968  0001A7   81AA(2)  		jmp	$+3
   969  0001A8   6F00(1)  		b0bset 	_is_output_en_flag
   970  0001A9   81AB(2)  		jmp	$+2
   971  0001AA   6700(1)  		b0bclr	_is_output_en_flag
   972  0001AB             	SensorFuntion_IDLE_END:
   973  0001AB   0E00(2)  		ret
   974  0001AC             //========================================================================================
   975  0001AC             	SensorInit macro
   976  0001AC             		endm
   977  0001AC             //========================================================================================
   978  0001AC             //end files
   979  0001AC             
   980  0001AC             
   981  0001AC             
   982  0001AC             
   983  0001AC             	include key.h
   984  0001AC             /*
   985  0001AC             	按键检测与执行
   986  0001AC             	每50ms执行一次
   987  0001AC             	采用差值消抖,连续两次采样不一样认为是抖动
   988  0001AC             */
   989  0001AC             	LED_W_ON	macro
   990  0001AC             		b0bset	P5.3
   991  0001AC             		endm
   992  0001AC             	LED_W_OFF	macro
   993  0001AC             		b0bclr	P5.3
   994  0001AC             		endm
   995  0001AC             
   996  E 000200D0         	LED_R	equ	P0.2
   997  0001AC             	LED_R_ON	macro
   998  0001AC             		b0bset	P0.2
   999  0001AC             		endm
  1000  0001AC             	LED_R_OFF	macro
  1001  0001AC             		b0bclr	P0.2
  1002  0001AC             		endm
  1003  0001AC             
  1004  E 000300D0         	LED_B	equ	P0.3
  1005  0001AC             	LED_B_ON	macro
  1006  0001AC             		b0bset	P0.3
  1007  0001AC             		endm
  1008  0001AC             	LED_B_OFF	macro
  1009  0001AC             		b0bclr	P0.3
  1010  0001AC             		endm
  1011  0001AC             
  1012  0001AC             	//键值定义
  1013  E 00000010         	KEY_VALUE_NOKEY		equ	0x10
  1014  E 00000000         	KEY_VALUE_OK		equ	0x00
  1015  0001AC             
  1016  0001AC             	//按键状态定义
  1017  E 00000000         	KEY_STATUS_NOPRESS	equ	0
  1018  E 00000001         	KEY_STATUS_PRESS	equ	1
  1019  E 00000002         	KEY_STATUS_KEEP		equ	2
  1020  E 00000003         	KEY_STATUS_KEEPED	equ	3
  1021  E 00000004         	KEY_STATUS_UP		equ	4
  1022  0001AC             	
  1023  E 00000014         	KEY_STEP_TICK		equ	SYSTEM_TICK
  1024  E 00000006         	KEY_LINK_TICK		equ	(SYSTEM_TICK/3)
  1025  0001AC             
  1026  E 000400D0         	KEY_INPUT		equ	P0.4
  1027  0001AC             //=========================================================
  1028  0001AC             KeyPressFunction macro
  1029  0001AC             	KeyPressFunction_END:
  1030  0001AC             		endm
  1031  0001AC             
  1032  0001AC             KeyKeepFunction macro
  1033  0001AC             		b0mov	a,key_hold_tick
  1034  0001AC             		sub	a,#(SYSTEM_TICK*2)
  1035  0001AC             		b0bts0	fc
  1036  0001AC             		jmp	KeyKeepFunction_Long
  1037  0001AC             	KeyKeepFunction_Short:
  1038  0001AC             		jmp	KeyKeepFunction_END
  1039  0001AC             	KeyKeepFunction_Long:
  1040  0001AC             		b0bts0	_key_long_flag
  1041  0001AC             		jmp	KeyKeepFunction_END
  1042  0001AC             		b0bset	_key_long_flag
  1043  0001AC             		b0bts0	_led_on_off_flag
  1044  0001AC             		jmp	KeyKeepFunction_Long_1
  1045  0001AC             
  1046  0001AC             		b0bset	_led_on_off_flag
  1047  0001AC             		mov	a,#(5)
  1048  0001AC             		b0mov	_led_mode,a
  1049  0001AC             		jmp	KeyKeepFunction_END
  1050  0001AC             	KeyKeepFunction_Long_1:
  1051  0001AC             		b0bclr	_led_on_off_flag
  1052  0001AC             		LED_W_OFF
  1053  0001AC             		LED_R_OFF
  1054  0001AC             		LED_B_OFF
  1055  0001AC             	KeyKeepFunction_END:
  1056  0001AC             		endm
  1057  0001AC             
  1058  0001AC             KeyUpFunction	macro
  1059  0001AC             		//key_hold_tick < SYSTEM_TICK 为短按 否则为长按
  1060  0001AC             		b0mov	a,key_hold_tick
  1061  0001AC             		sub	a,#(SYSTEM_TICK)
  1062  0001AC             		b0bts0	fc
  1063  0001AC             		jmp	KeyUpFunction_long
  1064  0001AC             	KeyUpFunction_Short:
  1065  0001AC             		b0bts1	_led_on_off_flag
  1066  0001AC             		jmp	KeyUpFunction_END
  1067  0001AC             		
  1068  0001AC             		decms	_led_mode
  1069  0001AC             		jmp	KeyUpFunction_Short_MOD1
  1070  0001AC             		mov	a,#(5)
  1071  0001AC             		b0mov	_led_mode,a
  1072  0001AC             	KeyUpFunction_Short_MOD1:
  1073  0001AC             		mov	a,#(1)
  1074  0001AC             		b0mov	_led_dly,a
  1075  0001AC             
  1076  0001AC             		//_led_mode == 1(LedFunction_R_FLASH)
  1077  0001AC             		mov	a,#(1)       
  1078  0001AC             		cmprs	a,_led_mode  
  1079  0001AC             		jmp	KeyUpFunction_Short_MOD2
  1080  0001AC             
  1081  0001AC             		mov	a,#(10)
  1082  0001AC             		b0mov	_led_mode_sub,a
  1083  0001AC             		jmp	KeyUpFunction_END
  1084  0001AC             	KeyUpFunction_Short_MOD2:
  1085  0001AC             		//_led_mode == 2(LedFunction_RB)
  1086  0001AC             		mov	a,#(2)       
  1087  0001AC             		cmprs	a,_led_mode  
  1088  0001AC             		jmp	KeyUpFunction_END
  1089  0001AC             
  1090  0001AC             		mov	a,#(12)
  1091  0001AC             		b0mov	_led_mode_sub,a
  1092  0001AC             		jmp	KeyUpFunction_END
  1093  0001AC             	KeyUpFunction_Long:
  1094  0001AC             	KeyUpFunction_END:
  1095  0001AC             		endm
  1096  0001AC             //==========================================================
  1097  0001AC             	KeyFuntion macro
  1098  0001AC             		b0mov	a,P0
  1099  0001AC             		and	a,#(0x10)
  1100  0001AC             		cmprs	a,key_value_old  	//key_value_old == A ?
  1101  0001AC             		jmp	$+2
  1102  0001AC             		jmp	$+3
  1103  0001AC             		b0mov	key_value_old,a		//key_value_old = A
  1104  0001AC             		jmp	KeyFuntion_END
  1105  0001AC             		
  1106  0001AC             		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == A ?
  1107  0001AC             		jmp	KeyScan_Press
  1108  0001AC             		jmp	KeyScan_Up
  1109  0001AC             	KeyScan_Press:
  1110  0001AC             		b0mov	a,key_value_old
  1111  0001AC             		cmprs	a,key_value_cur		//key_value_cur != key_value_old ?
  1112  0001AC             		jmp	$+2
  1113  0001AC             		jmp	KeyScan_Keep_dly
  1114  0001AC             		b0mov	key_value_cur,a		//key_value_cur = key_value_old
  1115  0001AC             		mov	a,#(KEY_STATUS_PRESS)
  1116  0001AC             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_PRESS
  1117  0001AC             		clr	key_hold_tick		//key_hold_tick = 0
  1118  0001AC             		mov	a,#(KEY_STEP_TICK)	
  1119  0001AC             		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_STEP_TICK
  1120  0001AC             		 	KeyPressFunction
  1121  0001AC             		jmp	KeyFuntion_END
  1122  0001AC             	KeyScan_Keep_dly:
  1123  0001AC             		//if(++key_hold_time == 0)
  1124  0001AC             		//{
  1125  0001AC             		//	--key_hold_time;
  1126  0001AC             		//}
  1127  0001AC             		incms	key_hold_tick
  1128  0001AC             		jmp	$+3
  1129  0001AC             		decms	key_hold_tick
  1130  0001AC             		nop
  1131  0001AC             		
  1132  0001AC             		//if(--key_repeat_tick != 0)
  1133  0001AC             		//{
  1134  0001AC             		//	return;
  1135  0001AC             		//}
  1136  0001AC             		decms	key_repeat_tick
  1137  0001AC             		jmp	KeyFuntion_END
  1138  0001AC             	KeyScan_Keep:
  1139  0001AC             		mov	a,#(KEY_LINK_TICK)
  1140  0001AC             		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_LINK_TICK
  1141  0001AC             		b0mov	a,key_state_cur
  1142  0001AC             		cmprs	a,#(KEY_STATUS_PRESS)	//key_state_cur == KEY_STATUS_PRESS ?
  1143  0001AC             		jmp	KeyScan_Keeped
  1144  0001AC             		mov	a,#(KEY_STATUS_KEEP)
  1145  0001AC             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_KEEP
  1146  0001AC             	KeyScan_Keeped:
  1147  0001AC             		 	KeyKeepFunction
  1148  0001AC             		jmp	KeyFuntion_END
  1149  0001AC             	KeyScan_Up:
  1150  0001AC             		b0mov	a,key_value_cur
  1151  0001AC             		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == key_value_cur ?
  1152  0001AC             		jmp	$+2
  1153  0001AC             		jmp	KeyFuntion_END
  1154  0001AC             		mov	a,#(KEY_STATUS_UP)
  1155  0001AC             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_UP
  1156  0001AC             		 	KeyUpFunction
  1157  0001AC             		mov	a,#(KEY_VALUE_NOKEY)
  1158  0001AC             		b0mov	key_value_cur,a
  1159  0001AC             		mov	a,#(KEY_STATUS_NOPRESS)
  1160  0001AC             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_NOPRESS
  1161  0001AC             		clr	key_repeat_tick
  1162  0001AC             		clr	key_hold_tick
  1163  0001AC             		b0bclr	_key_long_flag
  1164  0001AC             	KeyFuntion_END:
  1165  0001AC             		endm
  1166  0001AC             //==========================================================
  1167  0001AC             	LedFunction macro
  1168  0001AC             		b0bts1	_led_on_off_flag
  1169  0001AC             		jmp	LedFunction_Exit
  1170  0001AC             
  1171  0001AC             		b0mov	a,_led_mode
  1172  0001AC             		sub	a,#(1)
  1173  0001AC             		@JMP_A	5
  1174  0001AC             		jmp	LedFunction_R_FLASH
  1175  0001AC             		jmp	LedFunction_RB 
  1176  0001AC             		jmp	LedFunction_R
  1177  0001AC             		jmp	LedFunction_B
  1178  0001AC             		jmp	LedFunction_W
  1179  0001AC             	LedFunction_R_FLASH:
  1180  0001AC             		LED_W_OFF
  1181  0001AC             		LED_B_OFF
  1182  0001AC             		//if(--_led_dly != 0)
  1183  0001AC             		//{
  1184  0001AC             		//	jmp	LedFunction_Exit
  1185  0001AC             		//}
  1186  0001AC             		decms	_led_dly
  1187  0001AC             		jmp	LedFunction_Exit
  1188  0001AC             		LED_R_OFF
  1189  0001AC             
  1190  0001AC             		b0mov	a,_led_mode_sub
  1191  0001AC             		sub	a,#(1)
  1192  0001AC             		@JMP_A	10
  1193  0001AC             		jmp	LedFunction_R_FLASH_OFF_S_2
  1194  0001AC             		jmp	LedFunction_R_FLASH_ON_S_2
  1195  0001AC             		jmp	LedFunction_R_FLASH_OFF_S_1
  1196  0001AC             		jmp	LedFunction_R_FLASH_ON_S_1
  1197  0001AC             		jmp	LedFunction_R_FLASH_OFF_L_3
  1198  0001AC             		jmp	LedFunction_R_FLASH_ON_L_3
  1199  0001AC             		jmp	LedFunction_R_FLASH_OFF_L_2
  1200  0001AC             		jmp	LedFunction_R_FLASH_ON_L_2
  1201  0001AC             		jmp	LedFunction_R_FLASH_OFF_L_1
  1202  0001AC             		jmp	LedFunction_R_FLASH_ON_L_1
  1203  0001AC             	  LedFunction_R_FLASH_ON_L_1:
  1204  0001AC             	  LedFunction_R_FLASH_ON_L_2:
  1205  0001AC             	  LedFunction_R_FLASH_ON_L_3:
  1206  0001AC             		LED_R_ON
  1207  0001AC             		mov	a,#(10)
  1208  0001AC             		jmp	LedFunction_R_FLASH_END
  1209  0001AC             	  LedFunction_R_FLASH_OFF_L_1:
  1210  0001AC             	  LedFunction_R_FLASH_OFF_L_2:
  1211  0001AC             	  LedFunction_R_FLASH_OFF_L_3:
  1212  0001AC             		mov	a,#(10)
  1213  0001AC             		jmp	LedFunction_R_FLASH_END
  1214  0001AC             	  LedFunction_R_FLASH_ON_S_1:
  1215  0001AC             	  LedFunction_R_FLASH_ON_S_2:
  1216  0001AC             		LED_R_ON
  1217  0001AC             		mov	a,#(3)
  1218  0001AC             		jmp	LedFunction_R_FLASH_END
  1219  0001AC             	  LedFunction_R_FLASH_OFF_S_1:
  1220  0001AC             		mov	a,#(3)
  1221  0001AC             		jmp	LedFunction_R_FLASH_END
  1222  0001AC             	  LedFunction_R_FLASH_OFF_S_2:
  1223  0001AC             		mov	a,#(10)
  1224  0001AC             		//jmp	LedFunction_R_FLASH_END
  1225  0001AC                       LedFunction_R_FLASH_END:
  1226  0001AC             		b0mov	_led_dly,a
  1227  0001AC             
  1228  0001AC             		//if(--_led_mode_sub == 0)
  1229  0001AC             		//{
  1230  0001AC             		//	_led_mode_sub = 10;
  1231  0001AC             		//}
  1232  0001AC             		decms	_led_mode_sub
  1233  0001AC             		jmp	LedFunction_Exit
  1234  0001AC             		mov	a,#(10)
  1235  0001AC             		b0mov	_led_mode_sub,a
  1236  0001AC             		jmp	LedFunction_Exit
  1237  0001AC             	LedFunction_RB:
  1238  0001AC             		LED_W_OFF
  1239  0001AC             		//if(--_led_dly != 0)
  1240  0001AC             		//{
  1241  0001AC             		//	jmp	LedFunction_Exit
  1242  0001AC             		//}
  1243  0001AC             		decms	_led_dly
  1244  0001AC             		jmp	LedFunction_Exit
  1245  0001AC             		LED_R_OFF
  1246  0001AC             		LED_B_OFF
  1247  0001AC             
  1248  0001AC             		b0mov	a,_led_mode_sub
  1249  0001AC             		sub	a,#(1)
  1250  0001AC             		@JMP_A	12
  1251  0001AC             		jmp	LedFunction_RB_B_OFF3
  1252  0001AC             		jmp	LedFunction_RB_B_ON3
  1253  0001AC             		jmp	LedFunction_RB_B_OFF2
  1254  0001AC             		jmp	LedFunction_RB_B_ON2
  1255  0001AC             		jmp	LedFunction_RB_B_OFF1
  1256  0001AC             		jmp	LedFunction_RB_B_ON1
  1257  0001AC             		jmp	LedFunction_RB_R_OFF3
  1258  0001AC             		jmp	LedFunction_RB_R_ON3
  1259  0001AC             		jmp	LedFunction_RB_R_OFF2
  1260  0001AC             		jmp	LedFunction_RB_R_ON2
  1261  0001AC             		jmp	LedFunction_RB_R_OFF1
  1262  0001AC             		jmp	LedFunction_RB_R_ON1
  1263  0001AC             	  LedFunction_RB_R_ON1:
  1264  0001AC             	  LedFunction_RB_R_ON2:
  1265  0001AC             	  LedFunction_RB_R_ON3:
  1266  0001AC             		LED_R_ON
  1267  0001AC             		mov	a,#(3)
  1268  0001AC             		jmp	LedFunction_RB_END
  1269  0001AC             	  LedFunction_RB_R_OFF1:
  1270  0001AC             	  LedFunction_RB_R_OFF2:
  1271  0001AC             		mov	a,#(3)
  1272  0001AC             		jmp	LedFunction_RB_END
  1273  0001AC             	  LedFunction_RB_R_OFF3:
  1274  0001AC             		mov	a,#(10)
  1275  0001AC             		jmp	LedFunction_RB_END
  1276  0001AC             	  LedFunction_RB_B_ON1:
  1277  0001AC                       LedFunction_RB_B_ON2:
  1278  0001AC                       LedFunction_RB_B_ON3:
  1279  0001AC             		LED_B_ON
  1280  0001AC             		mov	a,#(3)
  1281  0001AC             		jmp	LedFunction_RB_END
  1282  0001AC             	  LedFunction_RB_B_OFF1:
  1283  0001AC             	  LedFunction_RB_B_OFF2:
  1284  0001AC             		mov	a,#(3)
  1285  0001AC             		jmp	LedFunction_RB_END
  1286  0001AC             	  LedFunction_RB_B_OFF3:
  1287  0001AC             		mov	a,#(10)
  1288  0001AC             		jmp	LedFunction_RB_END
  1289  0001AC             	  LedFunction_RB_END:
  1290  0001AC             		b0mov	_led_dly,a
  1291  0001AC             
  1292  0001AC             		//if(--_led_mode_sub == 0)
  1293  0001AC             		//{
  1294  0001AC             		//	_led_mode_sub = 12;
  1295  0001AC             		//}
  1296  0001AC             		decms	_led_mode_sub
  1297  0001AC             		jmp	LedFunction_Exit
  1298  0001AC             		mov	a,#(12)
  1299  0001AC             		b0mov	_led_mode_sub,a
  1300  0001AC             
  1301  0001AC             		jmp	LedFunction_Exit
  1302  0001AC             	LedFunction_R:
  1303  0001AC             		LED_W_OFF
  1304  0001AC             		LED_R_ON
  1305  0001AC             		LED_B_OFF
  1306  0001AC             		jmp	LedFunction_Exit
  1307  0001AC             	LedFunction_B:
  1308  0001AC             		LED_W_OFF
  1309  0001AC             		LED_R_OFF
  1310  0001AC             		LED_B_ON
  1311  0001AC             		jmp	LedFunction_Exit
  1312  0001AC             	LedFunction_W:
  1313  0001AC             		LED_W_ON
  1314  0001AC             		LED_R_OFF
  1315  0001AC             		LED_B_OFF
  1316  0001AC             		jmp	LedFunction_Exit
  1317  0001AC             	LedFunction_Exit:
  1318  0001AC             		endm
  1319  0001AC             //==========================================================
  1320  0001AC             	KeyInit macro
  1321  0001AC             		mov	a,#(KEY_VALUE_NOKEY)
  1322  0001AC             		b0mov	key_value_tmp,a
  1323  0001AC             		b0mov	key_value_old,a
  1324  0001AC             		b0mov	key_value_cur,a
  1325  0001AC             		endm
  1326  0001AC             //==========================================================
  1327  0001AC             	include display.h
  1328  0001AC             /*
  1329  0001AC             	数码管扫描和显示相关代码
  1330  0001AC             	上电全显2S
  1331  0001AC             	温度数据显示每秒刷新一次
  1332  0001AC             	温度过高显示 "Hi"
  1333  0001AC             	温度过低显示 "Lo"
  1334  0001AC             */
  1335  0001AC             //==========================================================
  1336  0001AC             //宏定义
  1337  0001AC             	COM_ALL_LOW	macro
  1338  0001AC             		mov	a,#(~(BIT0 | BIT1))
  1339  0001AC             		and	P0,a
  1340  0001AC             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1341  0001AC             		and	P4,a
  1342  0001AC             		mov	a,#(~(BIT4))
  1343  0001AC             		and	P5,a
  1344  0001AC             		endm
  1345  0001AC             		
  1346  0001AC             	COM_ALL_INPUT	macro
  1347  0001AC             		mov	a,#(~(BIT0 | BIT1))
  1348  0001AC             		and	P0M,a
  1349  0001AC             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1350  0001AC             		and	P4M,a
  1351  0001AC             		mov	a,#(~(BIT4))
  1352  0001AC             		and	P5M,a
  1353  0001AC             		endm
  1354  0001AC             
  1355  0001AC             	COM6_OUT_PP	macro
  1356  0001AC             		b0bset	P0M.1
  1357  0001AC             		endm
  1358  0001AC             	COM6_LOW  	macro	
  1359  0001AC             		b0bclr	P0.1
  1360  0001AC             		endm
  1361  0001AC             	COM6_HIGH  	macro	
  1362  0001AC             		b0bset	P0.1
  1363  0001AC             		endm
  1364  0001AC             
  1365  0001AC             	COM5_OUT_PP	macro
  1366  0001AC             		b0bset	P5M.4
  1367  0001AC             		endm
  1368  0001AC             	COM5_LOW  	macro	
  1369  0001AC             		b0bclr	P5.4
  1370  0001AC             		endm
  1371  0001AC             	COM5_HIGH  	macro	
  1372  0001AC             		b0bset	P5.4
  1373  0001AC             		endm
  1374  0001AC             
  1375  0001AC             	COM4_OUT_PP	macro
  1376  0001AC             		b0bset	P4M.1
  1377  0001AC             		endm
  1378  0001AC             	COM4_LOW  	macro	
  1379  0001AC             		b0bclr	P4.1
  1380  0001AC             		endm
  1381  0001AC             	COM4_HIGH  	macro	
  1382  0001AC             		b0bset	P4.1
  1383  0001AC             		endm
  1384  0001AC             
  1385  0001AC             	COM3_OUT_PP	macro
  1386  0001AC             		b0bset	P4M.0
  1387  0001AC             		endm
  1388  0001AC             	COM3_LOW  	macro	
  1389  0001AC             		b0bclr	P4.0
  1390  0001AC             		endm
  1391  0001AC             	COM3_HIGH  	macro	
  1392  0001AC             		b0bset	P4.0
  1393  0001AC             		endm
  1394  0001AC             
  1395  0001AC             	COM2_OUT_PP	macro
  1396  0001AC             		b0bset	P0M.0
  1397  0001AC             		endm
  1398  0001AC             	COM2_LOW  	macro	
  1399  0001AC             		b0bclr	P0.0
  1400  0001AC             		endm
  1401  0001AC             	COM2_HIGH  	macro	
  1402  0001AC             		b0bset	P0.0
  1403  0001AC             		endm
  1404  0001AC             
  1405  0001AC             	COM1_OUT_PP	macro
  1406  0001AC             		b0bset	P4M.2
  1407  0001AC             		endm
  1408  0001AC             	COM1_LOW  	macro	
  1409  0001AC             		b0bclr	P4.2
  1410  0001AC             		endm
  1411  0001AC             	COM1_HIGH  	macro	
  1412  0001AC             		b0bset	P4.2
  1413  0001AC             		endm
  1414  0001AC             //==========================================================
  1415  0001AC             //函数
  1416  0001AC             
  1417  0001AC             //==========================================================
  1418  0001AC             //此函数在2.5ms中断中调用
  1419  0001AC             	LedScan_ISR macro
  1420  0001AC             		COM_ALL_LOW
  1421  0001AC             		nop
  1422  0001AC             		COM_ALL_INPUT
  1423  0001AC             		
  1424  0001AC             		//if(--_led_scan_index == 0)
  1425  0001AC             		//{
  1426  0001AC             		//	_led_scan_index = 6;
  1427  0001AC             		//}
  1428  0001AC             		decms	_led_scan_index
  1429  0001AC             		jmp	$ + 3
  1430  0001AC             		mov	a,#(6)
  1431  0001AC             		b0mov	_led_scan_index,a
  1432  0001AC             		
  1433  0001AC             		mov	a,_led_scan_index
  1434  0001AC             		sub	a,#(1)
  1435  0001AC             		@JMP_A	6
  1436  0001AC             		jmp	LedScan_ISR_COM1
  1437  0001AC             		jmp	LedScan_ISR_COM2
  1438  0001AC             		jmp	LedScan_ISR_COM3
  1439  0001AC             		jmp	LedScan_ISR_COM4
  1440  0001AC             		jmp	LedScan_ISR_COM5
  1441  0001AC             		jmp	LedScan_ISR_COM6
  1442  0001AC             	LedScan_ISR_COM1:
  1443  0001AC             		b0bts1 _disp_map+0.7
  1444  0001AC             		jmp	$+3
  1445  0001AC             		COM4_HIGH
  1446  0001AC             		COM4_OUT_PP
  1447  0001AC             		
  1448  0001AC             		b0bts1 _disp_map+1.7
  1449  0001AC             		jmp	$+3
  1450  0001AC             		COM5_HIGH
  1451  0001AC             		COM5_OUT_PP
  1452  0001AC             		
  1453  0001AC             		b0bts1 _disp_map+2.7
  1454  0001AC             		jmp	$+3
  1455  0001AC             		COM6_HIGH
  1456  0001AC             		COM6_OUT_PP
  1457  0001AC             
  1458  0001AC             		COM3_LOW
  1459  0001AC             		COM3_OUT_PP
  1460  0001AC             		jmp	LedScan_ISR_END
  1461  0001AC             	LedScan_ISR_COM2:
  1462  0001AC             		b0bts1 _disp_map+0.0
  1463  0001AC             		jmp	$+3
  1464  0001AC             		COM2_HIGH
  1465  0001AC             		COM2_OUT_PP
  1466  0001AC             	
  1467  0001AC             		b0bts1 _disp_map+0.1
  1468  0001AC             		jmp	$+3
  1469  0001AC             		COM3_HIGH
  1470  0001AC             		COM3_OUT_PP
  1471  0001AC             	
  1472  0001AC             		b0bts1 _disp_map+0.2
  1473  0001AC             		jmp	$+3
  1474  0001AC             		COM4_HIGH
  1475  0001AC             		COM4_OUT_PP
  1476  0001AC             	
  1477  0001AC             		b0bts1 _disp_map+0.3
  1478  0001AC             		jmp	$+3
  1479  0001AC             		COM5_HIGH
  1480  0001AC             		COM5_OUT_PP
  1481  0001AC             	
  1482  0001AC             		b0bts1 _disp_map+0.4
  1483  0001AC             		jmp	$+3
  1484  0001AC             		COM6_HIGH
  1485  0001AC             		COM6_OUT_PP
  1486  0001AC             		
  1487  0001AC             		COM1_LOW
  1488  0001AC             		COM1_OUT_PP
  1489  0001AC             		jmp	LedScan_ISR_END
  1490  0001AC             	LedScan_ISR_COM3:
  1491  0001AC             		b0bts1 _disp_map+1.0
  1492  0001AC             		jmp	$+3
  1493  0001AC             		COM2_LOW
  1494  0001AC             		COM2_OUT_PP
  1495  0001AC             	
  1496  0001AC             		b0bts1 _disp_map+1.1
  1497  0001AC             		jmp	$+3
  1498  0001AC             		COM3_LOW
  1499  0001AC             		COM3_OUT_PP
  1500  0001AC             	
  1501  0001AC             		b0bts1 _disp_map+1.2
  1502  0001AC             		jmp	$+3
  1503  0001AC             		COM4_LOW
  1504  0001AC             		COM4_OUT_PP
  1505  0001AC             	
  1506  0001AC             		b0bts1 _disp_map+1.3
  1507  0001AC             		jmp	$+3
  1508  0001AC             		COM5_LOW
  1509  0001AC             		COM5_OUT_PP
  1510  0001AC             	
  1511  0001AC             		b0bts1 _disp_map+1.4
  1512  0001AC             		jmp	$+3
  1513  0001AC             		COM6_LOW
  1514  0001AC             		COM6_OUT_PP
  1515  0001AC             		
  1516  0001AC             		COM1_HIGH
  1517  0001AC             		COM1_OUT_PP
  1518  0001AC             		jmp	LedScan_ISR_END
  1519  0001AC             	LedScan_ISR_COM4:
  1520  0001AC             		b0bts1 _disp_map+0.5
  1521  0001AC             		jmp	$+3
  1522  0001AC             		COM3_HIGH
  1523  0001AC             		COM3_OUT_PP
  1524  0001AC             
  1525  0001AC             		b0bts1 _disp_map+0.6
  1526  0001AC             		jmp	$+3
  1527  0001AC             		COM4_HIGH
  1528  0001AC             		COM4_OUT_PP
  1529  0001AC             
  1530  0001AC             		b0bts1 _disp_map+1.5
  1531  0001AC             		jmp	$+3
  1532  0001AC             		COM5_HIGH
  1533  0001AC             		COM5_OUT_PP
  1534  0001AC             
  1535  0001AC             		b0bts1 _disp_map+1.6
  1536  0001AC             		jmp	$+3
  1537  0001AC             		COM6_HIGH
  1538  0001AC             		COM6_OUT_PP
  1539  0001AC             		
  1540  0001AC             		COM2_LOW
  1541  0001AC             		COM2_OUT_PP
  1542  0001AC             		jmp	LedScan_ISR_END
  1543  0001AC             	LedScan_ISR_COM5:
  1544  0001AC             		b0bts1 _disp_map+2.0
  1545  0001AC             		jmp	$+3
  1546  0001AC             		COM3_LOW
  1547  0001AC             		COM3_OUT_PP
  1548  0001AC             
  1549  0001AC             		b0bts1 _disp_map+2.1
  1550  0001AC             		jmp	$+3
  1551  0001AC             		COM4_LOW
  1552  0001AC             		COM4_OUT_PP
  1553  0001AC             
  1554  0001AC             		b0bts1 _disp_map+2.2
  1555  0001AC             		jmp	$+3
  1556  0001AC             		COM5_LOW
  1557  0001AC             		COM5_OUT_PP
  1558  0001AC             
  1559  0001AC             		b0bts1 _disp_map+2.3
  1560  0001AC             		jmp	$+3
  1561  0001AC             		COM6_LOW
  1562  0001AC             		COM6_OUT_PP
  1563  0001AC             
  1564  0001AC             		COM2_HIGH
  1565  0001AC             		COM2_OUT_PP
  1566  0001AC             		jmp	LedScan_ISR_END
  1567  0001AC             	LedScan_ISR_COM6:
  1568  0001AC             		b0bts1 _disp_map+2.4
  1569  0001AC             		jmp	$+3
  1570  0001AC             		COM4_LOW
  1571  0001AC             		COM4_OUT_PP
  1572  0001AC             
  1573  0001AC             		b0bts1 _disp_map+2.5
  1574  0001AC             		jmp	$+3
  1575  0001AC             		COM5_LOW
  1576  0001AC             		COM5_OUT_PP
  1577  0001AC             
  1578  0001AC             		b0bts1 _disp_map+2.6
  1579  0001AC             		jmp	$+3
  1580  0001AC             		COM6_LOW
  1581  0001AC             		COM6_OUT_PP
  1582  0001AC             
  1583  0001AC             		COM3_HIGH
  1584  0001AC             		COM3_OUT_PP
  1585  0001AC             	LedScan_ISR_END:
  1586  0001AC             		endm
  1587  0001AC             
  1588  0001AC             //==================================================================================================
  1589  0001AC             
  1590  0001AC             //==================================================================================================
  1591  0001AC             
  1592  0001AC             //==================================================================================================
  1593  0001AC             
  1594  0001AC             //==================================================================================================	
  1595  0001AC             //在main中每50ms调用一次
  1596  0001AC             DisplayFuntion	macro
  1597  0001AC             		decms	_disp_swap_dly
  1598  0001AC             		jmp	DisplayFuntion_start_0
  1599  0001AC             		mov	a,#(SYSTEM_TICK * 3)
  1600  0001AC             		b0mov	_disp_swap_dly,a
  1601  0001AC             		
  1602  0001AC             		b0bts1  _input_power_flag
  1603  0001AC             		jmp	$+3
  1604  0001AC             		b0bts1	_disp_voltage_flag
  1605  0001AC             		jmp	$+3
  1606  0001AC             		b0bclr  _disp_voltage_flag
  1607  0001AC             		jmp	$+2
  1608  0001AC             		b0bset	_disp_voltage_flag
  1609  0001AC             
  1610  0001AC             	DisplayFuntion_start_0:	
  1611  0001AC             		b0bts0	_lcd_init_flag
  1612  0001AC             		jmp	DisplayFuntion_start
  1613  0001AC             		//if(_disp_update_dly) 
  1614  0001AC             		//{
  1615  0001AC             		//	--_disp_update_dly;
  1616  0001AC             		//	return;
  1617  0001AC             		//}
  1618  0001AC             		mov	a,#(0)
  1619  0001AC             		cmprs	a,_disp_update_dly
  1620  0001AC             		jmp	$ + 2
  1621  0001AC             		jmp	$ + 3
  1622  0001AC             		decms	_disp_update_dly
  1623  0001AC             		jmp	DisplayFuntion_END
  1624  0001AC             
  1625  0001AC             		b0bset	_lcd_init_flag
  1626  0001AC             		mov	a,#(20)
  1627  0001AC             		b0mov	_disp_update_dly,a
  1628  0001AC             
  1629  0001AC             	DisplayFuntion_start:	
  1630  0001AC             		mov	a,#(0x00)
  1631  0001AC             		b0mov	_disp_map + 0, a
  1632  0001AC             		b0mov	_disp_map + 1, a
  1633  0001AC             		b0mov	_disp_map + 2, a
  1634  0001AC             
  1635  0001AC             		b0bts0	_disp_voltage_flag
  1636  0001AC             		jmp	$+3
  1637  0001AC             		mov	a,_cur_batt_capacity
  1638  0001AC             		jmp	$+2
  1639  0001AC             		mov	a,_cur_input_volgate
  1640  0001AC             
  1641  0001AC             	DisplayFuntion_bai_wei:
  1642  0001AC             		b0mov	_d_math_input0+0,a
  1643  0001AC             		mov	a,#(100)
  1644  0001AC             		b0mov	_d_math_input1+0,a
  1645  0001AC             		call	__div_u8_u8	
  1646  0001AC             		
  1647  0001AC             		b0mov	Y,#led_num_tab$M
  1648  0001AC             		b0mov	Z,#led_num_tab$L
  1649  0001AC             		b0mov	A,_d_math_output0+0	//百位
  1650  0001AC             		add	Z,A
  1651  0001AC             		movc
  1652  0001AC             		b0mov	_disp_map+0,a
  1653  0001AC             	DisplayFuntion_shi_wei:
  1654  0001AC             		b0mov	a,_d_math_output1+0
  1655  0001AC             		b0mov	_d_math_input0+0,a
  1656  0001AC             		mov	a,#(10)
  1657  0001AC             		b0mov	_d_math_input1+0,a
  1658  0001AC             		call	__div_u8_u8
  1659  0001AC             
  1660  0001AC             		b0mov	Y,#led_num_tab$M
  1661  0001AC             		b0mov	Z,#led_num_tab$L
  1662  0001AC             		b0mov	A,_d_math_output0+0	//十位
  1663  0001AC             		add	Z,A
  1664  0001AC             		movc
  1665  0001AC             		b0mov	_disp_map+1,a
  1666  0001AC             	DisplayFuntion_ge_wei:
  1667  0001AC             		b0mov	Z,#led_num_tab$L
  1668  0001AC             		b0mov	A,_d_math_output1+0	//个位
  1669  0001AC             		add	Z,A
  1670  0001AC             		movc
  1671  0001AC             		b0mov	_disp_map+2,a
  1672  0001AC             
  1673  0001AC             		b0bts1	_disp_voltage_flag
  1674  0001AC             		jmp	DisplayFuntion_END
  1675  0001AC             
  1676  0001AC             		mov	a,#(LCD_DP)
  1677  0001AC             		or	_disp_map+2,a
  1678  0001AC             	DisplayFuntion_END:
  1679  0001AC             		endm
  1680  0001AC             //==================================================================================================
  1681  0001AC             	DisplayInit macro
  1682  0001AC             		mov	a,#(2)
  1683  0001AC             		mov	_led_scan_index,a
  1684  0001AC             		mov	_disp_swap_dly,a
  1685  0001AC             
  1686  0001AC             		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1687  0001AC             		b0mov	_disp_update_dly,a
  1688  0001AC             		mov	a,#(0xFF)
  1689  0001AC             		b0mov	_disp_map + 0, a
  1690  0001AC             		b0mov	_disp_map + 1, a
  1691  0001AC             		b0mov	_disp_map + 2, a
  1692  0001AC             
  1693  0001AC             		mov	a,#(123)
  1694  0001AC             		b0mov	_cur_input_volgate,a
  1695  0001AC             		mov	a,#(99)
  1696  0001AC             		b0mov	_cur_batt_capacity,a
  1697  0001AC             		endm
  1698  0001AC             //==================================================================================================
  1699  0001AC             /*	_disp_map[3]
  1700  0001AC             	b00->A2  b10->A3  b20->A4
  1701  0001AC             	b01->B2  b11->B3  b21->B4
  1702  0001AC             	b02->C2  b12->C3  b22->C4
  1703  0001AC             	b03->D2  b13->D3  b23->D4
  1704  0001AC             	b04->E2  b14->E3  b24->E4
  1705  0001AC             	b05->F2  b15->F3  b25->F4
  1706  0001AC             	b06->G2  b16->G3  b26->G4
  1707  0001AC             	b07->B1  b17->C1  b27->DP
  1708  0001AC             */
  1709  0001AC             //==================================================================================================
  1710  E 00000001         	LCD_A	equ	0x01
  1711  E 00000002         	LCD_B	equ     0x02
  1712  E 00000004         	LCD_C	equ     0x04
  1713  E 00000008         	LCD_D	equ     0x08
  1714  E 00000010         	LCD_E	equ     0x10
  1715  E 00000020         	LCD_F	equ     0x20
  1716  E 00000040         	LCD_G	equ     0x40
  1717  E 00000080         	LCD_H	equ    	0x80
  1718  E 00000080         	LCD_DP	equ    	0x80
  1719  0001AC             	led_num_tab:
  1720  0001AC   003F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F		/* 0 */
  1721  0001AD   0006(1)  		dw	LCD_B | LCD_C                                          	/* 1 */
  1722  0001AE   005B(1)  		dw	LCD_A | LCD_B | LCD_D | LCD_E | LCD_G                  	/* 2 */
  1723  0001AF   004F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_G                  	/* 3 */
  1724  0001B0   0066(1)  		dw	LCD_B | LCD_C | LCD_F | LCD_G                         	/* 4 */
  1725  0001B1   006D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_F | LCD_G                  	/* 5 */
  1726  0001B2   007D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G          	/* 6 */
  1727  0001B3   0027(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_F                          	/* 7 */
  1728  0001B4   007F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G  	/* 8 */
  1729  0001B5   006F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_F | LCD_G          	/* 9 */
  1730  0001B6             		//dw	LCD_A | LCD_B | LCD_C | LCD_E | LCD_F | LCD_G          	/* a */
  1731  0001B6             		//dw	LCD_C | LCD_D | LCD_E | LCD_F | LCD_G                  	/* b */
  1732  0001B6             		//dw	LCD_A | LCD_D | LCD_E | LCD_F                          	/* c */
  1733  0001B6             		//dw	LCD_B | LCD_C | LCD_D | LCD_E | LCD_G                  	/* d */
  1734  0001B6             		//dw	LCD_A | LCD_D | LCD_E | LCD_F | LCD_G                  	/* e */
  1735  0001B6             		//dw	LCD_A | LCD_E | LCD_F | LCD_G              		/* f */
  1736  0001B6             //==================================================================================================
  1737  0001B6             //==========================================================
  1738  0001B6             //end files
  1739  0001B6             
  1740  0001B6             
  1741  0001B6             //==============================================================================
  1742  0001B6             ;-------------------------------------------------------------------------------
  1743  0001B6             ; ClrRAM
  1744  0001B6             ; Use index @YZ to clear RAM 
  1745  0001B6             ;-------------------------------------------------------------------------------
  1746  0001B6             __ClrRAM macro
  1747  0001B6             	CLR 		Y
  1748  0001B6             	B0MOV		Z,#0x3f
  1749  0001B6             ClrRAM10:
  1750  0001B6             	CLR 		@YZ
  1751  0001B6             	DECMS		Z
  1752  0001B6             	JMP 		ClrRAM10
  1753  0001B6             	CLR 		@YZ
  1754  0001B6             	endm
  1755  0001B6             
  1756  0001B6             reset:
  1757  0001B6             //_IO_Setting:
  1758  0001B6   2D0F(1)   	MOV A, #(0x0F)
  1759  0001B7   2FB8(1)    	B0MOV P0M, A	//P0 Input-Output value
  1760  0001B8   2D00(1)    	MOV A, #(0x00)
  1761  0001B9   2FE0(1)    	B0MOV P0UR, A	//P0 pull up value
  1762  0001BA   1E00(1)    	MOV A, 0x00
  1763  0001BB   2FD0(1)    	B0MOV P0, A	//P0 register value
  1764  0001BC             
  1765  0001BC   2D07(1)    	MOV A, #(0x07)
  1766  0001BD   2FC4(1)    	B0MOV P4M, A		//P4 Input-Output value
  1767  0001BE   2D00(1)    	MOV A, #(0x00)
  1768  0001BF   2FE4(1)    	B0MOV P4UR, A		//P4 pull up value
  1769  0001C0   2D08(1)    	MOV A, #(0x08)
  1770  0001C1   2FAE(1)    	B0MOV P4CON, A		//P4 Analog-Digital value
  1771  0001C2   1E00(1)    	MOV A, 0x00
  1772  0001C3   2FD4(1)    	B0MOV P4, A		//P4 register value
  1773  0001C4             
  1774  0001C4   2D18(1)    	MOV A, #(0x18)
  1775  0001C5   2FC5(1)    	B0MOV P5M, A		//P5 Input-Output value
  1776  0001C6   2D00(1)    	MOV A, #(0x00)
  1777  0001C7   2FE5(1)    	B0MOV P5UR, A		//P5 pull up value
  1778  0001C8   1E00(1)    	MOV A, 0x00
  1779  0001C9   2FD5(1)    	B0MOV P5, A	        //P5 register value
  1780  0001CA             //_Timer_Setting:
  1781  0001CA   2D24(1)  	MOV A, #0x24
  1782  0001CB   2FDA(1)  	B0MOV TC0M, A	//TC0M register value, Fcpu: 4.000000MHZ
  1783  0001CC   62D8(1)  	B0BCLR FTC0X8 //CLK source: Fcpu
  1784  0001CD   2D64(1)  	MOV A, #(0x64)
  1785  0001CE   2FDB(1)  	B0MOV TC0C, A	//TC0C register value, time: 2.500000ms(400.000000HZ)
  1786  0001CF   2D64(1)  	MOV A, #(0x64)
  1787  0001D0   2FCD(1)  	B0MOV TC0R, A	//TC0R register value
  1788  0001D1   65C8(1)  	B0BCLR FTC0IRQ
  1789  0001D2   6DC9(1)  	B0BSET FTC0IEN	//TC0 Interrupt enable
  1790  0001D3   63DA(1)  	B0BCLR FTC0CKS
  1791  0001D4   6FDA(1)  	B0BSET FTC0ENB	//TC0 enable
  1792  0001D5   69D8(1)  	B0BSET FTC0GN
  1793  0001D6             	
  1794  0001D6             	__ClrRAM
  1795  0001D6   2B84(1)  	CLR 		Y
  1796  0001D7   333F(1)  	B0MOV		Z,#0x3f
  1797  0001D8   2BE7(1)  	CLR 		@YZ
  1798  0001D9   2683(1+S)  	DECMS		Z
  1799  0001DA   81D8(2)  	JMP 		ClrRAM10
  1800  0001DB   2BE7(1)  	CLR 		@YZ
  1801  0001DC             	SensorInit
  1802  0001DC             	KeyInit
  1803  0001DC   2D10(1)  		mov	a,#(KEY_VALUE_NOKEY)
  1804  0001DD   2F23(1)  		b0mov	key_value_tmp,a
  1805  0001DE   2F24(1)  		b0mov	key_value_old,a
  1806  0001DF   2F25(1)  		b0mov	key_value_cur,a
  1807  0001E0             	DisplayInit
  1808  0001E0   2D02(1)  		mov	a,#(2)
  1809  0001E1   1F18(1)  		mov	_led_scan_index,a
  1810  0001E2   1F13(1)  		mov	_disp_swap_dly,a
  1811  0001E3   2D28(1)  		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1812  0001E4   2F14(1)  		b0mov	_disp_update_dly,a
  1813  0001E5   2DFF(1)  		mov	a,#(0xFF)
  1814  0001E6   2F15(1)  		b0mov	_disp_map + 0, a
  1815  0001E7   2F16(1)  		b0mov	_disp_map + 1, a
  1816  0001E8   2F17(1)  		b0mov	_disp_map + 2, a
  1817  0001E9   2D7B(1)  		mov	a,#(123)
  1818  0001EA   2F1E(1)  		b0mov	_cur_input_volgate,a
  1819  0001EB   2D63(1)  		mov	a,#(99)
  1820  0001EC   2F1F(1)  		b0mov	_cur_batt_capacity,a
  1821  0001ED             
  1822  0001ED   6FDF(1)    	B0BSET FGIE
  1823  0001EE   6000(1)  	b0bclr	system_idle_flag
  1824  0001EF   2D64(1)  	mov	a,#(SYSTEM_TICK * 5)
  1825  0001F0   2F04(1)  	b0mov	_enter_idle_dly,a
  1826  0001F1             public _main
  1827  0001F1             _main:
  1828  0001F1   2D5A(1)  	MOV 	A, #(0x5A)
  1829  0001F2   2FCC(1)    	B0MOV 	WDTR, A
  1830  0001F3             	
  1831  0001F3   7000(1+S)  	b0bts0  system_idle_flag
  1832  0001F4   8326(2)  	jmp	_main_system_idle_function
  1833  0001F5             //====================================================================
  1834  0001F5             //NORMAL
  1835  0001F5   7900(1+S)    	b0bts1	system_tick_flag
  1836  0001F6   81F1(2)  	jmp	_main
  1837  0001F7   6100(1)  	b0bclr	system_tick_flag
  1838  0001F8             //================================================
  1839  0001F8             		SensorFuntion
  1840  0001F8   1622(1+S)  		incms	_adc_ch_dly
  1841  0001F9   0000(1)  		nop
  1842  0001FA   2E22(1)  		b0mov	a,_adc_ch_dly
  1843  0001FB   240A(1)  		sub	a,#(10)
  1844  0001FC   7A86(1+S)  		b0bts1	fc
  1845  0001FD   8219(2)  		jmp	SensorFuntion_END  		
  1846  0001FE   2B22(1)  		clr	_adc_ch_dly
  1847  0001FF   2E19(1)  		b0mov	a,_adc_ch_index
  1848  000200   03CE(1)  	b0add PCl ,a
  1849  000201   8204(2)  		jmp	SensorFuntion_BATT   
  1850  000202   820B(2)  		jmp	SensorFuntion_INPUT   
  1851  000203   8212(2)  		jmp	SensorFuntion_OUTPUT
  1852  000204   2D95(1)  		mov	a,#(5 | BIT4 | BIT7)
  1853  000205   2FB1(1)  		b0mov	ADM,a
  1854  000206   C06B(2)  		call	SensorADConvert
  1855  000207   C089(2)                  call	SensorMathBattCapacity
  1856  000208   2D01(1)  		mov	a,#(1)
  1857  000209   2F19(1)  		b0mov	_adc_ch_index,a
  1858  00020A   8219(2)  		jmp	SensorFuntion_END
  1859  00020B   2D93(1)  		mov	a,#(3 | BIT4 | BIT7)
  1860  00020C   2FB1(1)  		b0mov	ADM,a
  1861  00020D   C06B(2)  		call	SensorADConvert
  1862  00020E   C18D(2)  		call	SensorMathInputVolgate
  1863  00020F   2D02(1)  		mov	a,#(2)
  1864  000210   2F19(1)  		b0mov	_adc_ch_index,a
  1865  000211   8219(2)  		jmp	SensorFuntion_END
  1866  000212   7CD4(1+S)  		b0bts1	P4.4
  1867  000213   8216(2)  		jmp	$+3
  1868  000214   6F00(1)  		b0bset 	_is_output_en_flag
  1869  000215   8217(2)  		jmp	$+2
  1870  000216   6700(1)  		b0bclr	_is_output_en_flag
  1871  000217   2D00(1)  		mov	a,#(0)
  1872  000218   2F19(1)  		b0mov	_adc_ch_index,a
  1873  000219             	 	KeyFuntion
  1874  000219   2ED0(1)  		b0mov	a,P0
  1875  00021A   2A10(1)  		and	a,#(0x10)
  1876  00021B   0724(1+S)  		cmprs	a,key_value_old  	//key_value_old == A ?
  1877  00021C   821E(2)  		jmp	$+2
  1878  00021D   8220(2)  		jmp	$+3
  1879  00021E   2F24(1)  		b0mov	key_value_old,a		//key_value_old = A
  1880  00021F   8273(2)  		jmp	KeyFuntion_END
  1881  000220   0610(1+S)  		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == A ?
  1882  000221   8223(2)  		jmp	KeyScan_Press
  1883  000222   824E(2)  		jmp	KeyScan_Up
  1884  000223   2E24(1)  		b0mov	a,key_value_old
  1885  000224   0725(1+S)  		cmprs	a,key_value_cur		//key_value_cur != key_value_old ?
  1886  000225   8227(2)  		jmp	$+2
  1887  000226   822E(2)  		jmp	KeyScan_Keep_dly
  1888  000227   2F25(1)  		b0mov	key_value_cur,a		//key_value_cur = key_value_old
  1889  000228   2D01(1)  		mov	a,#(KEY_STATUS_PRESS)
  1890  000229   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_PRESS
  1891  00022A   2B26(1)  		clr	key_hold_tick		//key_hold_tick = 0
  1892  00022B   2D14(1)  		mov	a,#(KEY_STEP_TICK)	
  1893  00022C   2F28(1)  		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_STEP_TICK
  1894  00022D   8273(2)  		jmp	KeyFuntion_END
  1895  00022E   1626(1+S)  		incms	key_hold_tick
  1896  00022F   8232(2)  		jmp	$+3
  1897  000230   2626(1+S)  		decms	key_hold_tick
  1898  000231   0000(1)  		nop
  1899  000232   2628(1+S)  		decms	key_repeat_tick
  1900  000233   8273(2)  		jmp	KeyFuntion_END
  1901  000234   2D06(1)  		mov	a,#(KEY_LINK_TICK)
  1902  000235   2F28(1)  		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_LINK_TICK
  1903  000236   2E27(1)  		b0mov	a,key_state_cur
  1904  000237   0601(1+S)  		cmprs	a,#(KEY_STATUS_PRESS)	//key_state_cur == KEY_STATUS_PRESS ?
  1905  000238   823B(2)  		jmp	KeyScan_Keeped
  1906  000239   2D02(1)  		mov	a,#(KEY_STATUS_KEEP)
  1907  00023A   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_KEEP
  1908  00023B   2E26(1)  		b0mov	a,key_hold_tick
  1909  00023C   2428(1)  		sub	a,#(SYSTEM_TICK*2)
  1910  00023D   7286(1+S)  		b0bts0	fc
  1911  00023E   8240(2)  		jmp	KeyKeepFunction_Long
  1912  00023F   824D(2)  		jmp	KeyKeepFunction_END
  1913  000240   7001(1+S)  		b0bts0	_key_long_flag
  1914  000241   824D(2)  		jmp	KeyKeepFunction_END
  1915  000242   6801(1)  		b0bset	_key_long_flag
  1916  000243   7500(1+S)  		b0bts0	_led_on_off_flag
  1917  000244   8249(2)  		jmp	KeyKeepFunction_Long_1
  1918  000245   6D00(1)  		b0bset	_led_on_off_flag
  1919  000246   2D05(1)  		mov	a,#(5)
  1920  000247   2F29(1)  		b0mov	_led_mode,a
  1921  000248   824D(2)  		jmp	KeyKeepFunction_END
  1922  000249   6500(1)  		b0bclr	_led_on_off_flag
  1923  00024A   63D5(1)  		b0bclr	P5.3
  1924  00024B   62D0(1)  		b0bclr	P0.2
  1925  00024C   63D0(1)  		b0bclr	P0.3
  1926  00024D   8273(2)  		jmp	KeyFuntion_END
  1927  00024E   2E25(1)  		b0mov	a,key_value_cur
  1928  00024F   0610(1+S)  		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == key_value_cur ?
  1929  000250   8252(2)  		jmp	$+2
  1930  000251   8273(2)  		jmp	KeyFuntion_END
  1931  000252   2D04(1)  		mov	a,#(KEY_STATUS_UP)
  1932  000253   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_UP
  1933  000254   2E26(1)  		b0mov	a,key_hold_tick
  1934  000255   2414(1)  		sub	a,#(SYSTEM_TICK)
  1935  000256   7286(1+S)  		b0bts0	fc
  1936  000257   826C(2)  		jmp	KeyUpFunction_long
  1937  000258   7D00(1+S)  		b0bts1	_led_on_off_flag
  1938  000259   826C(2)  		jmp	KeyUpFunction_END
  1939  00025A   2629(1+S)  		decms	_led_mode
  1940  00025B   825E(2)  		jmp	KeyUpFunction_Short_MOD1
  1941  00025C   2D05(1)  		mov	a,#(5)
  1942  00025D   2F29(1)  		b0mov	_led_mode,a
  1943  00025E   2D01(1)  		mov	a,#(1)
  1944  00025F   2F2B(1)  		b0mov	_led_dly,a
  1945  000260   2D01(1)  		mov	a,#(1)       
  1946  000261   0729(1+S)  		cmprs	a,_led_mode  
  1947  000262   8266(2)  		jmp	KeyUpFunction_Short_MOD2
  1948  000263   2D0A(1)  		mov	a,#(10)
  1949  000264   2F2A(1)  		b0mov	_led_mode_sub,a
  1950  000265   826C(2)  		jmp	KeyUpFunction_END
  1951  000266   2D02(1)  		mov	a,#(2)       
  1952  000267   0729(1+S)  		cmprs	a,_led_mode  
  1953  000268   826C(2)  		jmp	KeyUpFunction_END
  1954  000269   2D0C(1)  		mov	a,#(12)
  1955  00026A   2F2A(1)  		b0mov	_led_mode_sub,a
  1956  00026B   826C(2)  		jmp	KeyUpFunction_END
  1957  00026C   2D10(1)  		mov	a,#(KEY_VALUE_NOKEY)
  1958  00026D   2F25(1)  		b0mov	key_value_cur,a
  1959  00026E   2D00(1)  		mov	a,#(KEY_STATUS_NOPRESS)
  1960  00026F   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_NOPRESS
  1961  000270   2B28(1)  		clr	key_repeat_tick
  1962  000271   2B26(1)  		clr	key_hold_tick
  1963  000272   6001(1)  		b0bclr	_key_long_flag
  1964  000273             		LedFunction
  1965  000273   7D00(1+S)  		b0bts1	_led_on_off_flag
  1966  000274   82D4(2)  		jmp	LedFunction_Exit
  1967  000275   2E29(1)  		b0mov	a,_led_mode
  1968  000276   2401(1)  		sub	a,#(1)
  1969  000277   03CE(1)  	b0add PCl ,a
  1970  000278   827D(2)  		jmp	LedFunction_R_FLASH
  1971  000279   82A0(2)  		jmp	LedFunction_RB 
  1972  00027A   82C8(2)  		jmp	LedFunction_R
  1973  00027B   82CC(2)  		jmp	LedFunction_B
  1974  00027C   82D0(2)  		jmp	LedFunction_W
  1975  00027D   63D5(1)  		b0bclr	P5.3
  1976  00027E   63D0(1)  		b0bclr	P0.3
  1977  00027F   262B(1+S)  		decms	_led_dly
  1978  000280   82D4(2)  		jmp	LedFunction_Exit
  1979  000281   62D0(1)  		b0bclr	P0.2
  1980  000282   2E2A(1)  		b0mov	a,_led_mode_sub
  1981  000283   2401(1)  		sub	a,#(1)
  1982  000284   03CE(1)  	b0add PCl ,a
  1983  000285   8299(2)  		jmp	LedFunction_R_FLASH_OFF_S_2
  1984  000286   8294(2)  		jmp	LedFunction_R_FLASH_ON_S_2
  1985  000287   8297(2)  		jmp	LedFunction_R_FLASH_OFF_S_1
  1986  000288   8294(2)  		jmp	LedFunction_R_FLASH_ON_S_1
  1987  000289   8292(2)  		jmp	LedFunction_R_FLASH_OFF_L_3
  1988  00028A   828F(2)  		jmp	LedFunction_R_FLASH_ON_L_3
  1989  00028B   8292(2)  		jmp	LedFunction_R_FLASH_OFF_L_2
  1990  00028C   828F(2)  		jmp	LedFunction_R_FLASH_ON_L_2
  1991  00028D   8292(2)  		jmp	LedFunction_R_FLASH_OFF_L_1
  1992  00028E   828F(2)  		jmp	LedFunction_R_FLASH_ON_L_1
  1993  00028F   6AD0(1)  		b0bset	P0.2
  1994  000290   2D0A(1)  		mov	a,#(10)
  1995  000291   829A(2)  		jmp	LedFunction_R_FLASH_END
  1996  000292   2D0A(1)  		mov	a,#(10)
  1997  000293   829A(2)  		jmp	LedFunction_R_FLASH_END
  1998  000294   6AD0(1)  		b0bset	P0.2
  1999  000295   2D03(1)  		mov	a,#(3)
  2000  000296   829A(2)  		jmp	LedFunction_R_FLASH_END
  2001  000297   2D03(1)  		mov	a,#(3)
  2002  000298   829A(2)  		jmp	LedFunction_R_FLASH_END
  2003  000299   2D0A(1)  		mov	a,#(10)
  2004  00029A   2F2B(1)  		b0mov	_led_dly,a
  2005  00029B   262A(1+S)  		decms	_led_mode_sub
  2006  00029C   82D4(2)  		jmp	LedFunction_Exit
  2007  00029D   2D0A(1)  		mov	a,#(10)
  2008  00029E   2F2A(1)  		b0mov	_led_mode_sub,a
  2009  00029F   82D4(2)  		jmp	LedFunction_Exit
  2010  0002A0   63D5(1)  		b0bclr	P5.3
  2011  0002A1   262B(1+S)  		decms	_led_dly
  2012  0002A2   82D4(2)  		jmp	LedFunction_Exit
  2013  0002A3   62D0(1)  		b0bclr	P0.2
  2014  0002A4   63D0(1)  		b0bclr	P0.3
  2015  0002A5   2E2A(1)  		b0mov	a,_led_mode_sub
  2016  0002A6   2401(1)  		sub	a,#(1)
  2017  0002A7   03CE(1)  	b0add PCl ,a
  2018  0002A8   82C0(2)  		jmp	LedFunction_RB_B_OFF3
  2019  0002A9   82BB(2)  		jmp	LedFunction_RB_B_ON3
  2020  0002AA   82BE(2)  		jmp	LedFunction_RB_B_OFF2
  2021  0002AB   82BB(2)  		jmp	LedFunction_RB_B_ON2
  2022  0002AC   82BE(2)  		jmp	LedFunction_RB_B_OFF1
  2023  0002AD   82BB(2)  		jmp	LedFunction_RB_B_ON1
  2024  0002AE   82B9(2)  		jmp	LedFunction_RB_R_OFF3
  2025  0002AF   82B4(2)  		jmp	LedFunction_RB_R_ON3
  2026  0002B0   82B7(2)  		jmp	LedFunction_RB_R_OFF2
  2027  0002B1   82B4(2)  		jmp	LedFunction_RB_R_ON2
  2028  0002B2   82B7(2)  		jmp	LedFunction_RB_R_OFF1
  2029  0002B3   82B4(2)  		jmp	LedFunction_RB_R_ON1
  2030  0002B4   6AD0(1)  		b0bset	P0.2
  2031  0002B5   2D03(1)  		mov	a,#(3)
  2032  0002B6   82C2(2)  		jmp	LedFunction_RB_END
  2033  0002B7   2D03(1)  		mov	a,#(3)
  2034  0002B8   82C2(2)  		jmp	LedFunction_RB_END
  2035  0002B9   2D0A(1)  		mov	a,#(10)
  2036  0002BA   82C2(2)  		jmp	LedFunction_RB_END
  2037  0002BB   6BD0(1)  		b0bset	P0.3
  2038  0002BC   2D03(1)  		mov	a,#(3)
  2039  0002BD   82C2(2)  		jmp	LedFunction_RB_END
  2040  0002BE   2D03(1)  		mov	a,#(3)
  2041  0002BF   82C2(2)  		jmp	LedFunction_RB_END
  2042  0002C0   2D0A(1)  		mov	a,#(10)
  2043  0002C1   82C2(2)  		jmp	LedFunction_RB_END
  2044  0002C2   2F2B(1)  		b0mov	_led_dly,a
  2045  0002C3   262A(1+S)  		decms	_led_mode_sub
  2046  0002C4   82D4(2)  		jmp	LedFunction_Exit
  2047  0002C5   2D0C(1)  		mov	a,#(12)
  2048  0002C6   2F2A(1)  		b0mov	_led_mode_sub,a
  2049  0002C7   82D4(2)  		jmp	LedFunction_Exit
  2050  0002C8   63D5(1)  		b0bclr	P5.3
  2051  0002C9   6AD0(1)  		b0bset	P0.2
  2052  0002CA   63D0(1)  		b0bclr	P0.3
  2053  0002CB   82D4(2)  		jmp	LedFunction_Exit
  2054  0002CC   63D5(1)  		b0bclr	P5.3
  2055  0002CD   62D0(1)  		b0bclr	P0.2
  2056  0002CE   6BD0(1)  		b0bset	P0.3
  2057  0002CF   82D4(2)  		jmp	LedFunction_Exit
  2058  0002D0   6BD5(1)  		b0bset	P5.3
  2059  0002D1   62D0(1)  		b0bclr	P0.2
  2060  0002D2   63D0(1)  		b0bclr	P0.3
  2061  0002D3   82D4(2)  		jmp	LedFunction_Exit
  2062  0002D4             		DisplayFuntion
  2063  0002D4   2613(1+S)  		decms	_disp_swap_dly
  2064  0002D5   82DF(2)  		jmp	DisplayFuntion_start_0
  2065  0002D6   2D3C(1)  		mov	a,#(SYSTEM_TICK * 3)
  2066  0002D7   2F13(1)  		b0mov	_disp_swap_dly,a
  2067  0002D8   7C00(1+S)  		b0bts1  _input_power_flag
  2068  0002D9   82DC(2)  		jmp	$+3
  2069  0002DA   7B00(1+S)  		b0bts1	_disp_voltage_flag
  2070  0002DB   82DE(2)  		jmp	$+3
  2071  0002DC   6300(1)  		b0bclr  _disp_voltage_flag
  2072  0002DD   82DF(2)  		jmp	$+2
  2073  0002DE   6B00(1)  		b0bset	_disp_voltage_flag
  2074  0002DF   7600(1+S)  		b0bts0	_lcd_init_flag
  2075  0002E0   82EA(2)  		jmp	DisplayFuntion_start
  2076  0002E1   2D00(1)  		mov	a,#(0)
  2077  0002E2   0714(1+S)  		cmprs	a,_disp_update_dly
  2078  0002E3   82E5(2)  		jmp	$ + 2
  2079  0002E4   82E7(2)  		jmp	$ + 3
  2080  0002E5   2614(1+S)  		decms	_disp_update_dly
  2081  0002E6   8311(2)  		jmp	DisplayFuntion_END
  2082  0002E7   6E00(1)  		b0bset	_lcd_init_flag
  2083  0002E8   2D14(1)  		mov	a,#(20)
  2084  0002E9   2F14(1)  		b0mov	_disp_update_dly,a
  2085  0002EA   2D00(1)  		mov	a,#(0x00)
  2086  0002EB   2F15(1)  		b0mov	_disp_map + 0, a
  2087  0002EC   2F16(1)  		b0mov	_disp_map + 1, a
  2088  0002ED   2F17(1)  		b0mov	_disp_map + 2, a
  2089  0002EE   7300(1+S)  		b0bts0	_disp_voltage_flag
  2090  0002EF   82F2(2)  		jmp	$+3
  2091  0002F0   1E1F(1)  		mov	a,_cur_batt_capacity
  2092  0002F1   82F3(2)  		jmp	$+2
  2093  0002F2   1E1E(1)  		mov	a,_cur_input_volgate
  2094  0002F3   2F05(1)  		b0mov	_d_math_input0+0,a
  2095  0002F4   2D64(1)  		mov	a,#(100)
  2096  0002F5   2F08(1)  		b0mov	_d_math_input1+0,a
  2097  0002F6   C020(2)  		call	__div_u8_u8	
  2098  0002F7   3401(1)  		b0mov	Y,#led_num_tab$M
  2099  0002F8   33AC(1)  		b0mov	Z,#led_num_tab$L
  2100  0002F9   2E0B(1)  		b0mov	A,_d_math_output0+0	//百位
  2101  0002FA   1383(1)  		add	Z,A
  2102  0002FB   0D00(2)  		movc
  2103  0002FC   2F15(1)  		b0mov	_disp_map+0,a
  2104  0002FD   2E0E(1)  		b0mov	a,_d_math_output1+0
  2105  0002FE   2F05(1)  		b0mov	_d_math_input0+0,a
  2106  0002FF   2D0A(1)  		mov	a,#(10)
  2107  000300   2F08(1)  		b0mov	_d_math_input1+0,a
  2108  000301   C020(2)  		call	__div_u8_u8
  2109  000302   3401(1)  		b0mov	Y,#led_num_tab$M
  2110  000303   33AC(1)  		b0mov	Z,#led_num_tab$L
  2111  000304   2E0B(1)  		b0mov	A,_d_math_output0+0	//十位
  2112  000305   1383(1)  		add	Z,A
  2113  000306   0D00(2)  		movc
  2114  000307   2F16(1)  		b0mov	_disp_map+1,a
  2115  000308   33AC(1)  		b0mov	Z,#led_num_tab$L
  2116  000309   2E0E(1)  		b0mov	A,_d_math_output1+0	//个位
  2117  00030A   1383(1)  		add	Z,A
  2118  00030B   0D00(2)  		movc
  2119  00030C   2F17(1)  		b0mov	_disp_map+2,a
  2120  00030D   7B00(1+S)  		b0bts1	_disp_voltage_flag
  2121  00030E   8311(2)  		jmp	DisplayFuntion_END
  2122  00030F   2D80(1)  		mov	a,#(LCD_DP)
  2123  000310   1917(1)  		or	_disp_map+2,a
  2124  000311             		//GreenMode
  2125  000311             //================================================
  2126  000311   7400(1+S)  		b0bts0	_input_power_flag
  2127  000312   81F1(2)  		jmp	_main
  2128  000313   7500(1+S)  		b0bts0	_led_on_off_flag
  2129  000314   81F1(2)  		jmp	_main
  2130  000315   7700(1+S)  		b0bts0	_is_output_en_flag
  2131  000316   81F1(2)  		jmp	_main
  2132  000317             
  2133  000317   2604(1+S)  		decms	_enter_idle_dly
  2134  000318   81F1(2)  		jmp	_main
  2135  000319             		
  2136  000319             _main_system_normal_function_enter_idle:
  2137  000319   67DA(1)  		b0bclr	FTC0ENB			//stop timer
  2138  00031A             		COM_ALL_LOW			//turnoff disp
  2139  00031A   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2140  00031B   29D0(1)  		and	P0,a
  2141  00031C   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2142  00031D   29D4(1)  		and	P4,a
  2143  00031E   2DEF(1)  		mov	a,#(~(BIT4))
  2144  00031F   29D5(1)  		and	P5,a
  2145  000320             
  2146  000320   2D00(1)  		mov	a,#(0)
  2147  000321   2FB1(1)  		b0mov	ADM,a
  2148  000322             
  2149  000322   6800(1)  		b0bset	system_idle_flag
  2150  000323             		SlowMode
  2151  000323   6ACA(1)  		B0BSET	FCLKMD
  2152  000324   69CA(1)  		B0BSET	FSTPHX
  2153  000325   81F1(2)  		jmp	_main
  2154  000326             //====================================================================
  2155  000326             //IDLE
  2156  000326             _main_system_idle_function:
  2157  000326   C1A6(2)          	call	SensorFuntion_IDLE
  2158  000327             
  2159  000327   7CD0(1+S)  		b0bts1	KEY_INPUT
  2160  000328   8330(2)  		jmp	_main_system_idle_function_exit_idle_key
  2161  000329   7400(1+S)  		b0bts0	_input_power_flag
  2162  00032A   8332(2)  		jmp	_main_system_idle_function_exit_idle
  2163  00032B   7500(1+S)  		b0bts0	_led_on_off_flag
  2164  00032C   8332(2)  		jmp	_main_system_idle_function_exit_idle
  2165  00032D   7700(1+S)  		b0bts0	_is_output_en_flag
  2166  00032E   8332(2)  		jmp	_main_system_idle_function_exit_idle
  2167  00032F   81F1(2)  		jmp	_main
  2168  000330             _main_system_idle_function_exit_idle_key:
  2169  000330   2D64(1)  		mov	a,#(SYSTEM_TICK * 5)
  2170  000331   2F04(1)  		b0mov	_enter_idle_dly,a
  2171  000332             _main_system_idle_function_exit_idle:
  2172  000332             		Slow2Normal
  2173  000332   61CA(1)  		B0BCLR	FSTPHX
  2174  000333   0000(1)  		NOP
  2175  000334   0000(1)  		NOP
  2176  000335   0000(1)  		NOP
  2177  000336   62CA(1)  		B0BCLR	FCLKMD
  2178  000337   6000(1)  		b0bclr	system_idle_flag
  2179  000338   6FDA(1)  		b0bset 	FTC0ENB			//start timer
  2180  000339   81F1(2)    	JMP _main
  2181  00033A             
  2182  00033A             isr:
  2183  00033A   0400(1)  	push
  2184  00033B   7DC8(1+S)  	b0bts1	FTC0IRQ
  2185  00033C   83D1(2)          jmp	isr_exit
  2186  00033D   65C8(1)  	b0bclr  FTC0IRQ
  2187  00033E             	
  2188  00033E             	LedScan_ISR
  2189  00033E   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2190  00033F   29D0(1)  		and	P0,a
  2191  000340   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2192  000341   29D4(1)  		and	P4,a
  2193  000342   2DEF(1)  		mov	a,#(~(BIT4))
  2194  000343   29D5(1)  		and	P5,a
  2195  000344   0000(1)  		nop
  2196  000345   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2197  000346   29B8(1)  		and	P0M,a
  2198  000347   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2199  000348   29C4(1)  		and	P4M,a
  2200  000349   2DEF(1)  		mov	a,#(~(BIT4))
  2201  00034A   29C5(1)  		and	P5M,a
  2202  00034B   2618(1+S)  		decms	_led_scan_index
  2203  00034C   834F(2)  		jmp	$ + 3
  2204  00034D   2D06(1)  		mov	a,#(6)
  2205  00034E   2F18(1)  		b0mov	_led_scan_index,a
  2206  00034F   1E18(1)  		mov	a,_led_scan_index
  2207  000350   2401(1)  		sub	a,#(1)
  2208  000351   03CE(1)  	b0add PCl ,a
  2209  000352   8358(2)  		jmp	LedScan_ISR_COM1
  2210  000353   8367(2)  		jmp	LedScan_ISR_COM2
  2211  000354   837E(2)  		jmp	LedScan_ISR_COM3
  2212  000355   8395(2)  		jmp	LedScan_ISR_COM4
  2213  000356   83A8(2)  		jmp	LedScan_ISR_COM5
  2214  000357   83BB(2)  		jmp	LedScan_ISR_COM6
  2215  000358   7F15(1+S)  		b0bts1 _disp_map+0.7
  2216  000359   835C(2)  		jmp	$+3
  2217  00035A   69D4(1)  		b0bset	P4.1
  2218  00035B   69C4(1)  		b0bset	P4M.1
  2219  00035C   7F16(1+S)  		b0bts1 _disp_map+1.7
  2220  00035D   8360(2)  		jmp	$+3
  2221  00035E   6CD5(1)  		b0bset	P5.4
  2222  00035F   6CC5(1)  		b0bset	P5M.4
  2223  000360   7F17(1+S)  		b0bts1 _disp_map+2.7
  2224  000361   8364(2)  		jmp	$+3
  2225  000362   69D0(1)  		b0bset	P0.1
  2226  000363   69B8(1)  		b0bset	P0M.1
  2227  000364   60D4(1)  		b0bclr	P4.0
  2228  000365   68C4(1)  		b0bset	P4M.0
  2229  000366   83C9(2)  		jmp	LedScan_ISR_END
  2230  000367   7815(1+S)  		b0bts1 _disp_map+0.0
  2231  000368   836B(2)  		jmp	$+3
  2232  000369   68D0(1)  		b0bset	P0.0
  2233  00036A   68B8(1)  		b0bset	P0M.0
  2234  00036B   7915(1+S)  		b0bts1 _disp_map+0.1
  2235  00036C   836F(2)  		jmp	$+3
  2236  00036D   68D4(1)  		b0bset	P4.0
  2237  00036E   68C4(1)  		b0bset	P4M.0
  2238  00036F   7A15(1+S)  		b0bts1 _disp_map+0.2
  2239  000370   8373(2)  		jmp	$+3
  2240  000371   69D4(1)  		b0bset	P4.1
  2241  000372   69C4(1)  		b0bset	P4M.1
  2242  000373   7B15(1+S)  		b0bts1 _disp_map+0.3
  2243  000374   8377(2)  		jmp	$+3
  2244  000375   6CD5(1)  		b0bset	P5.4
  2245  000376   6CC5(1)  		b0bset	P5M.4
  2246  000377   7C15(1+S)  		b0bts1 _disp_map+0.4
  2247  000378   837B(2)  		jmp	$+3
  2248  000379   69D0(1)  		b0bset	P0.1
  2249  00037A   69B8(1)  		b0bset	P0M.1
  2250  00037B   62D4(1)  		b0bclr	P4.2
  2251  00037C   6AC4(1)  		b0bset	P4M.2
  2252  00037D   83C9(2)  		jmp	LedScan_ISR_END
  2253  00037E   7816(1+S)  		b0bts1 _disp_map+1.0
  2254  00037F   8382(2)  		jmp	$+3
  2255  000380   60D0(1)  		b0bclr	P0.0
  2256  000381   68B8(1)  		b0bset	P0M.0
  2257  000382   7916(1+S)  		b0bts1 _disp_map+1.1
  2258  000383   8386(2)  		jmp	$+3
  2259  000384   60D4(1)  		b0bclr	P4.0
  2260  000385   68C4(1)  		b0bset	P4M.0
  2261  000386   7A16(1+S)  		b0bts1 _disp_map+1.2
  2262  000387   838A(2)  		jmp	$+3
  2263  000388   61D4(1)  		b0bclr	P4.1
  2264  000389   69C4(1)  		b0bset	P4M.1
  2265  00038A   7B16(1+S)  		b0bts1 _disp_map+1.3
  2266  00038B   838E(2)  		jmp	$+3
  2267  00038C   64D5(1)  		b0bclr	P5.4
  2268  00038D   6CC5(1)  		b0bset	P5M.4
  2269  00038E   7C16(1+S)  		b0bts1 _disp_map+1.4
  2270  00038F   8392(2)  		jmp	$+3
  2271  000390   61D0(1)  		b0bclr	P0.1
  2272  000391   69B8(1)  		b0bset	P0M.1
  2273  000392   6AD4(1)  		b0bset	P4.2
  2274  000393   6AC4(1)  		b0bset	P4M.2
  2275  000394   83C9(2)  		jmp	LedScan_ISR_END
  2276  000395   7D15(1+S)  		b0bts1 _disp_map+0.5
  2277  000396   8399(2)  		jmp	$+3
  2278  000397   68D4(1)  		b0bset	P4.0
  2279  000398   68C4(1)  		b0bset	P4M.0
  2280  000399   7E15(1+S)  		b0bts1 _disp_map+0.6
  2281  00039A   839D(2)  		jmp	$+3
  2282  00039B   69D4(1)  		b0bset	P4.1
  2283  00039C   69C4(1)  		b0bset	P4M.1
  2284  00039D   7D16(1+S)  		b0bts1 _disp_map+1.5
  2285  00039E   83A1(2)  		jmp	$+3
  2286  00039F   6CD5(1)  		b0bset	P5.4
  2287  0003A0   6CC5(1)  		b0bset	P5M.4
  2288  0003A1   7E16(1+S)  		b0bts1 _disp_map+1.6
  2289  0003A2   83A5(2)  		jmp	$+3
  2290  0003A3   69D0(1)  		b0bset	P0.1
  2291  0003A4   69B8(1)  		b0bset	P0M.1
  2292  0003A5   60D0(1)  		b0bclr	P0.0
  2293  0003A6   68B8(1)  		b0bset	P0M.0
  2294  0003A7   83C9(2)  		jmp	LedScan_ISR_END
  2295  0003A8   7817(1+S)  		b0bts1 _disp_map+2.0
  2296  0003A9   83AC(2)  		jmp	$+3
  2297  0003AA   60D4(1)  		b0bclr	P4.0
  2298  0003AB   68C4(1)  		b0bset	P4M.0
  2299  0003AC   7917(1+S)  		b0bts1 _disp_map+2.1
  2300  0003AD   83B0(2)  		jmp	$+3
  2301  0003AE   61D4(1)  		b0bclr	P4.1
  2302  0003AF   69C4(1)  		b0bset	P4M.1
  2303  0003B0   7A17(1+S)  		b0bts1 _disp_map+2.2
  2304  0003B1   83B4(2)  		jmp	$+3
  2305  0003B2   64D5(1)  		b0bclr	P5.4
  2306  0003B3   6CC5(1)  		b0bset	P5M.4
  2307  0003B4   7B17(1+S)  		b0bts1 _disp_map+2.3
  2308  0003B5   83B8(2)  		jmp	$+3
  2309  0003B6   61D0(1)  		b0bclr	P0.1
  2310  0003B7   69B8(1)  		b0bset	P0M.1
  2311  0003B8   68D0(1)  		b0bset	P0.0
  2312  0003B9   68B8(1)  		b0bset	P0M.0
  2313  0003BA   83C9(2)  		jmp	LedScan_ISR_END
  2314  0003BB   7C17(1+S)  		b0bts1 _disp_map+2.4
  2315  0003BC   83BF(2)  		jmp	$+3
  2316  0003BD   61D4(1)  		b0bclr	P4.1
  2317  0003BE   69C4(1)  		b0bset	P4M.1
  2318  0003BF   7D17(1+S)  		b0bts1 _disp_map+2.5
  2319  0003C0   83C3(2)  		jmp	$+3
  2320  0003C1   64D5(1)  		b0bclr	P5.4
  2321  0003C2   6CC5(1)  		b0bset	P5M.4
  2322  0003C3   7E17(1+S)  		b0bts1 _disp_map+2.6
  2323  0003C4   83C7(2)  		jmp	$+3
  2324  0003C5   61D0(1)  		b0bclr	P0.1
  2325  0003C6   69B8(1)  		b0bset	P0M.1
  2326  0003C7   68D4(1)  		b0bset	P4.0
  2327  0003C8   68C4(1)  		b0bset	P4M.0
  2328  0003C9             	
  2329  0003C9             	//if(_50ms_count >= 20)
  2330  0003C9             	//{
  2331  0003C9             	//	_50ms_count = 0;
  2332  0003C9             	//	system_tick_flag = 1
  2333  0003C9             	//}
  2334  0003C9             	//else
  2335  0003C9             	//{
  2336  0003C9             	//	++_50ms_count;
  2337  0003C9             	//}
  2338  0003C9                isr_50ms_start:
  2339  0003C9   2E03(1)  	b0mov	a,_50ms_count
  2340  0003CA   2414(1)  	sub	a,#(20)       	//2.5ms * 20 = 50ms
  2341  0003CB   7A86(1+S)  	b0bts1  fc		
  2342  0003CC   83CF(2)          jmp	isr_50ms_1	//<20
  2343  0003CD   2B03(1)  	clr	_50ms_count
  2344  0003CE   6900(1)  	b0bset	system_tick_flag
  2345  0003CF                isr_50ms_1:
  2346  0003CF             	//++_50ms_count
  2347  0003CF   1603(1+S)  	incms _50ms_count
  2348  0003D0   0000(1)  	nop
  2349  0003D1                isr_50ms_end:
  2350  0003D1             isr_exit:
  2351  0003D1   0500(1)  	pop
  2352  0003D2   0F00(2)  	reti
  2353  0003D3             
  2354  0003D3             
  2355  0003D3             .ENDP
