     1  000000             CHIP SN8P2711B
     2  000000             //{{SONIX_CODE_OPTION
     3  000000             	.Code_Option	LVD		LVD_H		; 2.4V Reset Enable LVD36 bit of PFLAG for 3.6V Low Voltage Indicator
     4  000000             	.Code_Option	Reset_Pin	P04
     5  000000             	.Code_Option	Watch_Dog	Always_On	; Watchdog still enable even in Green and Sleep mode
     6  000000             	.Code_Option	High_Clk	IHRC_16M	; Internal 16M RC Oscillator
     7  000000             	.Code_Option	Fcpu		#2     ; Fcpu = Fosc/4
     8  000000             	.Code_Option	Security	Enable
     9  000000             	.Code_Option	Noise_Filter	Disable
    10  000000             //}}SONIX_CODE_OPTION
    11  000000             	INCLUDESTD		MACRO1.H
    12  000000             	INCLUDESTD		MACRO2.H
    13  000000             	INCLUDESTD	 	MACRO3.H
    14  000000             	
    15  000000             .data
    16  E 00000001         	BIT0		equ	0x01
    17  E 00000002         	BIT1		equ	0x02
    18  E 00000004         	BIT2		equ	0x04
    19  E 00000008         	BIT3		equ	0x08
    20  E 00000010         	BIT4		equ	0x10
    21  E 00000020         	BIT5		equ	0x20
    22  E 00000040         	BIT6		equ	0x40
    23  E 00000080         	BIT7		equ	0x80
    24  E 00000014         	SYSTEM_TICK	equ	20	//50ms中断
    25  000000             
    26  0000 D             	flag0			ds	1
    27  E 00000000         	system_idle_flag	equ	flag0.0		//0->正常工作 1->待机模式
    28  E 00010000         	system_tick_flag	equ	flag0.1		//50ms置位一次
    29  E 00020000         	_disp_update_flag	equ	flag0.2		//刷新显示标志
    30  E 00030000         	_disp_voltage_flag	equ	flag0.3		//0->显示电量  1->显示电压
    31  E 00040000         	_input_power_flag	equ	flag0.4		//0->没有外部电源 1->有外部电源
    32  E 00050000         	_led_on_off_flag	equ	flag0.5		//0->LED_OFF	1->LED_ON
    33  E 00060000         	_lcd_init_flag		equ	flag0.6		//此标志为1表示LCD上电全显已执行过
    34  E 00070000         	_is_output_en_flag	equ	flag0.7		//0->升压输出未开启 1->升压输出开启
    35  000001             
    36  0001 D             	flag1			ds	1
    37  E 00000001         	_key_long_flag		equ	flag1.0		//长按执行标记,避免重复响应
    38  000002             
    39  0002 D             	tmp			ds	1		//临时变量
    40  0003 D             	_50ms_count		ds	1		//50ms计时
    41  0004 D             	_enter_idle_dly		ds	1		//按键唤醒后,延时进入IDLE
    42  000005             	
    43  000005             	//math.h
    44  0005 D             	_d_math_input0		ds	3     //被乘数 被除数
    45  0008 D             	_d_math_input1		ds	3     //乘数   除数
    46  000B D             	_d_math_output0		ds 	3     //积     商
    47  000E D             	_d_math_output1		ds	3     //余数 
    48  0011 D             	_count			ds	1     //循环移位计数器
    49  0012 D             	_math_tmp0		ds	1
    50  000013             
    51  000013             	//display.h
    52  0013 D             	_disp_swap_dly		ds	1	//电压和电量交替显示间隔计时
    53  0014 D             	_disp_update_dly	ds	1	//显示更新延时,避免数据刷新过快
    54  0015 D             	_disp_map		ds	3	//显存映射
    55  0018 D             	_led_scan_index		ds	1	//当前扫描的COM
    56  000019             
    57  000019             	//sensor.h
    58  0019 D             	_adc_ch_index		ds	1	//当前ADC通道
    59  001A D             	_ad_buf_tmp		ds	2	//AD转换的结果缓冲,主要是用于做移位和对齐
    60  001C D             	_ad_bolgate_buf		ds	2	//输入电压平均值计算
    61  00001E             	
    62  001E D             	_cur_input_volgate	ds	1	//当前输入电压
    63  001F D             	_cur_batt_capacity	ds	1	//当前电池电量
    64  0020 D             	_batt_capacity_tmp	ds	1
    65  000021             	
    66  0021 D             	_adc_delay_count	ds	1	//转换前的延时计数
    67  0022 D             	_adc_ch_dly		ds	1	//通道采集切换延时
    68  000023             	
    69  000023             	//key.h
    70  0023 D             	key_value_tmp		ds	1
    71  0024 D             	key_value_old		ds	1
    72  0025 D             	key_value_cur		ds	1
    73  0026 D             	key_hold_tick		ds	1
    74  0027 D             	key_state_cur		ds	1
    75  0028 D             	key_repeat_tick		ds	1
    76  000029             
    77  0029 D             	_led_mode		ds	1	//LED模式
    78  002A D             	_led_mode_sub		ds	1	//对应模式下的亮灯控制
    79  002B D             	_led_dly		ds	1	//LED控制延时
    80  00002C             
    81  000000             .code
    82  000000               org 0x00
    83  000000   81BD(2)    jmp reset
    84  000008               org 0x08
    85  000008   8345(2)    jmp isr
    86  000020               org 0x20
    87  000020             
    88  000020             	include math.h
    89  000020             /*
    90  000020             	数学运算库
    91  000020             */
    92  000020             //==========================================================
    93  000020             //比较高低字节,不改变原数据
    94  000020             //num1-num2
    95  000020             //>=0: jmp->cjmp_1
    96  000020             //<0 : jmp->cjmp_2
    97  000020             //tmp0
    98  000020             comparison_16b macro  num1_l,num1_h,num2_l,num2_h,cjmp_1,cjmp_2
    99  000020                	mov  	a,num1_l	//先减低字节
   100  000020                	sub    	a,num2_l	
   101  000020                	mov  	a,num1_h	//再减高字节
   102  000020                	sbc    	a,num2_h	//
   103  000020                	b0bts0 	FC         	//
   104  000020                	jmp    	cjmp_1     	//如果等于0就 >=
   105  000020                	jmp    	cjmp_2     	//如果等于1就 <
   106  000020                	endm
   107  000020             //==================================================================================================
   108  000020             //交换两个16位数据
   109  000020             swap_16b macro num1_l,num1_h,num2_l,num2_h
   110  000020             	b0mov	a,num1_l
   111  000020             	b0xch	a,num2_l
   112  000020             	b0xch	a,num1_l
   113  000020             	b0mov	a,num1_h
   114  000020             	b0xch	a,num2_h
   115  000020             	b0xch	a,num1_h
   116  000020             	endm
   117  000020             //==================================================================================================
   118  000020             //num ++
   119  000020             cnt_inc_16b macro  num_l,num_h
   120  000020                	incms	num1_l
   121  000020                	jmp	$ + 3
   122  000020                	incms	num_h
   123  000020                	nop
   124  000020                	endm
   125  000020             //==================================================================================================
   126  000020             // num1 = num1 + num2
   127  000020             add_16b macro num1_l,num1_h,num2_l,num2_h
   128  000020                	b0mov	a,num2_l
   129  000020                	add	num1_l,a
   130  000020                	b0mov	a,num2_h
   131  000020                	adc	num1_h,a
   132  000020                	endm
   133  000020             //==================================================================================================
   134  000020             // num1 = num1 - num2
   135  000020             sub_16b macro num1_l,num1_h,num2_l,num2_h
   136  000020                	b0mov	a,num1_l
   137  000020                	sub	a,num2_l
   138  000020             	b0mov	num1_l,a
   139  000020                	b0mov	a,num1_h
   140  000020                	sbc	a,num2_h
   141  000020             	b0mov	num1_h,a
   142  000020                	endm
   143  000020             //==================================================================================================
   144  000020             	__div_u8_u8:
   145  000020             	//8位数除法
   146  000020             	//d_math_input0  = 被除数	
   147  000020             	//d_math_input1  = 除数		
   148  000020             	//d_math_output0 = 商	
   149  000020             	//d_math_output1 = 中间变量(余数)   	
   150  000020   2B0B(1)  		   clr		_d_math_output0    	//清0商
   151  000021   2B0E(1)  		   clr		_d_math_output1		//清0中间变量(余数)   
   152  000022   2B11(1)  		   clr      _count
   153  000023             		div_u8_u8_0:
   154  000023   1611(1+S)  		   incms	_count	 			//count加一
   155  000024   6286(1)  		   b0bclr	fc
   156  000025   0B0B(1)  		   rlcm		_d_math_output0    	//商左移一位至
   157  000026                        	   //b0bclr	fc
   158  000026   0B05(1)  		   rlcm		_d_math_input0     	//被除数中间变量左移1位存入中间变量
   159  000027   0B0E(1)  		   rlcm		_d_math_output1
   160  000028   1E0E(1)  		   mov		a,_d_math_output1  	//中间变量减去除数
   161  000029   2208(1)  		   sub		a,_d_math_input1
   162  00002A   7286(1+S)  		   b0bts0	fc 	 				//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   163  00002B   802D(2)  		   jmp		div_u8_u8_1
   164  00002C   8030(2)  		   jmp		div_u8_u8_2
   165  00002D             		div_u8_u8_1:         	 			//没有借位
   166  00002D   1F0E(1)  		   mov		_d_math_output1,a   //得到余数
   167  00002E   680B(1)  		   b0bset	_d_math_output0.0
   168  00002F   8030(2)  		   jmp		div_u8_u8_3
   169  000030             		div_u8_u8_2:		 					//如果有借位
   170  000030             		   //b0bclr	_d_math_output0.0
   171  000030             		div_u8_u8_3:
   172  000030   2D08(1)  		   mov		a,#8	 			//判断是否循环了8次
   173  000031   0711(1+S)  		   cmprs	a,_count
   174  000032   8023(2)  		   jmp		div_u8_u8_0
   175  000033   0E00(2)  		   ret
   176  000034             
   177  000034             //==================================================================================================
   178  000034             /* 	__div_u16_u16:
   179  000034             		//16位数除16位数除法
   180  000034             		//d_math_input0  = 被除数	
   181  000034             		//d_math_input1  = 除数		
   182  000034             		//d_math_output0 = 商	
   183  000034             		//d_math_output1 = 中间变量(余数)   	
   184  000034             		   clr		_d_math_output0    		//清0商
   185  000034             		   clr      	_d_math_output0 + 1
   186  000034             		   clr		_d_math_output1			//清0中间变量(余数)   
   187  000034             		   clr		_d_math_output1 + 1
   188  000034             		   clr      	_count
   189  000034             		div_u16_u16_0:
   190  000034             		   incms	_count	 				//count加一
   191  000034             		   b0bclr	fc
   192  000034             		   rlcm		_d_math_output0    		//商左移1位
   193  000034             		   rlcm     	_d_math_output0 + 1
   194  000034             		   //b0bclr	fc
   195  000034             		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   196  000034             		   rlcm     	_d_math_input0 + 1
   197  000034             		   rlcm		_d_math_output1
   198  000034             		   rlcm     	_d_math_output1 + 1
   199  000034             
   200  000034             		   b0mov	a,_d_math_output1  		//中间变量减去除数
   201  000034             		   sub		a,_d_math_input1
   202  000034             		   b0mov    	_math_tmp0,a
   203  000034             		   b0mov    	a,_d_math_output1 + 1
   204  000034             		   sbc      	a,_d_math_input1 + 1
   205  000034             		   //b0mov    	_tmp1,a
   206  000034             		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   207  000034             		   jmp		div_u16_u16_1
   208  000034             		   jmp		div_u16_u16_2
   209  000034             		div_u16_u16_1:         	 				//没有借位
   210  000034             		   b0mov	_d_math_output1 + 1,a   //得到余数
   211  000034             		   b0mov    	a,_math_tmp0
   212  000034             		   b0mov    	_d_math_output1,a
   213  000034             		   b0bset	_d_math_output0.0
   214  000034             		   jmp		div_u16_u16_3
   215  000034             		div_u16_u16_2:		 					//如果有借位
   216  000034             		   //b0bclr	_d_math_output0.0
   217  000034             		div_u16_u16_3:
   218  000034             		   mov		a,#16	 				//判断是否循环了16次
   219  000034             		   cmprs	a,_count
   220  000034             		   jmp		div_u16_u16_0
   221  000034             		   ret*/
   222  000034             //==================================================================================================
   223  000034              	__div_u24_u16:
   224  000034             		//24位数除16位数除法
   225  000034             		//d_math_input0  = 被除数	
   226  000034             		//d_math_input1  = 除数		
   227  000034             		//d_math_output0 = 商	
   228  000034             		//d_math_output1 = 中间变量(余数)   	
   229  000034   2B0A(1)  		   clr          _d_math_input1 + 2		//清除数高位
   230  000035   2B0B(1)  		   clr		_d_math_output0    		//清0商
   231  000036   2B0C(1)  		   clr      	_d_math_output0 + 1
   232  000037   2B0D(1)  		   clr      	_d_math_output0 + 2
   233  000038   2B0E(1)  		   clr		_d_math_output1			//清0中间变量(余数)   
   234  000039   2B0F(1)  		   clr		_d_math_output1 + 1		
   235  00003A   2B10(1)  		   clr		_d_math_output1 + 2
   236  00003B   2B11(1)  		   clr      	_count
   237  00003C             		div_u24_u16_0:
   238  00003C   1611(1+S)  		   incms	_count	 				//count加一
   239  00003D   6286(1)  		   b0bclr	fc
   240  00003E   0B0B(1)  		   rlcm		_d_math_output0    		//商左移1位
   241  00003F   0B0C(1)  		   rlcm     	_d_math_output0 + 1
   242  000040   0B0D(1)  		   rlcm     	_d_math_output0 + 2	
   243  000041             		   //b0bclr	fc
   244  000041   0B05(1)  		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   245  000042   0B06(1)  		   rlcm     	_d_math_input0 + 1
   246  000043   0B07(1)  		   rlcm     	_d_math_input0 + 2
   247  000044   0B0E(1)  		   rlcm		_d_math_output1
   248  000045   0B0F(1)  		   rlcm     	_d_math_output1 + 1
   249  000046   0B10(1)  	    	   rlcm     	_d_math_output1 + 2
   250  000047             
   251  000047   2E0E(1)  		   b0mov	a,_d_math_output1  		//中间变量减去除数
   252  000048   2208(1)  		   sub		a,_d_math_input1
   253  000049   2F12(1)  		   b0mov    	_math_tmp0,a
   254  00004A   2E0F(1)  		   b0mov    	a,_d_math_output1 + 1
   255  00004B   2009(1)  		   sbc      	a,_d_math_input1 + 1
   256  00004C   2F13(1)  		   b0mov    	_math_tmp0 + 1,a
   257  00004D   2E10(1)  		   b0mov    	a,_d_math_output1 + 2
   258  00004E   200A(1)  		   sbc      	a,_d_math_input1 + 2
   259  00004F             		   //b0mov    	_tmp1,a
   260  00004F   7286(1+S)  		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   261  000050   8052(2)  		   jmp		div_u24_u16_1
   262  000051   8059(2)  		   jmp		div_u24_u16_2
   263  000052             		div_u24_u16_1:         	 				//没有借位
   264  000052   2F10(1)  		   b0mov	_d_math_output1 + 2,a   //得到余数
   265  000053   2E12(1)  		   b0mov    	a,_math_tmp0
   266  000054   2F0E(1)  		   b0mov    	_d_math_output1,a
   267  000055   2E13(1)      		   b0mov    	a,_math_tmp0 + 1
   268  000056   2F0F(1)  		   b0mov    	_d_math_output1 + 1,a
   269  000057   680B(1)  		   b0bset	_d_math_output0.0
   270  000058   8059(2)  		   jmp		div_u24_u16_3
   271  000059             		div_u24_u16_2:		 					//如果有借位
   272  000059             		   //b0bclr	_d_math_output0.0
   273  000059             		div_u24_u16_3:
   274  000059   2D18(1)  		   mov		a,#24	 				//判断是否循环了24次
   275  00005A   0711(1+S)  		   cmprs	a,_count
   276  00005B   803C(2)  		   jmp		div_u24_u16_0
   277  00005C   0E00(2)  		   ret
   278  00005D             
   279  00005D             //==================================================================================================
   280  00005D             	__mul_u16_u8: //2711B没有乘法指令
   281  00005D             		//16位数 x 8位数 乘法(结果不超出24位)
   282  00005D             		//d_math_input0  = 被乘数	
   283  00005D             		//d_math_input1  = 乘数		
   284  00005D             		//d_math_output0 = 积
   285  00005D             		/*	b0mov	a,_d_math_input0+0
   286  00005D             			mul	a,_d_math_input1+0
   287  00005D             			b0mov	_d_math_output0,a
   288  00005D             			b0mov	a,R
   289  00005D             			b0mov	_d_math_output0+1,a
   290  00005D             			b0mov	a,_d_math_input0+1
   291  00005D             			mul	a,_d_math_input1+0
   292  00005D             			add	_d_math_output0+1,a
   293  00005D             			b0mov	a,R
   294  00005D             			clr	_d_math_output0+2
   295  00005D             			adc	_d_math_output0+2,a
   296  00005D             			ret*/
   297  00005D   2B07(1)  			clr		_d_math_input0 + 2     	//清被乘数高位
   298  00005E   2B0A(1)                          clr             _d_math_input1 + 2	//清乘数高位
   299  00005F   2B09(1)  			clr             _d_math_input1 + 1	//清乘数中位
   300  000060   2B0B(1)  		   	clr		_d_math_output0    	//清0积
   301  000061   2B0C(1)  			clr		_d_math_output0 + 1
   302  000062   2B0D(1)  			clr		_d_math_output0 + 2
   303  000063   2B11(1)  		   	clr     	_count
   304  000064             		mul_u16_u8_0:
   305  000064   1611(1+S)  		   	incms		_count	 		//count加一
   306  000065             
   307  000065   0908(1)  			rrcm    	_d_math_input1      	//乘数右移1位
   308  000066   7A86(1+S)  			b0bts1		fc  				
   309  000067   806E(2)  			jmp		mul_u16_u8_1
   310  000068             
   311  000068   2E05(1)  			b0mov   	a,_d_math_input0     	//被乘数加到积
   312  000069   130B(1)  			add     	_d_math_output0,a
   313  00006A   2E06(1)  			b0mov   	a,_d_math_input0 + 1
   314  00006B   110C(1)  			adc     	_d_math_output0 + 1,a
   315  00006C   1E07(1)  			mov		a,_d_math_input0 + 2
   316  00006D   110D(1)  			adc		_d_math_output0 + 2,a
   317  00006E             		mul_u16_u8_1:
   318  00006E   6286(1)  			b0bclr		fc         	 			
   319  00006F   0B05(1)  		   	rlcm    	_d_math_input0  	//被乘数左移
   320  000070   0B06(1)  			rlcm    	_d_math_input0 + 1
   321  000071   0B07(1)  			rlcm    	_d_math_input0 + 2
   322  000072             		mul_u16_u8_2:
   323  000072   2D08(1)  		   	mov		a,#8	 		//判断是否循环了8次
   324  000073   0711(1+S)  		   	cmprs		a,_count
   325  000074   8064(2)  		   	jmp		mul_u16_u8_0
   326  000075   0E00(2)  			ret
   327  000076             //==================================================================================================
   328  000076             /*		//16位数 x 16位数 乘法(结果不超出32位)
   329  000076             		//d_math_input0  = 被乘数	
   330  000076             		//d_math_input1  = 乘数		
   331  000076             		//d_math_output0 = 积
   332  000076             		//_math_tmp0
   333  000076             	__mul_u16_u16:
   334  000076             		call	__mul_u16_u8
   335  000076             		b0mov	a,_d_math_output0+0
   336  000076             		b0mov	_math_tmp0+0,a
   337  000076             		b0mov	a,_d_math_output0+1
   338  000076             		b0mov	_math_tmp0+1,a
   339  000076             		b0mov	a,_d_math_output0+2
   340  000076             		b0mov	_math_tmp0+2,a
   341  000076             		b0mov	a,_d_math_input1+1
   342  000076             		b0mov	_d_math_input1+0,a
   343  000076             		call	__mul_u16_u8
   344  000076             		b0mov	a,_d_math_output0+2
   345  000076             		b0mov	_d_math_output0+3,a
   346  000076             		b0mov	a,_d_math_output0+1
   347  000076             		b0mov	_d_math_output0+2,a
   348  000076             		b0mov	a,_d_math_output0+0
   349  000076             		b0mov	_d_math_output0+1,a
   350  000076             		b0mov	a,_math_tmp0+0
   351  000076             		b0mov	_d_math_output0+0,a 
   352  000076             		b0mov	a,_math_tmp0+1
   353  000076             		add	_d_math_output0+1,a
   354  000076             		b0mov	a,_math_tmp0+2
   355  000076             		adc	_d_math_output0+2,a
   356  000076             		mov	a,#(0)
   357  000076             		adc	_d_math_output0+3,a	
   358  000076             		ret*/
   359  000076             //==================================================================================================
   360  000076             //end files
   361  000076             
   362  000076             
   363  000076             	include sensor.h
   364  000076             /*
   365  000076             
   366  000076             */
   367  000076             //========================================================================================
   368  000076             	//结果存入 _ad_buf_tmp
   369  000076             	SensorADConvert_CH	macro	ch
   370  000076             		mov	a,#(ch | BIT4 | BIT7)
   371  000076             		b0mov	ADM,a
   372  000076             		call	SensorADConvert
   373  000076             		endm
   374  000076             //========================================================================================
   375  000076             	AdcDelay macro
   376  000076             		mov	a,#(50)
   377  000076             		b0mov	_adc_delay_count,a
   378  000076             		decms	_adc_delay_count
   379  000076             		jmp	$ - 1
   380  000076             		endm
   381  000076             //========================================================================================
   382  000076             	//启动一次ADC转换
   383  000076             	//结果存入 _ad_buf_tmp
   384  000076             	SensorADConvert:
   385  000076   2D50(1)  		MOV A, #(0x50)
   386  000077   2FB3(1)    		B0MOV ADR, A	//ADC clock: 2MHZ,ADC resolution: -1
   387  000078   2D00(1)    		MOV A, #(0x00)
   388  000079   2FAF(1)    		B0MOV VREFH, A	//Internal VREFH: 2V
   389  00007A             
   390  00007A             		AdcDelay
   391  00007A   2D32(1)  		mov	a,#(50)
   392  00007B   2F21(1)  		b0mov	_adc_delay_count,a
   393  00007C   2621(1+S)  		decms	_adc_delay_count
   394  00007D   807C(2)  		jmp	$ - 1
   395  00007E   6EB1(1)  		b0bset	FADS			//start adc
   396  00007F             	SensorADConvert_wait_adc:
   397  00007F   7DB1(1+S)  		b0bts1	FEOC			//检查ADC状态标志
   398  000080   807F(2)     		jmp	SensorADConvert_wait_adc	//eco=0：AD转换中
   399  000081   2EB2(1)  		b0mov	a,ADB
   400  000082   2F1B(1)  		b0mov	_ad_buf_tmp + 1,a
   401  000083   2EB3(1)  		b0mov	a,ADR
   402  000084   2F1A(1)  		b0mov	_ad_buf_tmp + 0,a
   403  000085   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   404  000086   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   405  000087   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   406  000088   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   407  000089   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   408  00008A   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   409  00008B   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   410  00008C   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   411  00008D   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   412  00008E   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   413  00008F   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   414  000090   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   415  000091   2D0F(1)  		mov	a,#(0x0f)
   416  000092   291B(1)  		and	_ad_buf_tmp + 1,a	//把高位的高4位清零
   417  000093   0E00(2)  		ret
   418  000094             //========================================================================================
   419  000094             /*	//对同一个通道6次采样求平均(去掉最大值和最小值)
   420  000094             	//结果存入 _ad_buf_tmp
   421  000094             	SensorAdAverage:
   422  000094             		//if(++_ad_buf_index < 6) return
   423  000094             		incms	_ad_buf_index
   424  000094             		nop
   425  000094             		b0mov	a,_ad_buf_index
   426  000094             		sub	a,#(6)
   427  000094             		b0bts1	fc
   428  000094             		jmp	$+2  		//<6
   429  000094             		clr	_ad_buf_index
   430  000094             		
   431  000094             		call	SensorADConvert
   432  000094             		//_ad_buf_l[_ad_buf_index] = _ad_buf_tmp+0
   433  000094             		b0mov	Y,#(0)
   434  000094             		b0mov	Z,#_ad_buf_l$L
   435  000094             		b0mov	A,_ad_buf_index
   436  000094             		add	Z,A
   437  000094             		b0mov	a,_ad_buf_tmp+0
   438  000094             		b0mov	@YZ,a
   439  000094             
   440  000094             		//_ad_buf_h[_ad_buf_index] = _ad_buf_tmp+1
   441  000094             		//b0mov	Y,#(0)
   442  000094             		b0mov	Z,#_ad_buf_h$L
   443  000094             		b0mov	A,_ad_buf_index
   444  000094             		add	Z,A
   445  000094             		b0mov	a,_ad_buf_tmp+1
   446  000094             		b0mov	@YZ,a
   447  000094             	//======================================================================
   448  000094             	//复制数据到排序缓冲区
   449  000094             		b0mov	a,_ad_buf_l+0
   450  000094             		b0mov	_ad_buf_l_sort+0,a
   451  000094             		b0mov	a,_ad_buf_l+1
   452  000094             		b0mov	_ad_buf_l_sort+1,a
   453  000094             		b0mov	a,_ad_buf_l+2
   454  000094             		b0mov	_ad_buf_l_sort+2,a
   455  000094             		b0mov	a,_ad_buf_l+3
   456  000094             		b0mov	_ad_buf_l_sort+3,a
   457  000094             		b0mov	a,_ad_buf_l+4
   458  000094             		b0mov	_ad_buf_l_sort+4,a
   459  000094             		b0mov	a,_ad_buf_l+5
   460  000094             		b0mov	_ad_buf_l_sort+5,a
   461  000094             
   462  000094             		b0mov	a,_ad_buf_h+0
   463  000094             		b0mov	_ad_buf_h_sort+0,a
   464  000094             		b0mov	a,_ad_buf_h+1
   465  000094             		b0mov	_ad_buf_h_sort+1,a
   466  000094             		b0mov	a,_ad_buf_h+2
   467  000094             		b0mov	_ad_buf_h_sort+2,a
   468  000094             		b0mov	a,_ad_buf_h+3
   469  000094             		b0mov	_ad_buf_h_sort+3,a
   470  000094             		b0mov	a,_ad_buf_h+4
   471  000094             		b0mov	_ad_buf_h_sort+4,a
   472  000094             		b0mov	a,_ad_buf_h+5
   473  000094             		b0mov	_ad_buf_h_sort+5,a
   474  000094             	//======================================================================
   475  000094             	//排序
   476  000094             		mov	a,#(5)
   477  000094             		b0mov	_ad_buf_sort_i,a
   478  000094                	SensorAdAverage_comp_01:
   479  000094             		comparison_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1,SensorAdAverage_swap_01,SensorAdAverage_comp_12
   480  000094             	SensorAdAverage_swap_01:
   481  000094             		swap_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   482  000094             	SensorAdAverage_comp_12:
   483  000094             		comparison_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2,SensorAdAverage_swap_12,SensorAdAverage_comp_23
   484  000094             	SensorAdAverage_swap_12:
   485  000094             		swap_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   486  000094             	SensorAdAverage_comp_23:
   487  000094             		comparison_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3,SensorAdAverage_swap_23,SensorAdAverage_comp_34
   488  000094             	SensorAdAverage_swap_23:
   489  000094             		swap_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   490  000094             	SensorAdAverage_comp_34:
   491  000094             		comparison_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4,SensorAdAverage_swap_34,SensorAdAverage_comp_45
   492  000094             	SensorAdAverage_swap_34:
   493  000094             		swap_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   494  000094             	SensorAdAverage_comp_45:
   495  000094             		comparison_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5,SensorAdAverage_swap_45,SensorAdAverage_comp_56
   496  000094             	SensorAdAverage_swap_45:
   497  000094             		swap_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5
   498  000094             	SensorAdAverage_comp_56:
   499  000094             		decms	_ad_buf_sort_i
   500  000094             		jmp	SensorAdAverage_comp_01
   501  000094             	//======================================================================
   502  000094             	//求中间四次的平均值,去掉最大的1个和最小的1个数
   503  000094             		clr	_ad_buf_tmp+0	
   504  000094             		clr	_ad_buf_tmp+1
   505  000094             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   506  000094             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   507  000094             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   508  000094             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   509  000094             	
   510  000094             		rrcm	_ad_buf_tmp+1	;高位带进位右移
   511  000094                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   512  000094                		rrcm	_ad_buf_tmp+1	;高位带进位右移
   513  000094                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   514  000094                		mov	a,#(0x0F) 	;把高位的左4为置0
   515  000094                		and	_ad_buf_tmp+1,a
   516  000094             		ret*/
   517  000094             //========================================================================================
   518  000094             //计算电池电量
   519  000094             /*	//AD = 256 * V(0.1V) / 5  
   520  000094             	//4096 = 256 * 80 / 5
   521  000094             	batt_capacity_tab_add:
   522  000094             		dw	2150	//4.2
   523  000094             		dw	2110
   524  000094             		dw	2070
   525  000094             		dw	2030
   526  000094             		dw	1990
   527  000094             		dw	1950
   528  000094             		dw	1910
   529  000094             		dw	1870	
   530  000094             		dw	1830
   531  000094             		dw	1790
   532  000094             		dw	1750	//3.42
   533  000094             	batt_capacity_tab_dec:
   534  000094             		dw	2090	//4.08
   535  000094             		dw	2040
   536  000094             		dw	1990
   537  000094             		dw	1940
   538  000094             		dw	1890
   539  000094             		dw	1840
   540  000094             		dw	1790
   541  000094             		dw	1740
   542  000094             		dw	1690
   543  000094             		dw	1640
   544  000094             		dw	1590	//3.1
   545  000094             */
   546  000094             	SensorMathBattCapacity:
   547  000094   7C00(1+S)  		b0bts1	_input_power_flag
   548  000095   8117(2)  		jmp	SensorMathBattCapacity_DEC
   549  000096             //==================================================================================================
   550  000096             		comparison_16b	#(2150&0xff),#((2150>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_nofull,SensorMathBattCapacity_ADD_full
   551  000096   2D66(1)     	mov  	a,#(2150&0xff)	//先减低字节
   552  000097   221A(1)     	sub    	a,_ad_buf_tmp+0	
   553  000098   2D08(1)     	mov  	a,#((2150>>8)&0xff)	//再减高字节
   554  000099   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   555  00009A   7286(1+S)     	b0bts0 	FC         	//
   556  00009B   80A0(2)     	jmp    	SensorMathBattCapacity_ADD_nofull     	//如果等于0就 >=
   557  00009C   809D(2)     	jmp    	SensorMathBattCapacity_ADD_full     	//如果等于1就 <
   558  00009D             	SensorMathBattCapacity_ADD_full:
   559  00009D   2D64(1)  		mov	a,#(100)
   560  00009E   2F1F(1)  		b0mov	_cur_batt_capacity,a
   561  00009F   8197(2)  		jmp	SensorMathBattCapacity_Exit
   562  0000A0             	SensorMathBattCapacity_ADD_nofull:
   563  0000A0             		comparison_16b	#(2145&0xff),#((2145>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_90,SensorMathBattCapacity_ADD_99
   564  0000A0   2D61(1)     	mov  	a,#(2145&0xff)	//先减低字节
   565  0000A1   221A(1)     	sub    	a,_ad_buf_tmp+0	
   566  0000A2   2D08(1)     	mov  	a,#((2145>>8)&0xff)	//再减高字节
   567  0000A3   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   568  0000A4   7286(1+S)     	b0bts0 	FC         	//
   569  0000A5   80AA(2)     	jmp    	SensorMathBattCapacity_ADD_90     	//如果等于0就 >=
   570  0000A6   80A7(2)     	jmp    	SensorMathBattCapacity_ADD_99     	//如果等于1就 <
   571  0000A7             	SensorMathBattCapacity_ADD_99:
   572  0000A7   2D63(1)  		mov	a,#(99)
   573  0000A8   2F20(1)  		b0mov	_batt_capacity_tmp,a
   574  0000A9   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   575  0000AA             	SensorMathBattCapacity_ADD_90:
   576  0000AA             		comparison_16b	#(2110&0xff),#((2110>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_80,SensorMathBattCapacity_ADD_90_more
   577  0000AA   2D3E(1)     	mov  	a,#(2110&0xff)	//先减低字节
   578  0000AB   221A(1)     	sub    	a,_ad_buf_tmp+0	
   579  0000AC   2D08(1)     	mov  	a,#((2110>>8)&0xff)	//再减高字节
   580  0000AD   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   581  0000AE   7286(1+S)     	b0bts0 	FC         	//
   582  0000AF   80B4(2)     	jmp    	SensorMathBattCapacity_ADD_80     	//如果等于0就 >=
   583  0000B0   80B1(2)     	jmp    	SensorMathBattCapacity_ADD_90_more     	//如果等于1就 <
   584  0000B1             	SensorMathBattCapacity_ADD_90_more:
   585  0000B1   2D5A(1)  		mov	a,#(90)
   586  0000B2   2F20(1)  		b0mov	_batt_capacity_tmp,a
   587  0000B3   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   588  0000B4             	SensorMathBattCapacity_ADD_80:
   589  0000B4             		comparison_16b	#(2070&0xff),#((2070>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_70,SensorMathBattCapacity_ADD_80_more
   590  0000B4   2D16(1)     	mov  	a,#(2070&0xff)	//先减低字节
   591  0000B5   221A(1)     	sub    	a,_ad_buf_tmp+0	
   592  0000B6   2D08(1)     	mov  	a,#((2070>>8)&0xff)	//再减高字节
   593  0000B7   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   594  0000B8   7286(1+S)     	b0bts0 	FC         	//
   595  0000B9   80BE(2)     	jmp    	SensorMathBattCapacity_ADD_70     	//如果等于0就 >=
   596  0000BA   80BB(2)     	jmp    	SensorMathBattCapacity_ADD_80_more     	//如果等于1就 <
   597  0000BB             	SensorMathBattCapacity_ADD_80_more:
   598  0000BB   2D50(1)  		mov	a,#(80)
   599  0000BC   2F20(1)  		b0mov	_batt_capacity_tmp,a
   600  0000BD   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   601  0000BE             	SensorMathBattCapacity_ADD_70:
   602  0000BE             		comparison_16b	#(2030&0xff),#((2030>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_60,SensorMathBattCapacity_ADD_70_more
   603  0000BE   2DEE(1)     	mov  	a,#(2030&0xff)	//先减低字节
   604  0000BF   221A(1)     	sub    	a,_ad_buf_tmp+0	
   605  0000C0   2D07(1)     	mov  	a,#((2030>>8)&0xff)	//再减高字节
   606  0000C1   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   607  0000C2   7286(1+S)     	b0bts0 	FC         	//
   608  0000C3   80C8(2)     	jmp    	SensorMathBattCapacity_ADD_60     	//如果等于0就 >=
   609  0000C4   80C5(2)     	jmp    	SensorMathBattCapacity_ADD_70_more     	//如果等于1就 <
   610  0000C5             	SensorMathBattCapacity_ADD_70_more:
   611  0000C5   2D46(1)  		mov	a,#(70)
   612  0000C6   2F20(1)  		b0mov	_batt_capacity_tmp,a
   613  0000C7   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   614  0000C8             	SensorMathBattCapacity_ADD_60:
   615  0000C8             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_50,SensorMathBattCapacity_ADD_60_more
   616  0000C8   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   617  0000C9   221A(1)     	sub    	a,_ad_buf_tmp+0	
   618  0000CA   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   619  0000CB   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   620  0000CC   7286(1+S)     	b0bts0 	FC         	//
   621  0000CD   80D2(2)     	jmp    	SensorMathBattCapacity_ADD_50     	//如果等于0就 >=
   622  0000CE   80CF(2)     	jmp    	SensorMathBattCapacity_ADD_60_more     	//如果等于1就 <
   623  0000CF             	SensorMathBattCapacity_ADD_60_more:
   624  0000CF   2D3C(1)  		mov	a,#(60)
   625  0000D0   2F20(1)  		b0mov	_batt_capacity_tmp,a
   626  0000D1   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   627  0000D2             	SensorMathBattCapacity_ADD_50:
   628  0000D2             		comparison_16b	#(1950&0xff),#((1950>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_40,SensorMathBattCapacity_ADD_50_more
   629  0000D2   2D9E(1)     	mov  	a,#(1950&0xff)	//先减低字节
   630  0000D3   221A(1)     	sub    	a,_ad_buf_tmp+0	
   631  0000D4   2D07(1)     	mov  	a,#((1950>>8)&0xff)	//再减高字节
   632  0000D5   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   633  0000D6   7286(1+S)     	b0bts0 	FC         	//
   634  0000D7   80DC(2)     	jmp    	SensorMathBattCapacity_ADD_40     	//如果等于0就 >=
   635  0000D8   80D9(2)     	jmp    	SensorMathBattCapacity_ADD_50_more     	//如果等于1就 <
   636  0000D9             	SensorMathBattCapacity_ADD_50_more:
   637  0000D9   2D32(1)  		mov	a,#(50)
   638  0000DA   2F20(1)  		b0mov	_batt_capacity_tmp,a
   639  0000DB   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   640  0000DC             	SensorMathBattCapacity_ADD_40:
   641  0000DC             		comparison_16b	#(1910&0xff),#((1910>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_30,SensorMathBattCapacity_ADD_40_more
   642  0000DC   2D76(1)     	mov  	a,#(1910&0xff)	//先减低字节
   643  0000DD   221A(1)     	sub    	a,_ad_buf_tmp+0	
   644  0000DE   2D07(1)     	mov  	a,#((1910>>8)&0xff)	//再减高字节
   645  0000DF   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   646  0000E0   7286(1+S)     	b0bts0 	FC         	//
   647  0000E1   80E6(2)     	jmp    	SensorMathBattCapacity_ADD_30     	//如果等于0就 >=
   648  0000E2   80E3(2)     	jmp    	SensorMathBattCapacity_ADD_40_more     	//如果等于1就 <
   649  0000E3             	SensorMathBattCapacity_ADD_40_more:
   650  0000E3   2D28(1)  		mov	a,#(40)
   651  0000E4   2F20(1)  		b0mov	_batt_capacity_tmp,a
   652  0000E5   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   653  0000E6             	SensorMathBattCapacity_ADD_30:
   654  0000E6             		comparison_16b	#(1870&0xff),#((1870>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_20,SensorMathBattCapacity_ADD_30_more
   655  0000E6   2D4E(1)     	mov  	a,#(1870&0xff)	//先减低字节
   656  0000E7   221A(1)     	sub    	a,_ad_buf_tmp+0	
   657  0000E8   2D07(1)     	mov  	a,#((1870>>8)&0xff)	//再减高字节
   658  0000E9   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   659  0000EA   7286(1+S)     	b0bts0 	FC         	//
   660  0000EB   80F0(2)     	jmp    	SensorMathBattCapacity_ADD_20     	//如果等于0就 >=
   661  0000EC   80ED(2)     	jmp    	SensorMathBattCapacity_ADD_30_more     	//如果等于1就 <
   662  0000ED             	SensorMathBattCapacity_ADD_30_more:
   663  0000ED   2D1E(1)  		mov	a,#(30)
   664  0000EE   2F20(1)  		b0mov	_batt_capacity_tmp,a
   665  0000EF   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   666  0000F0             	SensorMathBattCapacity_ADD_20:
   667  0000F0             		comparison_16b	#(1830&0xff),#((1830>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_10,SensorMathBattCapacity_ADD_20_more
   668  0000F0   2D26(1)     	mov  	a,#(1830&0xff)	//先减低字节
   669  0000F1   221A(1)     	sub    	a,_ad_buf_tmp+0	
   670  0000F2   2D07(1)     	mov  	a,#((1830>>8)&0xff)	//再减高字节
   671  0000F3   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   672  0000F4   7286(1+S)     	b0bts0 	FC         	//
   673  0000F5   80FA(2)     	jmp    	SensorMathBattCapacity_ADD_10     	//如果等于0就 >=
   674  0000F6   80F7(2)     	jmp    	SensorMathBattCapacity_ADD_20_more     	//如果等于1就 <
   675  0000F7             	SensorMathBattCapacity_ADD_20_more:
   676  0000F7   2D14(1)  		mov	a,#(20)
   677  0000F8   2F20(1)  		b0mov	_batt_capacity_tmp,a
   678  0000F9   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   679  0000FA             	SensorMathBattCapacity_ADD_10:
   680  0000FA             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0,SensorMathBattCapacity_ADD_10_more
   681  0000FA   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   682  0000FB   221A(1)     	sub    	a,_ad_buf_tmp+0	
   683  0000FC   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   684  0000FD   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   685  0000FE   7286(1+S)     	b0bts0 	FC         	//
   686  0000FF   8104(2)     	jmp    	SensorMathBattCapacity_ADD_0     	//如果等于0就 >=
   687  000100   8101(2)     	jmp    	SensorMathBattCapacity_ADD_10_more     	//如果等于1就 <
   688  000101             	SensorMathBattCapacity_ADD_10_more:
   689  000101   2D0A(1)  		mov	a,#(10)
   690  000102   2F20(1)  		b0mov	_batt_capacity_tmp,a
   691  000103   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   692  000104             	SensorMathBattCapacity_ADD_0:
   693  000104             		comparison_16b	#(1750&0xff),#((1750>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0_less,SensorMathBattCapacity_ADD_0_more
   694  000104   2DD6(1)     	mov  	a,#(1750&0xff)	//先减低字节
   695  000105   221A(1)     	sub    	a,_ad_buf_tmp+0	
   696  000106   2D06(1)     	mov  	a,#((1750>>8)&0xff)	//再减高字节
   697  000107   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   698  000108   7286(1+S)     	b0bts0 	FC         	//
   699  000109   810E(2)     	jmp    	SensorMathBattCapacity_ADD_0_less     	//如果等于0就 >=
   700  00010A   810B(2)     	jmp    	SensorMathBattCapacity_ADD_0_more     	//如果等于1就 <
   701  00010B             	SensorMathBattCapacity_ADD_0_more:
   702  00010B   2D01(1)  		mov	a,#(1)
   703  00010C   2F20(1)  		b0mov	_batt_capacity_tmp,a
   704  00010D   8110(2)  		jmp	SensorMathBattCapacity_ADD_End
   705  00010E             	SensorMathBattCapacity_ADD_0_less:
   706  00010E   2D00(1)  		mov	a,#(0)
   707  00010F   2F20(1)  		b0mov	_batt_capacity_tmp,a
   708  000110             	SensorMathBattCapacity_ADD_End:
   709  000110   2E20(1)  		b0mov	a,_batt_capacity_tmp
   710  000111   221F(1)  		sub	a,_cur_batt_capacity
   711  000112   7A86(1+S)  		b0bts1	fc
   712  000113   8197(2)  		jmp	SensorMathBattCapacity_Exit
   713  000114   2E20(1)  		b0mov	a,_batt_capacity_tmp
   714  000115   2F1F(1)  		b0mov	_cur_batt_capacity,a
   715  000116   8197(2)  		jmp	SensorMathBattCapacity_Exit
   716  000117             //==================================================================================================
   717  000117             	SensorMathBattCapacity_DEC:
   718  000117             	comparison_16b	#(2095&0xff),#((2095>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_nofull,SensorMathBattCapacity_DEC_full
   719  000117   2D2F(1)     	mov  	a,#(2095&0xff)	//先减低字节
   720  000118   221A(1)     	sub    	a,_ad_buf_tmp+0	
   721  000119   2D08(1)     	mov  	a,#((2095>>8)&0xff)	//再减高字节
   722  00011A   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   723  00011B   7286(1+S)     	b0bts0 	FC         	//
   724  00011C   8121(2)     	jmp    	SensorMathBattCapacity_DEC_nofull     	//如果等于0就 >=
   725  00011D   811E(2)     	jmp    	SensorMathBattCapacity_DEC_full     	//如果等于1就 <
   726  00011E             	SensorMathBattCapacity_DEC_full:
   727  00011E   2D64(1)  		mov	a,#(100)
   728  00011F   2F20(1)  		b0mov	_batt_capacity_tmp,a
   729  000120   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   730  000121             	SensorMathBattCapacity_DEC_nofull:
   731  000121             		comparison_16b	#(2090&0xff),#((2090>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_90,SensorMathBattCapacity_DEC_99
   732  000121   2D2A(1)     	mov  	a,#(2090&0xff)	//先减低字节
   733  000122   221A(1)     	sub    	a,_ad_buf_tmp+0	
   734  000123   2D08(1)     	mov  	a,#((2090>>8)&0xff)	//再减高字节
   735  000124   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   736  000125   7286(1+S)     	b0bts0 	FC         	//
   737  000126   812B(2)     	jmp    	SensorMathBattCapacity_DEC_90     	//如果等于0就 >=
   738  000127   8128(2)     	jmp    	SensorMathBattCapacity_DEC_99     	//如果等于1就 <
   739  000128             	SensorMathBattCapacity_DEC_99:
   740  000128   2D63(1)  		mov	a,#(99)
   741  000129   2F20(1)  		b0mov	_batt_capacity_tmp,a
   742  00012A   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   743  00012B             	SensorMathBattCapacity_DEC_90:
   744  00012B             		comparison_16b	#(2040&0xff),#((2040>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_80,SensorMathBattCapacity_DEC_90_more
   745  00012B   2DF8(1)     	mov  	a,#(2040&0xff)	//先减低字节
   746  00012C   221A(1)     	sub    	a,_ad_buf_tmp+0	
   747  00012D   2D07(1)     	mov  	a,#((2040>>8)&0xff)	//再减高字节
   748  00012E   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   749  00012F   7286(1+S)     	b0bts0 	FC         	//
   750  000130   8135(2)     	jmp    	SensorMathBattCapacity_DEC_80     	//如果等于0就 >=
   751  000131   8132(2)     	jmp    	SensorMathBattCapacity_DEC_90_more     	//如果等于1就 <
   752  000132             	SensorMathBattCapacity_DEC_90_more:
   753  000132   2D5A(1)  		mov	a,#(90)
   754  000133   2F20(1)  		b0mov	_batt_capacity_tmp,a
   755  000134   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   756  000135             	SensorMathBattCapacity_DEC_80:
   757  000135             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_70,SensorMathBattCapacity_DEC_80_more
   758  000135   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   759  000136   221A(1)     	sub    	a,_ad_buf_tmp+0	
   760  000137   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   761  000138   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   762  000139   7286(1+S)     	b0bts0 	FC         	//
   763  00013A   813F(2)     	jmp    	SensorMathBattCapacity_DEC_70     	//如果等于0就 >=
   764  00013B   813C(2)     	jmp    	SensorMathBattCapacity_DEC_80_more     	//如果等于1就 <
   765  00013C             	SensorMathBattCapacity_DEC_80_more:
   766  00013C   2D50(1)  		mov	a,#(80)
   767  00013D   2F20(1)  		b0mov	_batt_capacity_tmp,a
   768  00013E   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   769  00013F             	SensorMathBattCapacity_DEC_70:
   770  00013F             		comparison_16b	#(1940&0xff),#((1940>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_60,SensorMathBattCapacity_DEC_70_more
   771  00013F   2D94(1)     	mov  	a,#(1940&0xff)	//先减低字节
   772  000140   221A(1)     	sub    	a,_ad_buf_tmp+0	
   773  000141   2D07(1)     	mov  	a,#((1940>>8)&0xff)	//再减高字节
   774  000142   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   775  000143   7286(1+S)     	b0bts0 	FC         	//
   776  000144   8149(2)     	jmp    	SensorMathBattCapacity_DEC_60     	//如果等于0就 >=
   777  000145   8146(2)     	jmp    	SensorMathBattCapacity_DEC_70_more     	//如果等于1就 <
   778  000146             	SensorMathBattCapacity_DEC_70_more:
   779  000146   2D46(1)  		mov	a,#(70)
   780  000147   2F20(1)  		b0mov	_batt_capacity_tmp,a
   781  000148   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   782  000149             	SensorMathBattCapacity_DEC_60:
   783  000149             		comparison_16b	#(1890&0xff),#((1890>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_50,SensorMathBattCapacity_DEC_60_more
   784  000149   2D62(1)     	mov  	a,#(1890&0xff)	//先减低字节
   785  00014A   221A(1)     	sub    	a,_ad_buf_tmp+0	
   786  00014B   2D07(1)     	mov  	a,#((1890>>8)&0xff)	//再减高字节
   787  00014C   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   788  00014D   7286(1+S)     	b0bts0 	FC         	//
   789  00014E   8153(2)     	jmp    	SensorMathBattCapacity_DEC_50     	//如果等于0就 >=
   790  00014F   8150(2)     	jmp    	SensorMathBattCapacity_DEC_60_more     	//如果等于1就 <
   791  000150             	SensorMathBattCapacity_DEC_60_more:
   792  000150   2D3C(1)  		mov	a,#(60)
   793  000151   2F20(1)  		b0mov	_batt_capacity_tmp,a
   794  000152   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   795  000153             	SensorMathBattCapacity_DEC_50:
   796  000153             		comparison_16b	#(1840&0xff),#((1840>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_40,SensorMathBattCapacity_DEC_50_more
   797  000153   2D30(1)     	mov  	a,#(1840&0xff)	//先减低字节
   798  000154   221A(1)     	sub    	a,_ad_buf_tmp+0	
   799  000155   2D07(1)     	mov  	a,#((1840>>8)&0xff)	//再减高字节
   800  000156   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   801  000157   7286(1+S)     	b0bts0 	FC         	//
   802  000158   815D(2)     	jmp    	SensorMathBattCapacity_DEC_40     	//如果等于0就 >=
   803  000159   815A(2)     	jmp    	SensorMathBattCapacity_DEC_50_more     	//如果等于1就 <
   804  00015A             	SensorMathBattCapacity_DEC_50_more:
   805  00015A   2D32(1)  		mov	a,#(50)
   806  00015B   2F20(1)  		b0mov	_batt_capacity_tmp,a
   807  00015C   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   808  00015D             	SensorMathBattCapacity_DEC_40:
   809  00015D             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_30,SensorMathBattCapacity_DEC_40_more
   810  00015D   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   811  00015E   221A(1)     	sub    	a,_ad_buf_tmp+0	
   812  00015F   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   813  000160   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   814  000161   7286(1+S)     	b0bts0 	FC         	//
   815  000162   8167(2)     	jmp    	SensorMathBattCapacity_DEC_30     	//如果等于0就 >=
   816  000163   8164(2)     	jmp    	SensorMathBattCapacity_DEC_40_more     	//如果等于1就 <
   817  000164             	SensorMathBattCapacity_DEC_40_more:
   818  000164   2D28(1)  		mov	a,#(40)
   819  000165   2F20(1)  		b0mov	_batt_capacity_tmp,a
   820  000166   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   821  000167             	SensorMathBattCapacity_DEC_30:
   822  000167             		comparison_16b	#(1740&0xff),#((1740>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_20,SensorMathBattCapacity_DEC_30_more
   823  000167   2DCC(1)     	mov  	a,#(1740&0xff)	//先减低字节
   824  000168   221A(1)     	sub    	a,_ad_buf_tmp+0	
   825  000169   2D06(1)     	mov  	a,#((1740>>8)&0xff)	//再减高字节
   826  00016A   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   827  00016B   7286(1+S)     	b0bts0 	FC         	//
   828  00016C   8171(2)     	jmp    	SensorMathBattCapacity_DEC_20     	//如果等于0就 >=
   829  00016D   816E(2)     	jmp    	SensorMathBattCapacity_DEC_30_more     	//如果等于1就 <
   830  00016E             	SensorMathBattCapacity_DEC_30_more:
   831  00016E   2D1E(1)  		mov	a,#(30)
   832  00016F   2F20(1)  		b0mov	_batt_capacity_tmp,a
   833  000170   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   834  000171             	SensorMathBattCapacity_DEC_20:
   835  000171             		comparison_16b	#(1690&0xff),#((1690>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_10,SensorMathBattCapacity_DEC_20_more
   836  000171   2D9A(1)     	mov  	a,#(1690&0xff)	//先减低字节
   837  000172   221A(1)     	sub    	a,_ad_buf_tmp+0	
   838  000173   2D06(1)     	mov  	a,#((1690>>8)&0xff)	//再减高字节
   839  000174   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   840  000175   7286(1+S)     	b0bts0 	FC         	//
   841  000176   817B(2)     	jmp    	SensorMathBattCapacity_DEC_10     	//如果等于0就 >=
   842  000177   8178(2)     	jmp    	SensorMathBattCapacity_DEC_20_more     	//如果等于1就 <
   843  000178             	SensorMathBattCapacity_DEC_20_more:
   844  000178   2D14(1)  		mov	a,#(20)
   845  000179   2F20(1)  		b0mov	_batt_capacity_tmp,a
   846  00017A   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   847  00017B             	SensorMathBattCapacity_DEC_10:
   848  00017B             		comparison_16b	#(1640&0xff),#((1640>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0,SensorMathBattCapacity_DEC_10_more
   849  00017B   2D68(1)     	mov  	a,#(1640&0xff)	//先减低字节
   850  00017C   221A(1)     	sub    	a,_ad_buf_tmp+0	
   851  00017D   2D06(1)     	mov  	a,#((1640>>8)&0xff)	//再减高字节
   852  00017E   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   853  00017F   7286(1+S)     	b0bts0 	FC         	//
   854  000180   8185(2)     	jmp    	SensorMathBattCapacity_DEC_0     	//如果等于0就 >=
   855  000181   8182(2)     	jmp    	SensorMathBattCapacity_DEC_10_more     	//如果等于1就 <
   856  000182             	SensorMathBattCapacity_DEC_10_more:
   857  000182   2D0A(1)  		mov	a,#(10)
   858  000183   2F20(1)  		b0mov	_batt_capacity_tmp,a
   859  000184   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   860  000185             	SensorMathBattCapacity_DEC_0:
   861  000185             		comparison_16b	#(1590&0xff),#((1590>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0_less,SensorMathBattCapacity_DEC_0_more
   862  000185   2D36(1)     	mov  	a,#(1590&0xff)	//先减低字节
   863  000186   221A(1)     	sub    	a,_ad_buf_tmp+0	
   864  000187   2D06(1)     	mov  	a,#((1590>>8)&0xff)	//再减高字节
   865  000188   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   866  000189   7286(1+S)     	b0bts0 	FC         	//
   867  00018A   818F(2)     	jmp    	SensorMathBattCapacity_DEC_0_less     	//如果等于0就 >=
   868  00018B   818C(2)     	jmp    	SensorMathBattCapacity_DEC_0_more     	//如果等于1就 <
   869  00018C             	SensorMathBattCapacity_DEC_0_more:
   870  00018C   2D01(1)  		mov	a,#(1)
   871  00018D   2F20(1)  		b0mov	_batt_capacity_tmp,a
   872  00018E   8191(2)  		jmp	SensorMathBattCapacity_DEC_End
   873  00018F             	SensorMathBattCapacity_DEC_0_less:
   874  00018F   2D00(1)  		mov	a,#(0)
   875  000190   2F20(1)  		b0mov	_batt_capacity_tmp,a
   876  000191             	SensorMathBattCapacity_DEC_End:
   877  000191   2E20(1)  		b0mov	a,_batt_capacity_tmp
   878  000192   221F(1)  		sub	a,_cur_batt_capacity
   879  000193   7286(1+S)  		b0bts0	fc
   880  000194   8197(2)  		jmp	SensorMathBattCapacity_Exit
   881  000195   2E20(1)  		b0mov	a,_batt_capacity_tmp
   882  000196   2F1F(1)  		b0mov	_cur_batt_capacity,a	
   883  000197             //====================================================================
   884  000197             	SensorMathBattCapacity_Exit:		
   885  000197   0E00(2)  		ret
   886  000198             //==================================================================================================
   887  000198             	SensorMathInputVolgate:
   888  000198             		//V = 105 * AD / 1024
   889  000198   2E1A(1)  		b0mov	a,_ad_buf_tmp+0
   890  000199   2F05(1)  		b0mov	_d_math_input0+0,a
   891  00019A   2E1B(1)  		b0mov	a,_ad_buf_tmp+1
   892  00019B   2F06(1)  		b0mov	_d_math_input0+1,a
   893  00019C   2D69(1)  		mov	a,#(105)
   894  00019D   2F08(1)  		b0mov	_d_math_input1+0,a
   895  00019E   C05D(2)  		call	__mul_u16_u8
   896  00019F             		
   897  00019F   2E0B(1)  		b0mov	a,_d_math_output0+0
   898  0001A0   2F05(1)  		b0mov	_d_math_input0+0,a
   899  0001A1   2E0C(1)  		b0mov	a,_d_math_output0+1
   900  0001A2   2F06(1)  		b0mov	_d_math_input0+1,a
   901  0001A3   2E0D(1)  		b0mov	a,_d_math_output0+2
   902  0001A4   2F07(1)  		b0mov	_d_math_input0+2,a
   903  0001A5   2D04(1)  		mov	a,#((1024 >> 8) & 0xFF)
   904  0001A6   2F09(1)  		b0mov	_d_math_input1+1,a
   905  0001A7   2D00(1)  		mov	a,#((1024) & 0xFF)
   906  0001A8   2F08(1)  		b0mov	_d_math_input1+0,a
   907  0001A9   C034(2)  		call	__div_u24_u16
   908  0001AA             
   909  0001AA   2E0B(1)  		b0mov	a,_d_math_output0+0
   910  0001AB   2F1E(1)  		b0mov	_cur_input_volgate,a
   911  0001AC   2450(1)  		sub	a,#(80)
   912  0001AD   7A86(1+S)  		b0bts1	fc
   913  0001AE   81B1(2)  		jmp	$+3
   914  0001AF   6C00(1)  		b0bset	_input_power_flag
   915  0001B0   81B2(2)  		jmp	$+2
   916  0001B1   6400(1)  		b0bclr	_input_power_flag
   917  0001B2   0E00(2)  		ret
   918  0001B3             //==================================================================================================
   919  0001B3             //
   920  0001B3             	SensorFuntion macro
   921  0001B3             		incms	_adc_ch_dly
   922  0001B3             		nop
   923  0001B3             		b0mov	a,_adc_ch_dly
   924  0001B3             		sub	a,#(10)
   925  0001B3             		b0bts1	fc
   926  0001B3             		jmp	SensorFuntion_END  		
   927  0001B3             		clr	_adc_ch_dly
   928  0001B3             	SensorFuntion_start_adc:
   929  0001B3             		b0mov	a,_adc_ch_index
   930  0001B3             		@JMP_A	3
   931  0001B3             		jmp	SensorFuntion_BATT   
   932  0001B3             		jmp	SensorFuntion_INPUT   
   933  0001B3             		jmp	SensorFuntion_OUTPUT
   934  0001B3             	SensorFuntion_BATT:
   935  0001B3             		SensorADConvert_CH 5
   936  0001B3                             call	SensorMathBattCapacity
   937  0001B3             		mov	a,#(1)
   938  0001B3             		b0mov	_adc_ch_index,a
   939  0001B3             		jmp	SensorFuntion_END
   940  0001B3             	SensorFuntion_INPUT:
   941  0001B3             		SensorADConvert_CH 3
   942  0001B3             		call	SensorMathInputVolgate
   943  0001B3             	
   944  0001B3             		mov	a,#(2)
   945  0001B3             		b0mov	_adc_ch_index,a
   946  0001B3             		jmp	SensorFuntion_END
   947  0001B3             	SensorFuntion_OUTPUT:
   948  0001B3             		b0bts1	P4.4
   949  0001B3             		jmp	$+3
   950  0001B3             		b0bset 	_is_output_en_flag
   951  0001B3             		jmp	$+2
   952  0001B3             		b0bclr	_is_output_en_flag
   953  0001B3             
   954  0001B3             		mov	a,#(0)
   955  0001B3             		b0mov	_adc_ch_index,a
   956  0001B3             	SensorFuntion_END:
   957  0001B3             		endm
   958  0001B3             //========================================================================================
   959  0001B3             	SensorFuntion_IDLE macro
   960  0001B3             		//SensorADConvert_CH 3
   961  0001B3             		//call	SensorMathInputVolgate
   962  0001B3             		//mov	a,#(0)
   963  0001B3             		//b0mov	ADM,a
   964  0001B3             
   965  0001B3             		b0bts1	P4.4
   966  0001B3             		jmp	$+3
   967  0001B3             		b0bset 	_is_output_en_flag
   968  0001B3             		jmp	$+2
   969  0001B3             		b0bclr	_is_output_en_flag
   970  0001B3             	SensorFuntion_IDLE_END:
   971  0001B3             		endm
   972  0001B3             //========================================================================================
   973  0001B3             	SensorInit macro
   974  0001B3             		endm
   975  0001B3             //========================================================================================
   976  0001B3             //end files
   977  0001B3             
   978  0001B3             
   979  0001B3             
   980  0001B3             
   981  0001B3             	include key.h
   982  0001B3             /*
   983  0001B3             	按键检测与执行
   984  0001B3             	每50ms执行一次
   985  0001B3             	采用差值消抖,连续两次采样不一样认为是抖动
   986  0001B3             
   987  0001B3             	LED灯控制，5种LED模式
   988  0001B3             */
   989  0001B3             	LED_W_ON	macro
   990  0001B3             		b0bset	P5.3
   991  0001B3             		endm
   992  0001B3             	LED_W_OFF	macro
   993  0001B3             		b0bclr	P5.3
   994  0001B3             		endm
   995  0001B3             
   996  E 000200D0         	LED_R	equ	P0.2
   997  0001B3             	LED_R_ON	macro
   998  0001B3             		b0bset	P0.2
   999  0001B3             		endm
  1000  0001B3             	LED_R_OFF	macro
  1001  0001B3             		b0bclr	P0.2
  1002  0001B3             		endm
  1003  0001B3             
  1004  E 000300D0         	LED_B	equ	P0.3
  1005  0001B3             	LED_B_ON	macro
  1006  0001B3             		b0bset	P0.3
  1007  0001B3             		endm
  1008  0001B3             	LED_B_OFF	macro
  1009  0001B3             		b0bclr	P0.3
  1010  0001B3             		endm
  1011  0001B3             
  1012  0001B3             	//键值定义
  1013  E 00000010         	KEY_VALUE_NOKEY		equ	0x10
  1014  E 00000000         	KEY_VALUE_OK		equ	0x00
  1015  0001B3             
  1016  0001B3             	//按键状态定义
  1017  E 00000000         	KEY_STATUS_NOPRESS	equ	0
  1018  E 00000001         	KEY_STATUS_PRESS	equ	1
  1019  E 00000002         	KEY_STATUS_KEEP		equ	2
  1020  E 00000003         	KEY_STATUS_KEEPED	equ	3
  1021  E 00000004         	KEY_STATUS_UP		equ	4
  1022  0001B3             	
  1023  E 00000014         	KEY_STEP_TICK		equ	SYSTEM_TICK
  1024  E 00000006         	KEY_LINK_TICK		equ	(SYSTEM_TICK/3)
  1025  0001B3             
  1026  E 000400D0         	KEY_INPUT		equ	P0.4
  1027  0001B3             //=========================================================
  1028  0001B3             KeyPressFunction macro
  1029  0001B3             	KeyPressFunction_END:
  1030  0001B3             		endm
  1031  0001B3             
  1032  0001B3             KeyKeepFunction macro
  1033  0001B3             		b0mov	a,key_hold_tick
  1034  0001B3             		sub	a,#(SYSTEM_TICK*2)
  1035  0001B3             		b0bts0	fc
  1036  0001B3             		jmp	KeyKeepFunction_Long
  1037  0001B3             	KeyKeepFunction_Short:
  1038  0001B3             		jmp	KeyKeepFunction_END
  1039  0001B3             	KeyKeepFunction_Long:
  1040  0001B3             		b0bts0	_key_long_flag
  1041  0001B3             		jmp	KeyKeepFunction_END
  1042  0001B3             		b0bset	_key_long_flag
  1043  0001B3             		b0bts0	_led_on_off_flag
  1044  0001B3             		jmp	KeyKeepFunction_Long_1
  1045  0001B3             
  1046  0001B3             		b0bset	_led_on_off_flag
  1047  0001B3             		mov	a,#(5)
  1048  0001B3             		b0mov	_led_mode,a
  1049  0001B3             		jmp	KeyKeepFunction_END
  1050  0001B3             	KeyKeepFunction_Long_1:
  1051  0001B3             		b0bclr	_led_on_off_flag
  1052  0001B3             		LED_W_OFF
  1053  0001B3             		LED_R_OFF
  1054  0001B3             		LED_B_OFF
  1055  0001B3             	KeyKeepFunction_END:
  1056  0001B3             		endm
  1057  0001B3             
  1058  0001B3             KeyUpFunction	macro
  1059  0001B3             		//key_hold_tick < SYSTEM_TICK 为短按 否则为长按
  1060  0001B3             		b0mov	a,key_hold_tick
  1061  0001B3             		sub	a,#(SYSTEM_TICK)
  1062  0001B3             		b0bts0	fc
  1063  0001B3             		jmp	KeyUpFunction_long
  1064  0001B3             	KeyUpFunction_Short:
  1065  0001B3             		b0bts1	_led_on_off_flag
  1066  0001B3             		jmp	KeyUpFunction_END
  1067  0001B3             		
  1068  0001B3             		decms	_led_mode
  1069  0001B3             		jmp	KeyUpFunction_Short_MOD1
  1070  0001B3             		mov	a,#(5)
  1071  0001B3             		b0mov	_led_mode,a
  1072  0001B3             	KeyUpFunction_Short_MOD1:
  1073  0001B3             		mov	a,#(1)
  1074  0001B3             		b0mov	_led_dly,a
  1075  0001B3             
  1076  0001B3             		//_led_mode == 1(LedFunction_R_FLASH)
  1077  0001B3             		mov	a,#(1)       
  1078  0001B3             		cmprs	a,_led_mode  
  1079  0001B3             		jmp	KeyUpFunction_Short_MOD2
  1080  0001B3             
  1081  0001B3             		mov	a,#(10)
  1082  0001B3             		b0mov	_led_mode_sub,a
  1083  0001B3             		jmp	KeyUpFunction_END
  1084  0001B3             	KeyUpFunction_Short_MOD2:
  1085  0001B3             		//_led_mode == 2(LedFunction_RB)
  1086  0001B3             		mov	a,#(2)       
  1087  0001B3             		cmprs	a,_led_mode  
  1088  0001B3             		jmp	KeyUpFunction_END
  1089  0001B3             
  1090  0001B3             		mov	a,#(12)
  1091  0001B3             		b0mov	_led_mode_sub,a
  1092  0001B3             		jmp	KeyUpFunction_END
  1093  0001B3             	KeyUpFunction_Long:
  1094  0001B3             	KeyUpFunction_END:
  1095  0001B3             		endm
  1096  0001B3             //==========================================================
  1097  0001B3             	KeyFuntion macro
  1098  0001B3             		b0mov	a,P0
  1099  0001B3             		and	a,#(0x10)
  1100  0001B3             		cmprs	a,key_value_old  	//key_value_old == A ?
  1101  0001B3             		jmp	$+2
  1102  0001B3             		jmp	$+3
  1103  0001B3             		b0mov	key_value_old,a		//key_value_old = A
  1104  0001B3             		jmp	KeyFuntion_END
  1105  0001B3             		
  1106  0001B3             		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == A ?
  1107  0001B3             		jmp	KeyScan_Press
  1108  0001B3             		jmp	KeyScan_Up
  1109  0001B3             	KeyScan_Press:
  1110  0001B3             		b0mov	a,key_value_old
  1111  0001B3             		cmprs	a,key_value_cur		//key_value_cur != key_value_old ?
  1112  0001B3             		jmp	$+2
  1113  0001B3             		jmp	KeyScan_Keep_dly
  1114  0001B3             		b0mov	key_value_cur,a		//key_value_cur = key_value_old
  1115  0001B3             		mov	a,#(KEY_STATUS_PRESS)
  1116  0001B3             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_PRESS
  1117  0001B3             		clr	key_hold_tick		//key_hold_tick = 0
  1118  0001B3             		mov	a,#(KEY_STEP_TICK)	
  1119  0001B3             		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_STEP_TICK
  1120  0001B3             		 	KeyPressFunction
  1121  0001B3             		jmp	KeyFuntion_END
  1122  0001B3             	KeyScan_Keep_dly:
  1123  0001B3             		//if(++key_hold_time == 0)
  1124  0001B3             		//{
  1125  0001B3             		//	--key_hold_time;
  1126  0001B3             		//}
  1127  0001B3             		incms	key_hold_tick
  1128  0001B3             		jmp	$+3
  1129  0001B3             		decms	key_hold_tick
  1130  0001B3             		nop
  1131  0001B3             		
  1132  0001B3             		//if(--key_repeat_tick != 0)
  1133  0001B3             		//{
  1134  0001B3             		//	return;
  1135  0001B3             		//}
  1136  0001B3             		decms	key_repeat_tick
  1137  0001B3             		jmp	KeyFuntion_END
  1138  0001B3             	KeyScan_Keep:
  1139  0001B3             		mov	a,#(KEY_LINK_TICK)
  1140  0001B3             		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_LINK_TICK
  1141  0001B3             		b0mov	a,key_state_cur
  1142  0001B3             		cmprs	a,#(KEY_STATUS_PRESS)	//key_state_cur == KEY_STATUS_PRESS ?
  1143  0001B3             		jmp	KeyScan_Keeped
  1144  0001B3             		mov	a,#(KEY_STATUS_KEEP)
  1145  0001B3             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_KEEP
  1146  0001B3             	KeyScan_Keeped:
  1147  0001B3             		 	KeyKeepFunction
  1148  0001B3             		jmp	KeyFuntion_END
  1149  0001B3             	KeyScan_Up:
  1150  0001B3             		b0mov	a,key_value_cur
  1151  0001B3             		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == key_value_cur ?
  1152  0001B3             		jmp	$+2
  1153  0001B3             		jmp	KeyFuntion_END
  1154  0001B3             		mov	a,#(KEY_STATUS_UP)
  1155  0001B3             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_UP
  1156  0001B3             		 	KeyUpFunction
  1157  0001B3             		mov	a,#(KEY_VALUE_NOKEY)
  1158  0001B3             		b0mov	key_value_cur,a
  1159  0001B3             		mov	a,#(KEY_STATUS_NOPRESS)
  1160  0001B3             		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_NOPRESS
  1161  0001B3             		clr	key_repeat_tick
  1162  0001B3             		clr	key_hold_tick
  1163  0001B3             		b0bclr	_key_long_flag
  1164  0001B3             	KeyFuntion_END:
  1165  0001B3             		endm
  1166  0001B3             //==========================================================
  1167  0001B3             	LedFunction macro
  1168  0001B3             		b0bts1	_led_on_off_flag
  1169  0001B3             		jmp	LedFunction_Exit
  1170  0001B3             
  1171  0001B3             		b0mov	a,_led_mode
  1172  0001B3             		sub	a,#(1)
  1173  0001B3             		@JMP_A	5
  1174  0001B3             		jmp	LedFunction_R_FLASH
  1175  0001B3             		jmp	LedFunction_RB 
  1176  0001B3             		jmp	LedFunction_R
  1177  0001B3             		jmp	LedFunction_B
  1178  0001B3             		jmp	LedFunction_W
  1179  0001B3             	LedFunction_R_FLASH:
  1180  0001B3             		LED_W_OFF
  1181  0001B3             		LED_B_OFF
  1182  0001B3             		//if(--_led_dly != 0)
  1183  0001B3             		//{
  1184  0001B3             		//	jmp	LedFunction_Exit
  1185  0001B3             		//}
  1186  0001B3             		decms	_led_dly
  1187  0001B3             		jmp	LedFunction_Exit
  1188  0001B3             		LED_R_OFF
  1189  0001B3             
  1190  0001B3             		b0mov	a,_led_mode_sub
  1191  0001B3             		sub	a,#(1)
  1192  0001B3             		@JMP_A	10
  1193  0001B3             		jmp	LedFunction_R_FLASH_OFF_S_2
  1194  0001B3             		jmp	LedFunction_R_FLASH_ON_S_2
  1195  0001B3             		jmp	LedFunction_R_FLASH_OFF_S_1
  1196  0001B3             		jmp	LedFunction_R_FLASH_ON_S_1
  1197  0001B3             		jmp	LedFunction_R_FLASH_OFF_L_3
  1198  0001B3             		jmp	LedFunction_R_FLASH_ON_L_3
  1199  0001B3             		jmp	LedFunction_R_FLASH_OFF_L_2
  1200  0001B3             		jmp	LedFunction_R_FLASH_ON_L_2
  1201  0001B3             		jmp	LedFunction_R_FLASH_OFF_L_1
  1202  0001B3             		jmp	LedFunction_R_FLASH_ON_L_1
  1203  0001B3             	  LedFunction_R_FLASH_ON_L_1:
  1204  0001B3             	  LedFunction_R_FLASH_ON_L_2:
  1205  0001B3             	  LedFunction_R_FLASH_ON_L_3:
  1206  0001B3             		LED_R_ON
  1207  0001B3             		mov	a,#(10)
  1208  0001B3             		jmp	LedFunction_R_FLASH_END
  1209  0001B3             	  LedFunction_R_FLASH_OFF_L_1:
  1210  0001B3             	  LedFunction_R_FLASH_OFF_L_2:
  1211  0001B3             	  LedFunction_R_FLASH_OFF_L_3:
  1212  0001B3             		mov	a,#(10)
  1213  0001B3             		jmp	LedFunction_R_FLASH_END
  1214  0001B3             	  LedFunction_R_FLASH_ON_S_1:
  1215  0001B3             	  LedFunction_R_FLASH_ON_S_2:
  1216  0001B3             		LED_R_ON
  1217  0001B3             		mov	a,#(3)
  1218  0001B3             		jmp	LedFunction_R_FLASH_END
  1219  0001B3             	  LedFunction_R_FLASH_OFF_S_1:
  1220  0001B3             		mov	a,#(3)
  1221  0001B3             		jmp	LedFunction_R_FLASH_END
  1222  0001B3             	  LedFunction_R_FLASH_OFF_S_2:
  1223  0001B3             		mov	a,#(10)
  1224  0001B3             		//jmp	LedFunction_R_FLASH_END
  1225  0001B3                       LedFunction_R_FLASH_END:
  1226  0001B3             		b0mov	_led_dly,a
  1227  0001B3             
  1228  0001B3             		//if(--_led_mode_sub == 0)
  1229  0001B3             		//{
  1230  0001B3             		//	_led_mode_sub = 10;
  1231  0001B3             		//}
  1232  0001B3             		decms	_led_mode_sub
  1233  0001B3             		jmp	LedFunction_Exit
  1234  0001B3             		mov	a,#(10)
  1235  0001B3             		b0mov	_led_mode_sub,a
  1236  0001B3             		jmp	LedFunction_Exit
  1237  0001B3             	LedFunction_RB:
  1238  0001B3             		LED_W_OFF
  1239  0001B3             		//if(--_led_dly != 0)
  1240  0001B3             		//{
  1241  0001B3             		//	jmp	LedFunction_Exit
  1242  0001B3             		//}
  1243  0001B3             		decms	_led_dly
  1244  0001B3             		jmp	LedFunction_Exit
  1245  0001B3             		LED_R_OFF
  1246  0001B3             		LED_B_OFF
  1247  0001B3             
  1248  0001B3             		b0mov	a,_led_mode_sub
  1249  0001B3             		sub	a,#(1)
  1250  0001B3             		@JMP_A	12
  1251  0001B3             		jmp	LedFunction_RB_B_OFF3
  1252  0001B3             		jmp	LedFunction_RB_B_ON3
  1253  0001B3             		jmp	LedFunction_RB_B_OFF2
  1254  0001B3             		jmp	LedFunction_RB_B_ON2
  1255  0001B3             		jmp	LedFunction_RB_B_OFF1
  1256  0001B3             		jmp	LedFunction_RB_B_ON1
  1257  0001B3             		jmp	LedFunction_RB_R_OFF3
  1258  0001B3             		jmp	LedFunction_RB_R_ON3
  1259  0001B3             		jmp	LedFunction_RB_R_OFF2
  1260  0001B3             		jmp	LedFunction_RB_R_ON2
  1261  0001B3             		jmp	LedFunction_RB_R_OFF1
  1262  0001B3             		jmp	LedFunction_RB_R_ON1
  1263  0001B3             	  LedFunction_RB_R_ON1:
  1264  0001B3             	  LedFunction_RB_R_ON2:
  1265  0001B3             	  LedFunction_RB_R_ON3:
  1266  0001B3             		LED_R_ON
  1267  0001B3             		mov	a,#(3)
  1268  0001B3             		jmp	LedFunction_RB_END
  1269  0001B3             	  LedFunction_RB_R_OFF1:
  1270  0001B3             	  LedFunction_RB_R_OFF2:
  1271  0001B3             		mov	a,#(3)
  1272  0001B3             		jmp	LedFunction_RB_END
  1273  0001B3             	  LedFunction_RB_R_OFF3:
  1274  0001B3             		mov	a,#(10)
  1275  0001B3             		jmp	LedFunction_RB_END
  1276  0001B3             	  LedFunction_RB_B_ON1:
  1277  0001B3                       LedFunction_RB_B_ON2:
  1278  0001B3                       LedFunction_RB_B_ON3:
  1279  0001B3             		LED_B_ON
  1280  0001B3             		mov	a,#(3)
  1281  0001B3             		jmp	LedFunction_RB_END
  1282  0001B3             	  LedFunction_RB_B_OFF1:
  1283  0001B3             	  LedFunction_RB_B_OFF2:
  1284  0001B3             		mov	a,#(3)
  1285  0001B3             		jmp	LedFunction_RB_END
  1286  0001B3             	  LedFunction_RB_B_OFF3:
  1287  0001B3             		mov	a,#(10)
  1288  0001B3             		jmp	LedFunction_RB_END
  1289  0001B3             	  LedFunction_RB_END:
  1290  0001B3             		b0mov	_led_dly,a
  1291  0001B3             
  1292  0001B3             		//if(--_led_mode_sub == 0)
  1293  0001B3             		//{
  1294  0001B3             		//	_led_mode_sub = 12;
  1295  0001B3             		//}
  1296  0001B3             		decms	_led_mode_sub
  1297  0001B3             		jmp	LedFunction_Exit
  1298  0001B3             		mov	a,#(12)
  1299  0001B3             		b0mov	_led_mode_sub,a
  1300  0001B3             
  1301  0001B3             		jmp	LedFunction_Exit
  1302  0001B3             	LedFunction_R:
  1303  0001B3             		LED_W_OFF
  1304  0001B3             		LED_R_ON
  1305  0001B3             		LED_B_OFF
  1306  0001B3             		jmp	LedFunction_Exit
  1307  0001B3             	LedFunction_B:
  1308  0001B3             		LED_W_OFF
  1309  0001B3             		LED_R_OFF
  1310  0001B3             		LED_B_ON
  1311  0001B3             		jmp	LedFunction_Exit
  1312  0001B3             	LedFunction_W:
  1313  0001B3             		LED_W_ON
  1314  0001B3             		LED_R_OFF
  1315  0001B3             		LED_B_OFF
  1316  0001B3             		jmp	LedFunction_Exit
  1317  0001B3             	LedFunction_Exit:
  1318  0001B3             		endm
  1319  0001B3             //==========================================================
  1320  0001B3             	KeyInit macro
  1321  0001B3             		mov	a,#(KEY_VALUE_NOKEY)
  1322  0001B3             		b0mov	key_value_tmp,a
  1323  0001B3             		b0mov	key_value_old,a
  1324  0001B3             		b0mov	key_value_cur,a
  1325  0001B3             		endm
  1326  0001B3             //==========================================================
  1327  0001B3             	include display.h
  1328  0001B3             /*
  1329  0001B3             	数码管扫描和显示相关代码
  1330  0001B3             	上电全显2S
  1331  0001B3             	温度数据显示每秒刷新一次
  1332  0001B3             	温度过高显示 "Hi"
  1333  0001B3             	温度过低显示 "Lo"
  1334  0001B3             */
  1335  0001B3             //==========================================================
  1336  0001B3             //宏定义
  1337  0001B3             	COM_ALL_LOW	macro
  1338  0001B3             		mov	a,#(~(BIT0 | BIT1))
  1339  0001B3             		and	P0,a
  1340  0001B3             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1341  0001B3             		and	P4,a
  1342  0001B3             		mov	a,#(~(BIT4))
  1343  0001B3             		and	P5,a
  1344  0001B3             		endm
  1345  0001B3             		
  1346  0001B3             	COM_ALL_INPUT	macro
  1347  0001B3             		mov	a,#(~(BIT0 | BIT1))
  1348  0001B3             		and	P0M,a
  1349  0001B3             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1350  0001B3             		and	P4M,a
  1351  0001B3             		mov	a,#(~(BIT4))
  1352  0001B3             		and	P5M,a
  1353  0001B3             		endm
  1354  0001B3             
  1355  0001B3             	COM6_OUT_PP	macro
  1356  0001B3             		b0bset	P0M.1
  1357  0001B3             		endm
  1358  0001B3             	COM6_LOW  	macro	
  1359  0001B3             		b0bclr	P0.1
  1360  0001B3             		endm
  1361  0001B3             	COM6_HIGH  	macro	
  1362  0001B3             		b0bset	P0.1
  1363  0001B3             		endm
  1364  0001B3             
  1365  0001B3             	COM5_OUT_PP	macro
  1366  0001B3             		b0bset	P5M.4
  1367  0001B3             		endm
  1368  0001B3             	COM5_LOW  	macro	
  1369  0001B3             		b0bclr	P5.4
  1370  0001B3             		endm
  1371  0001B3             	COM5_HIGH  	macro	
  1372  0001B3             		b0bset	P5.4
  1373  0001B3             		endm
  1374  0001B3             
  1375  0001B3             	COM4_OUT_PP	macro
  1376  0001B3             		b0bset	P4M.1
  1377  0001B3             		endm
  1378  0001B3             	COM4_LOW  	macro	
  1379  0001B3             		b0bclr	P4.1
  1380  0001B3             		endm
  1381  0001B3             	COM4_HIGH  	macro	
  1382  0001B3             		b0bset	P4.1
  1383  0001B3             		endm
  1384  0001B3             
  1385  0001B3             	COM3_OUT_PP	macro
  1386  0001B3             		b0bset	P4M.0
  1387  0001B3             		endm
  1388  0001B3             	COM3_LOW  	macro	
  1389  0001B3             		b0bclr	P4.0
  1390  0001B3             		endm
  1391  0001B3             	COM3_HIGH  	macro	
  1392  0001B3             		b0bset	P4.0
  1393  0001B3             		endm
  1394  0001B3             
  1395  0001B3             	COM2_OUT_PP	macro
  1396  0001B3             		b0bset	P0M.0
  1397  0001B3             		endm
  1398  0001B3             	COM2_LOW  	macro	
  1399  0001B3             		b0bclr	P0.0
  1400  0001B3             		endm
  1401  0001B3             	COM2_HIGH  	macro	
  1402  0001B3             		b0bset	P0.0
  1403  0001B3             		endm
  1404  0001B3             
  1405  0001B3             	COM1_OUT_PP	macro
  1406  0001B3             		b0bset	P4M.2
  1407  0001B3             		endm
  1408  0001B3             	COM1_LOW  	macro	
  1409  0001B3             		b0bclr	P4.2
  1410  0001B3             		endm
  1411  0001B3             	COM1_HIGH  	macro	
  1412  0001B3             		b0bset	P4.2
  1413  0001B3             		endm
  1414  0001B3             //==========================================================
  1415  0001B3             //函数
  1416  0001B3             
  1417  0001B3             //==========================================================
  1418  0001B3             //此函数在2.5ms中断中调用
  1419  0001B3             	LedScan_ISR macro
  1420  0001B3             		COM_ALL_LOW
  1421  0001B3             		nop
  1422  0001B3             		COM_ALL_INPUT
  1423  0001B3             		
  1424  0001B3             		//if(--_led_scan_index == 0)
  1425  0001B3             		//{
  1426  0001B3             		//	_led_scan_index = 6;
  1427  0001B3             		//}
  1428  0001B3             		decms	_led_scan_index
  1429  0001B3             		jmp	$ + 3
  1430  0001B3             		mov	a,#(6)
  1431  0001B3             		b0mov	_led_scan_index,a
  1432  0001B3             		
  1433  0001B3             		mov	a,_led_scan_index
  1434  0001B3             		sub	a,#(1)
  1435  0001B3             		@JMP_A	6
  1436  0001B3             		jmp	LedScan_ISR_COM1
  1437  0001B3             		jmp	LedScan_ISR_COM2
  1438  0001B3             		jmp	LedScan_ISR_COM3
  1439  0001B3             		jmp	LedScan_ISR_COM4
  1440  0001B3             		jmp	LedScan_ISR_COM5
  1441  0001B3             		jmp	LedScan_ISR_COM6
  1442  0001B3             	LedScan_ISR_COM1:
  1443  0001B3             		b0bts1 _disp_map+0.7
  1444  0001B3             		jmp	$+3
  1445  0001B3             		COM4_HIGH
  1446  0001B3             		COM4_OUT_PP
  1447  0001B3             		
  1448  0001B3             		b0bts1 _disp_map+1.7
  1449  0001B3             		jmp	$+3
  1450  0001B3             		COM5_HIGH
  1451  0001B3             		COM5_OUT_PP
  1452  0001B3             		
  1453  0001B3             		b0bts1 _disp_map+2.7
  1454  0001B3             		jmp	$+3
  1455  0001B3             		COM6_HIGH
  1456  0001B3             		COM6_OUT_PP
  1457  0001B3             
  1458  0001B3             		COM3_LOW
  1459  0001B3             		COM3_OUT_PP
  1460  0001B3             		jmp	LedScan_ISR_END
  1461  0001B3             	LedScan_ISR_COM2:
  1462  0001B3             		b0bts1 _disp_map+0.0
  1463  0001B3             		jmp	$+3
  1464  0001B3             		COM2_HIGH
  1465  0001B3             		COM2_OUT_PP
  1466  0001B3             	
  1467  0001B3             		b0bts1 _disp_map+0.1
  1468  0001B3             		jmp	$+3
  1469  0001B3             		COM3_HIGH
  1470  0001B3             		COM3_OUT_PP
  1471  0001B3             	
  1472  0001B3             		b0bts1 _disp_map+0.2
  1473  0001B3             		jmp	$+3
  1474  0001B3             		COM4_HIGH
  1475  0001B3             		COM4_OUT_PP
  1476  0001B3             	
  1477  0001B3             		b0bts1 _disp_map+0.3
  1478  0001B3             		jmp	$+3
  1479  0001B3             		COM5_HIGH
  1480  0001B3             		COM5_OUT_PP
  1481  0001B3             	
  1482  0001B3             		b0bts1 _disp_map+0.4
  1483  0001B3             		jmp	$+3
  1484  0001B3             		COM6_HIGH
  1485  0001B3             		COM6_OUT_PP
  1486  0001B3             		
  1487  0001B3             		COM1_LOW
  1488  0001B3             		COM1_OUT_PP
  1489  0001B3             		jmp	LedScan_ISR_END
  1490  0001B3             	LedScan_ISR_COM3:
  1491  0001B3             		b0bts1 _disp_map+1.0
  1492  0001B3             		jmp	$+3
  1493  0001B3             		COM2_LOW
  1494  0001B3             		COM2_OUT_PP
  1495  0001B3             	
  1496  0001B3             		b0bts1 _disp_map+1.1
  1497  0001B3             		jmp	$+3
  1498  0001B3             		COM3_LOW
  1499  0001B3             		COM3_OUT_PP
  1500  0001B3             	
  1501  0001B3             		b0bts1 _disp_map+1.2
  1502  0001B3             		jmp	$+3
  1503  0001B3             		COM4_LOW
  1504  0001B3             		COM4_OUT_PP
  1505  0001B3             	
  1506  0001B3             		b0bts1 _disp_map+1.3
  1507  0001B3             		jmp	$+3
  1508  0001B3             		COM5_LOW
  1509  0001B3             		COM5_OUT_PP
  1510  0001B3             	
  1511  0001B3             		b0bts1 _disp_map+1.4
  1512  0001B3             		jmp	$+3
  1513  0001B3             		COM6_LOW
  1514  0001B3             		COM6_OUT_PP
  1515  0001B3             		
  1516  0001B3             		COM1_HIGH
  1517  0001B3             		COM1_OUT_PP
  1518  0001B3             		jmp	LedScan_ISR_END
  1519  0001B3             	LedScan_ISR_COM4:
  1520  0001B3             		b0bts1 _disp_map+0.5
  1521  0001B3             		jmp	$+3
  1522  0001B3             		COM3_HIGH
  1523  0001B3             		COM3_OUT_PP
  1524  0001B3             
  1525  0001B3             		b0bts1 _disp_map+0.6
  1526  0001B3             		jmp	$+3
  1527  0001B3             		COM4_HIGH
  1528  0001B3             		COM4_OUT_PP
  1529  0001B3             
  1530  0001B3             		b0bts1 _disp_map+1.5
  1531  0001B3             		jmp	$+3
  1532  0001B3             		COM5_HIGH
  1533  0001B3             		COM5_OUT_PP
  1534  0001B3             
  1535  0001B3             		b0bts1 _disp_map+1.6
  1536  0001B3             		jmp	$+3
  1537  0001B3             		COM6_HIGH
  1538  0001B3             		COM6_OUT_PP
  1539  0001B3             		
  1540  0001B3             		COM2_LOW
  1541  0001B3             		COM2_OUT_PP
  1542  0001B3             		jmp	LedScan_ISR_END
  1543  0001B3             	LedScan_ISR_COM5:
  1544  0001B3             		b0bts1 _disp_map+2.0
  1545  0001B3             		jmp	$+3
  1546  0001B3             		COM3_LOW
  1547  0001B3             		COM3_OUT_PP
  1548  0001B3             
  1549  0001B3             		b0bts1 _disp_map+2.1
  1550  0001B3             		jmp	$+3
  1551  0001B3             		COM4_LOW
  1552  0001B3             		COM4_OUT_PP
  1553  0001B3             
  1554  0001B3             		b0bts1 _disp_map+2.2
  1555  0001B3             		jmp	$+3
  1556  0001B3             		COM5_LOW
  1557  0001B3             		COM5_OUT_PP
  1558  0001B3             
  1559  0001B3             		b0bts1 _disp_map+2.3
  1560  0001B3             		jmp	$+3
  1561  0001B3             		COM6_LOW
  1562  0001B3             		COM6_OUT_PP
  1563  0001B3             
  1564  0001B3             		COM2_HIGH
  1565  0001B3             		COM2_OUT_PP
  1566  0001B3             		jmp	LedScan_ISR_END
  1567  0001B3             	LedScan_ISR_COM6:
  1568  0001B3             		b0bts1 _disp_map+2.4
  1569  0001B3             		jmp	$+3
  1570  0001B3             		COM4_LOW
  1571  0001B3             		COM4_OUT_PP
  1572  0001B3             
  1573  0001B3             		b0bts1 _disp_map+2.5
  1574  0001B3             		jmp	$+3
  1575  0001B3             		COM5_LOW
  1576  0001B3             		COM5_OUT_PP
  1577  0001B3             
  1578  0001B3             		b0bts1 _disp_map+2.6
  1579  0001B3             		jmp	$+3
  1580  0001B3             		COM6_LOW
  1581  0001B3             		COM6_OUT_PP
  1582  0001B3             
  1583  0001B3             		COM3_HIGH
  1584  0001B3             		COM3_OUT_PP
  1585  0001B3             	LedScan_ISR_END:
  1586  0001B3             		endm
  1587  0001B3             
  1588  0001B3             //==================================================================================================
  1589  0001B3             
  1590  0001B3             //==================================================================================================
  1591  0001B3             
  1592  0001B3             //==================================================================================================
  1593  0001B3             
  1594  0001B3             //==================================================================================================	
  1595  0001B3             //在main中每50ms调用一次
  1596  0001B3             DisplayFuntion	macro
  1597  0001B3             		decms	_disp_swap_dly
  1598  0001B3             		jmp	DisplayFuntion_start_0
  1599  0001B3             		mov	a,#(SYSTEM_TICK * 5)
  1600  0001B3             		b0mov	_disp_swap_dly,a
  1601  0001B3             		
  1602  0001B3             		b0bts1  _input_power_flag
  1603  0001B3             		jmp	$+3
  1604  0001B3             		b0bts1	_disp_voltage_flag
  1605  0001B3             		jmp	$+3
  1606  0001B3             		b0bclr  _disp_voltage_flag
  1607  0001B3             		jmp	$+2
  1608  0001B3             		b0bset	_disp_voltage_flag
  1609  0001B3             
  1610  0001B3             	DisplayFuntion_start_0:	
  1611  0001B3             		b0bts0	_lcd_init_flag
  1612  0001B3             		jmp	DisplayFuntion_start
  1613  0001B3             		//if(_disp_update_dly) 
  1614  0001B3             		//{
  1615  0001B3             		//	--_disp_update_dly;
  1616  0001B3             		//	return;
  1617  0001B3             		//}
  1618  0001B3             		mov	a,#(0)
  1619  0001B3             		cmprs	a,_disp_update_dly
  1620  0001B3             		jmp	$ + 2
  1621  0001B3             		jmp	$ + 3
  1622  0001B3             		decms	_disp_update_dly
  1623  0001B3             		jmp	DisplayFuntion_END
  1624  0001B3             
  1625  0001B3             		b0bset	_lcd_init_flag
  1626  0001B3             		mov	a,#(20)
  1627  0001B3             		b0mov	_disp_update_dly,a
  1628  0001B3             
  1629  0001B3             	DisplayFuntion_start:	
  1630  0001B3             		mov	a,#(0x00)
  1631  0001B3             		b0mov	_disp_map + 0, a
  1632  0001B3             		b0mov	_disp_map + 1, a
  1633  0001B3             		b0mov	_disp_map + 2, a
  1634  0001B3             
  1635  0001B3             		b0bts0	_disp_voltage_flag
  1636  0001B3             		jmp	$+3
  1637  0001B3             		mov	a,_cur_batt_capacity
  1638  0001B3             		jmp	$+2
  1639  0001B3             		mov	a,_cur_input_volgate
  1640  0001B3             
  1641  0001B3             	DisplayFuntion_bai_wei:
  1642  0001B3             		b0mov	_d_math_input0+0,a
  1643  0001B3             		mov	a,#(100)
  1644  0001B3             		b0mov	_d_math_input1+0,a
  1645  0001B3             		call	__div_u8_u8	
  1646  0001B3             		
  1647  0001B3             		b0mov	Y,#led_num_tab$M
  1648  0001B3             		b0mov	Z,#led_num_tab$L
  1649  0001B3             		b0mov	A,_d_math_output0+0	//百位
  1650  0001B3             		add	Z,A
  1651  0001B3             		movc
  1652  0001B3             		b0mov	_disp_map+0,a
  1653  0001B3             	DisplayFuntion_shi_wei:
  1654  0001B3             		b0mov	a,_d_math_output1+0
  1655  0001B3             		b0mov	_d_math_input0+0,a
  1656  0001B3             		mov	a,#(10)
  1657  0001B3             		b0mov	_d_math_input1+0,a
  1658  0001B3             		call	__div_u8_u8
  1659  0001B3             
  1660  0001B3             		b0mov	Y,#led_num_tab$M
  1661  0001B3             		b0mov	Z,#led_num_tab$L
  1662  0001B3             		b0mov	A,_d_math_output0+0	//十位
  1663  0001B3             		add	Z,A
  1664  0001B3             		movc
  1665  0001B3             		b0mov	_disp_map+1,a
  1666  0001B3             	DisplayFuntion_ge_wei:
  1667  0001B3             		b0mov	Z,#led_num_tab$L
  1668  0001B3             		b0mov	A,_d_math_output1+0	//个位
  1669  0001B3             		add	Z,A
  1670  0001B3             		movc
  1671  0001B3             		b0mov	_disp_map+2,a
  1672  0001B3             
  1673  0001B3             		b0bts1	_disp_voltage_flag
  1674  0001B3             		jmp	DisplayFuntion_END
  1675  0001B3             
  1676  0001B3             		mov	a,#(LCD_DP)
  1677  0001B3             		or	_disp_map+2,a
  1678  0001B3             	DisplayFuntion_END:
  1679  0001B3             		endm
  1680  0001B3             //==================================================================================================
  1681  0001B3             	DisplayInit macro
  1682  0001B3             		mov	a,#(2)
  1683  0001B3             		mov	_led_scan_index,a
  1684  0001B3             		mov	_disp_swap_dly,a
  1685  0001B3             
  1686  0001B3             		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1687  0001B3             		b0mov	_disp_update_dly,a
  1688  0001B3             		mov	a,#(0xFF)
  1689  0001B3             		b0mov	_disp_map + 0, a
  1690  0001B3             		b0mov	_disp_map + 1, a
  1691  0001B3             		b0mov	_disp_map + 2, a
  1692  0001B3             
  1693  0001B3             		mov	a,#(123)
  1694  0001B3             		b0mov	_cur_input_volgate,a
  1695  0001B3             		mov	a,#(99)
  1696  0001B3             		b0mov	_cur_batt_capacity,a
  1697  0001B3             		endm
  1698  0001B3             //==================================================================================================
  1699  0001B3             /*	_disp_map[3]
  1700  0001B3             	b00->A2  b10->A3  b20->A4
  1701  0001B3             	b01->B2  b11->B3  b21->B4
  1702  0001B3             	b02->C2  b12->C3  b22->C4
  1703  0001B3             	b03->D2  b13->D3  b23->D4
  1704  0001B3             	b04->E2  b14->E3  b24->E4
  1705  0001B3             	b05->F2  b15->F3  b25->F4
  1706  0001B3             	b06->G2  b16->G3  b26->G4
  1707  0001B3             	b07->B1  b17->C1  b27->DP
  1708  0001B3             */
  1709  0001B3             //==================================================================================================
  1710  E 00000001         	LCD_A	equ	0x01
  1711  E 00000002         	LCD_B	equ     0x02
  1712  E 00000004         	LCD_C	equ     0x04
  1713  E 00000008         	LCD_D	equ     0x08
  1714  E 00000010         	LCD_E	equ     0x10
  1715  E 00000020         	LCD_F	equ     0x20
  1716  E 00000040         	LCD_G	equ     0x40
  1717  E 00000080         	LCD_H	equ    	0x80
  1718  E 00000080         	LCD_DP	equ    	0x80
  1719  0001B3             	led_num_tab:
  1720  0001B3   003F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F		/* 0 */
  1721  0001B4   0006(1)  		dw	LCD_B | LCD_C                                          	/* 1 */
  1722  0001B5   005B(1)  		dw	LCD_A | LCD_B | LCD_D | LCD_E | LCD_G                  	/* 2 */
  1723  0001B6   004F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_G                  	/* 3 */
  1724  0001B7   0066(1)  		dw	LCD_B | LCD_C | LCD_F | LCD_G                         	/* 4 */
  1725  0001B8   006D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_F | LCD_G                  	/* 5 */
  1726  0001B9   007D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G          	/* 6 */
  1727  0001BA   0027(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_F                          	/* 7 */
  1728  0001BB   007F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G  	/* 8 */
  1729  0001BC   006F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_F | LCD_G          	/* 9 */
  1730  0001BD             		//dw	LCD_A | LCD_B | LCD_C | LCD_E | LCD_F | LCD_G          	/* a */
  1731  0001BD             		//dw	LCD_C | LCD_D | LCD_E | LCD_F | LCD_G                  	/* b */
  1732  0001BD             		//dw	LCD_A | LCD_D | LCD_E | LCD_F                          	/* c */
  1733  0001BD             		//dw	LCD_B | LCD_C | LCD_D | LCD_E | LCD_G                  	/* d */
  1734  0001BD             		//dw	LCD_A | LCD_D | LCD_E | LCD_F | LCD_G                  	/* e */
  1735  0001BD             		//dw	LCD_A | LCD_E | LCD_F | LCD_G              		/* f */
  1736  0001BD             //==================================================================================================
  1737  0001BD             //==========================================================
  1738  0001BD             //end files
  1739  0001BD             
  1740  0001BD             
  1741  0001BD             //==============================================================================
  1742  0001BD             ;-------------------------------------------------------------------------------
  1743  0001BD             ; ClrRAM
  1744  0001BD             ; Use index @YZ to clear RAM 
  1745  0001BD             ;-------------------------------------------------------------------------------
  1746  0001BD             __ClrRAM macro
  1747  0001BD             	CLR 		Y
  1748  0001BD             	B0MOV		Z,#0x3f
  1749  0001BD             ClrRAM10:
  1750  0001BD             	CLR 		@YZ
  1751  0001BD             	DECMS		Z
  1752  0001BD             	JMP 		ClrRAM10
  1753  0001BD             	CLR 		@YZ
  1754  0001BD             	endm
  1755  0001BD             
  1756  0001BD             reset:
  1757  0001BD             //_IO_Setting:
  1758  0001BD   2D0F(1)   	MOV A, #(0x0F)
  1759  0001BE   2FB8(1)    	B0MOV P0M, A	//P0 Input-Output value
  1760  0001BF   2D00(1)    	MOV A, #(0x00)
  1761  0001C0   2FE0(1)    	B0MOV P0UR, A	//P0 pull up value
  1762  0001C1   1E00(1)    	MOV A, 0x00
  1763  0001C2   2FD0(1)    	B0MOV P0, A	//P0 register value
  1764  0001C3             
  1765  0001C3   2D07(1)    	MOV A, #(0x07)
  1766  0001C4   2FC4(1)    	B0MOV P4M, A		//P4 Input-Output value
  1767  0001C5   2D00(1)    	MOV A, #(0x00)
  1768  0001C6   2FE4(1)    	B0MOV P4UR, A		//P4 pull up value
  1769  0001C7   2D08(1)    	MOV A, #(0x08)
  1770  0001C8   2FAE(1)    	B0MOV P4CON, A		//P4 Analog-Digital value
  1771  0001C9   1E00(1)    	MOV A, 0x00
  1772  0001CA   2FD4(1)    	B0MOV P4, A		//P4 register value
  1773  0001CB             
  1774  0001CB   2D18(1)    	MOV A, #(0x18)
  1775  0001CC   2FC5(1)    	B0MOV P5M, A		//P5 Input-Output value
  1776  0001CD   2D00(1)    	MOV A, #(0x00)
  1777  0001CE   2FE5(1)    	B0MOV P5UR, A		//P5 pull up value
  1778  0001CF   1E00(1)    	MOV A, 0x00
  1779  0001D0   2FD5(1)    	B0MOV P5, A	        //P5 register value
  1780  0001D1             //_Timer_Setting:
  1781  0001D1   2D24(1)  	MOV A, #0x24
  1782  0001D2   2FDA(1)  	B0MOV TC0M, A	//TC0M register value, Fcpu: 4.000000MHZ
  1783  0001D3   62D8(1)  	B0BCLR FTC0X8 //CLK source: Fcpu
  1784  0001D4   2D64(1)  	MOV A, #(0x64)
  1785  0001D5   2FDB(1)  	B0MOV TC0C, A	//TC0C register value, time: 2.500000ms(400.000000HZ)
  1786  0001D6   2D64(1)  	MOV A, #(0x64)
  1787  0001D7   2FCD(1)  	B0MOV TC0R, A	//TC0R register value
  1788  0001D8   65C8(1)  	B0BCLR FTC0IRQ
  1789  0001D9   6DC9(1)  	B0BSET FTC0IEN	//TC0 Interrupt enable
  1790  0001DA   63DA(1)  	B0BCLR FTC0CKS
  1791  0001DB   6FDA(1)  	B0BSET FTC0ENB	//TC0 enable
  1792  0001DC   69D8(1)  	B0BSET FTC0GN
  1793  0001DD             	
  1794  0001DD             	__ClrRAM
  1795  0001DD   2B84(1)  	CLR 		Y
  1796  0001DE   333F(1)  	B0MOV		Z,#0x3f
  1797  0001DF   2BE7(1)  	CLR 		@YZ
  1798  0001E0   2683(1+S)  	DECMS		Z
  1799  0001E1   81DF(2)  	JMP 		ClrRAM10
  1800  0001E2   2BE7(1)  	CLR 		@YZ
  1801  0001E3             	SensorInit
  1802  0001E3             	KeyInit
  1803  0001E3   2D10(1)  		mov	a,#(KEY_VALUE_NOKEY)
  1804  0001E4   2F23(1)  		b0mov	key_value_tmp,a
  1805  0001E5   2F24(1)  		b0mov	key_value_old,a
  1806  0001E6   2F25(1)  		b0mov	key_value_cur,a
  1807  0001E7             	DisplayInit
  1808  0001E7   2D02(1)  		mov	a,#(2)
  1809  0001E8   1F18(1)  		mov	_led_scan_index,a
  1810  0001E9   1F13(1)  		mov	_disp_swap_dly,a
  1811  0001EA   2D28(1)  		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1812  0001EB   2F14(1)  		b0mov	_disp_update_dly,a
  1813  0001EC   2DFF(1)  		mov	a,#(0xFF)
  1814  0001ED   2F15(1)  		b0mov	_disp_map + 0, a
  1815  0001EE   2F16(1)  		b0mov	_disp_map + 1, a
  1816  0001EF   2F17(1)  		b0mov	_disp_map + 2, a
  1817  0001F0   2D7B(1)  		mov	a,#(123)
  1818  0001F1   2F1E(1)  		b0mov	_cur_input_volgate,a
  1819  0001F2   2D63(1)  		mov	a,#(99)
  1820  0001F3   2F1F(1)  		b0mov	_cur_batt_capacity,a
  1821  0001F4             
  1822  0001F4   6FDF(1)    	B0BSET FGIE
  1823  0001F5   6000(1)  	b0bclr	system_idle_flag
  1824  0001F6   2D64(1)  	mov	a,#(SYSTEM_TICK * 5)
  1825  0001F7   2F04(1)  	b0mov	_enter_idle_dly,a
  1826  0001F8             public _main
  1827  0001F8             _main:
  1828  0001F8   2D5A(1)  	MOV 	A, #(0x5A)
  1829  0001F9   2FCC(1)    	B0MOV 	WDTR, A
  1830  0001FA             	
  1831  0001FA   7000(1+S)  	b0bts0  system_idle_flag
  1832  0001FB   832D(2)  	jmp	_main_system_idle_function
  1833  0001FC             //====================================================================
  1834  0001FC             //NORMAL
  1835  0001FC   7900(1+S)    	b0bts1	system_tick_flag
  1836  0001FD   81F8(2)  	jmp	_main
  1837  0001FE   6100(1)  	b0bclr	system_tick_flag
  1838  0001FF             //================================================
  1839  0001FF             		SensorFuntion
  1840  0001FF   1622(1+S)  		incms	_adc_ch_dly
  1841  000200   0000(1)  		nop
  1842  000201   2E22(1)  		b0mov	a,_adc_ch_dly
  1843  000202   240A(1)  		sub	a,#(10)
  1844  000203   7A86(1+S)  		b0bts1	fc
  1845  000204   8220(2)  		jmp	SensorFuntion_END  		
  1846  000205   2B22(1)  		clr	_adc_ch_dly
  1847  000206   2E19(1)  		b0mov	a,_adc_ch_index
  1848  000207   03CE(1)  	b0add PCl ,a
  1849  000208   820B(2)  		jmp	SensorFuntion_BATT   
  1850  000209   8212(2)  		jmp	SensorFuntion_INPUT   
  1851  00020A   8219(2)  		jmp	SensorFuntion_OUTPUT
  1852  00020B   2D95(1)  		mov	a,#(5 | BIT4 | BIT7)
  1853  00020C   2FB1(1)  		b0mov	ADM,a
  1854  00020D   C076(2)  		call	SensorADConvert
  1855  00020E   C094(2)                  call	SensorMathBattCapacity
  1856  00020F   2D01(1)  		mov	a,#(1)
  1857  000210   2F19(1)  		b0mov	_adc_ch_index,a
  1858  000211   8220(2)  		jmp	SensorFuntion_END
  1859  000212   2D93(1)  		mov	a,#(3 | BIT4 | BIT7)
  1860  000213   2FB1(1)  		b0mov	ADM,a
  1861  000214   C076(2)  		call	SensorADConvert
  1862  000215   C198(2)  		call	SensorMathInputVolgate
  1863  000216   2D02(1)  		mov	a,#(2)
  1864  000217   2F19(1)  		b0mov	_adc_ch_index,a
  1865  000218   8220(2)  		jmp	SensorFuntion_END
  1866  000219   7CD4(1+S)  		b0bts1	P4.4
  1867  00021A   821D(2)  		jmp	$+3
  1868  00021B   6F00(1)  		b0bset 	_is_output_en_flag
  1869  00021C   821E(2)  		jmp	$+2
  1870  00021D   6700(1)  		b0bclr	_is_output_en_flag
  1871  00021E   2D00(1)  		mov	a,#(0)
  1872  00021F   2F19(1)  		b0mov	_adc_ch_index,a
  1873  000220             	 	KeyFuntion
  1874  000220   2ED0(1)  		b0mov	a,P0
  1875  000221   2A10(1)  		and	a,#(0x10)
  1876  000222   0724(1+S)  		cmprs	a,key_value_old  	//key_value_old == A ?
  1877  000223   8225(2)  		jmp	$+2
  1878  000224   8227(2)  		jmp	$+3
  1879  000225   2F24(1)  		b0mov	key_value_old,a		//key_value_old = A
  1880  000226   827A(2)  		jmp	KeyFuntion_END
  1881  000227   0610(1+S)  		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == A ?
  1882  000228   822A(2)  		jmp	KeyScan_Press
  1883  000229   8255(2)  		jmp	KeyScan_Up
  1884  00022A   2E24(1)  		b0mov	a,key_value_old
  1885  00022B   0725(1+S)  		cmprs	a,key_value_cur		//key_value_cur != key_value_old ?
  1886  00022C   822E(2)  		jmp	$+2
  1887  00022D   8235(2)  		jmp	KeyScan_Keep_dly
  1888  00022E   2F25(1)  		b0mov	key_value_cur,a		//key_value_cur = key_value_old
  1889  00022F   2D01(1)  		mov	a,#(KEY_STATUS_PRESS)
  1890  000230   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_PRESS
  1891  000231   2B26(1)  		clr	key_hold_tick		//key_hold_tick = 0
  1892  000232   2D14(1)  		mov	a,#(KEY_STEP_TICK)	
  1893  000233   2F28(1)  		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_STEP_TICK
  1894  000234   827A(2)  		jmp	KeyFuntion_END
  1895  000235   1626(1+S)  		incms	key_hold_tick
  1896  000236   8239(2)  		jmp	$+3
  1897  000237   2626(1+S)  		decms	key_hold_tick
  1898  000238   0000(1)  		nop
  1899  000239   2628(1+S)  		decms	key_repeat_tick
  1900  00023A   827A(2)  		jmp	KeyFuntion_END
  1901  00023B   2D06(1)  		mov	a,#(KEY_LINK_TICK)
  1902  00023C   2F28(1)  		b0mov	key_repeat_tick,a	//key_repeat_tick = KEY_LINK_TICK
  1903  00023D   2E27(1)  		b0mov	a,key_state_cur
  1904  00023E   0601(1+S)  		cmprs	a,#(KEY_STATUS_PRESS)	//key_state_cur == KEY_STATUS_PRESS ?
  1905  00023F   8242(2)  		jmp	KeyScan_Keeped
  1906  000240   2D02(1)  		mov	a,#(KEY_STATUS_KEEP)
  1907  000241   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_KEEP
  1908  000242   2E26(1)  		b0mov	a,key_hold_tick
  1909  000243   2428(1)  		sub	a,#(SYSTEM_TICK*2)
  1910  000244   7286(1+S)  		b0bts0	fc
  1911  000245   8247(2)  		jmp	KeyKeepFunction_Long
  1912  000246   8254(2)  		jmp	KeyKeepFunction_END
  1913  000247   7001(1+S)  		b0bts0	_key_long_flag
  1914  000248   8254(2)  		jmp	KeyKeepFunction_END
  1915  000249   6801(1)  		b0bset	_key_long_flag
  1916  00024A   7500(1+S)  		b0bts0	_led_on_off_flag
  1917  00024B   8250(2)  		jmp	KeyKeepFunction_Long_1
  1918  00024C   6D00(1)  		b0bset	_led_on_off_flag
  1919  00024D   2D05(1)  		mov	a,#(5)
  1920  00024E   2F29(1)  		b0mov	_led_mode,a
  1921  00024F   8254(2)  		jmp	KeyKeepFunction_END
  1922  000250   6500(1)  		b0bclr	_led_on_off_flag
  1923  000251   63D5(1)  		b0bclr	P5.3
  1924  000252   62D0(1)  		b0bclr	P0.2
  1925  000253   63D0(1)  		b0bclr	P0.3
  1926  000254   827A(2)  		jmp	KeyFuntion_END
  1927  000255   2E25(1)  		b0mov	a,key_value_cur
  1928  000256   0610(1+S)  		cmprs	a,#(KEY_VALUE_NOKEY)	//KEY_VALUE_NOKEY == key_value_cur ?
  1929  000257   8259(2)  		jmp	$+2
  1930  000258   827A(2)  		jmp	KeyFuntion_END
  1931  000259   2D04(1)  		mov	a,#(KEY_STATUS_UP)
  1932  00025A   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_UP
  1933  00025B   2E26(1)  		b0mov	a,key_hold_tick
  1934  00025C   2414(1)  		sub	a,#(SYSTEM_TICK)
  1935  00025D   7286(1+S)  		b0bts0	fc
  1936  00025E   8273(2)  		jmp	KeyUpFunction_long
  1937  00025F   7D00(1+S)  		b0bts1	_led_on_off_flag
  1938  000260   8273(2)  		jmp	KeyUpFunction_END
  1939  000261   2629(1+S)  		decms	_led_mode
  1940  000262   8265(2)  		jmp	KeyUpFunction_Short_MOD1
  1941  000263   2D05(1)  		mov	a,#(5)
  1942  000264   2F29(1)  		b0mov	_led_mode,a
  1943  000265   2D01(1)  		mov	a,#(1)
  1944  000266   2F2B(1)  		b0mov	_led_dly,a
  1945  000267   2D01(1)  		mov	a,#(1)       
  1946  000268   0729(1+S)  		cmprs	a,_led_mode  
  1947  000269   826D(2)  		jmp	KeyUpFunction_Short_MOD2
  1948  00026A   2D0A(1)  		mov	a,#(10)
  1949  00026B   2F2A(1)  		b0mov	_led_mode_sub,a
  1950  00026C   8273(2)  		jmp	KeyUpFunction_END
  1951  00026D   2D02(1)  		mov	a,#(2)       
  1952  00026E   0729(1+S)  		cmprs	a,_led_mode  
  1953  00026F   8273(2)  		jmp	KeyUpFunction_END
  1954  000270   2D0C(1)  		mov	a,#(12)
  1955  000271   2F2A(1)  		b0mov	_led_mode_sub,a
  1956  000272   8273(2)  		jmp	KeyUpFunction_END
  1957  000273   2D10(1)  		mov	a,#(KEY_VALUE_NOKEY)
  1958  000274   2F25(1)  		b0mov	key_value_cur,a
  1959  000275   2D00(1)  		mov	a,#(KEY_STATUS_NOPRESS)
  1960  000276   2F27(1)  		b0mov	key_state_cur,a		//key_state_cur = KEY_STATUS_NOPRESS
  1961  000277   2B28(1)  		clr	key_repeat_tick
  1962  000278   2B26(1)  		clr	key_hold_tick
  1963  000279   6001(1)  		b0bclr	_key_long_flag
  1964  00027A             		LedFunction
  1965  00027A   7D00(1+S)  		b0bts1	_led_on_off_flag
  1966  00027B   82DB(2)  		jmp	LedFunction_Exit
  1967  00027C   2E29(1)  		b0mov	a,_led_mode
  1968  00027D   2401(1)  		sub	a,#(1)
  1969  00027E   03CE(1)  	b0add PCl ,a
  1970  00027F   8284(2)  		jmp	LedFunction_R_FLASH
  1971  000280   82A7(2)  		jmp	LedFunction_RB 
  1972  000281   82CF(2)  		jmp	LedFunction_R
  1973  000282   82D3(2)  		jmp	LedFunction_B
  1974  000283   82D7(2)  		jmp	LedFunction_W
  1975  000284   63D5(1)  		b0bclr	P5.3
  1976  000285   63D0(1)  		b0bclr	P0.3
  1977  000286   262B(1+S)  		decms	_led_dly
  1978  000287   82DB(2)  		jmp	LedFunction_Exit
  1979  000288   62D0(1)  		b0bclr	P0.2
  1980  000289   2E2A(1)  		b0mov	a,_led_mode_sub
  1981  00028A   2401(1)  		sub	a,#(1)
  1982  00028B   03CE(1)  	b0add PCl ,a
  1983  00028C   82A0(2)  		jmp	LedFunction_R_FLASH_OFF_S_2
  1984  00028D   829B(2)  		jmp	LedFunction_R_FLASH_ON_S_2
  1985  00028E   829E(2)  		jmp	LedFunction_R_FLASH_OFF_S_1
  1986  00028F   829B(2)  		jmp	LedFunction_R_FLASH_ON_S_1
  1987  000290   8299(2)  		jmp	LedFunction_R_FLASH_OFF_L_3
  1988  000291   8296(2)  		jmp	LedFunction_R_FLASH_ON_L_3
  1989  000292   8299(2)  		jmp	LedFunction_R_FLASH_OFF_L_2
  1990  000293   8296(2)  		jmp	LedFunction_R_FLASH_ON_L_2
  1991  000294   8299(2)  		jmp	LedFunction_R_FLASH_OFF_L_1
  1992  000295   8296(2)  		jmp	LedFunction_R_FLASH_ON_L_1
  1993  000296   6AD0(1)  		b0bset	P0.2
  1994  000297   2D0A(1)  		mov	a,#(10)
  1995  000298   82A1(2)  		jmp	LedFunction_R_FLASH_END
  1996  000299   2D0A(1)  		mov	a,#(10)
  1997  00029A   82A1(2)  		jmp	LedFunction_R_FLASH_END
  1998  00029B   6AD0(1)  		b0bset	P0.2
  1999  00029C   2D03(1)  		mov	a,#(3)
  2000  00029D   82A1(2)  		jmp	LedFunction_R_FLASH_END
  2001  00029E   2D03(1)  		mov	a,#(3)
  2002  00029F   82A1(2)  		jmp	LedFunction_R_FLASH_END
  2003  0002A0   2D0A(1)  		mov	a,#(10)
  2004  0002A1   2F2B(1)  		b0mov	_led_dly,a
  2005  0002A2   262A(1+S)  		decms	_led_mode_sub
  2006  0002A3   82DB(2)  		jmp	LedFunction_Exit
  2007  0002A4   2D0A(1)  		mov	a,#(10)
  2008  0002A5   2F2A(1)  		b0mov	_led_mode_sub,a
  2009  0002A6   82DB(2)  		jmp	LedFunction_Exit
  2010  0002A7   63D5(1)  		b0bclr	P5.3
  2011  0002A8   262B(1+S)  		decms	_led_dly
  2012  0002A9   82DB(2)  		jmp	LedFunction_Exit
  2013  0002AA   62D0(1)  		b0bclr	P0.2
  2014  0002AB   63D0(1)  		b0bclr	P0.3
  2015  0002AC   2E2A(1)  		b0mov	a,_led_mode_sub
  2016  0002AD   2401(1)  		sub	a,#(1)
  2017  0002AE   03CE(1)  	b0add PCl ,a
  2018  0002AF   82C7(2)  		jmp	LedFunction_RB_B_OFF3
  2019  0002B0   82C2(2)  		jmp	LedFunction_RB_B_ON3
  2020  0002B1   82C5(2)  		jmp	LedFunction_RB_B_OFF2
  2021  0002B2   82C2(2)  		jmp	LedFunction_RB_B_ON2
  2022  0002B3   82C5(2)  		jmp	LedFunction_RB_B_OFF1
  2023  0002B4   82C2(2)  		jmp	LedFunction_RB_B_ON1
  2024  0002B5   82C0(2)  		jmp	LedFunction_RB_R_OFF3
  2025  0002B6   82BB(2)  		jmp	LedFunction_RB_R_ON3
  2026  0002B7   82BE(2)  		jmp	LedFunction_RB_R_OFF2
  2027  0002B8   82BB(2)  		jmp	LedFunction_RB_R_ON2
  2028  0002B9   82BE(2)  		jmp	LedFunction_RB_R_OFF1
  2029  0002BA   82BB(2)  		jmp	LedFunction_RB_R_ON1
  2030  0002BB   6AD0(1)  		b0bset	P0.2
  2031  0002BC   2D03(1)  		mov	a,#(3)
  2032  0002BD   82C9(2)  		jmp	LedFunction_RB_END
  2033  0002BE   2D03(1)  		mov	a,#(3)
  2034  0002BF   82C9(2)  		jmp	LedFunction_RB_END
  2035  0002C0   2D0A(1)  		mov	a,#(10)
  2036  0002C1   82C9(2)  		jmp	LedFunction_RB_END
  2037  0002C2   6BD0(1)  		b0bset	P0.3
  2038  0002C3   2D03(1)  		mov	a,#(3)
  2039  0002C4   82C9(2)  		jmp	LedFunction_RB_END
  2040  0002C5   2D03(1)  		mov	a,#(3)
  2041  0002C6   82C9(2)  		jmp	LedFunction_RB_END
  2042  0002C7   2D0A(1)  		mov	a,#(10)
  2043  0002C8   82C9(2)  		jmp	LedFunction_RB_END
  2044  0002C9   2F2B(1)  		b0mov	_led_dly,a
  2045  0002CA   262A(1+S)  		decms	_led_mode_sub
  2046  0002CB   82DB(2)  		jmp	LedFunction_Exit
  2047  0002CC   2D0C(1)  		mov	a,#(12)
  2048  0002CD   2F2A(1)  		b0mov	_led_mode_sub,a
  2049  0002CE   82DB(2)  		jmp	LedFunction_Exit
  2050  0002CF   63D5(1)  		b0bclr	P5.3
  2051  0002D0   6AD0(1)  		b0bset	P0.2
  2052  0002D1   63D0(1)  		b0bclr	P0.3
  2053  0002D2   82DB(2)  		jmp	LedFunction_Exit
  2054  0002D3   63D5(1)  		b0bclr	P5.3
  2055  0002D4   62D0(1)  		b0bclr	P0.2
  2056  0002D5   6BD0(1)  		b0bset	P0.3
  2057  0002D6   82DB(2)  		jmp	LedFunction_Exit
  2058  0002D7   6BD5(1)  		b0bset	P5.3
  2059  0002D8   62D0(1)  		b0bclr	P0.2
  2060  0002D9   63D0(1)  		b0bclr	P0.3
  2061  0002DA   82DB(2)  		jmp	LedFunction_Exit
  2062  0002DB             		DisplayFuntion
  2063  0002DB   2613(1+S)  		decms	_disp_swap_dly
  2064  0002DC   82E6(2)  		jmp	DisplayFuntion_start_0
  2065  0002DD   2D64(1)  		mov	a,#(SYSTEM_TICK * 5)
  2066  0002DE   2F13(1)  		b0mov	_disp_swap_dly,a
  2067  0002DF   7C00(1+S)  		b0bts1  _input_power_flag
  2068  0002E0   82E3(2)  		jmp	$+3
  2069  0002E1   7B00(1+S)  		b0bts1	_disp_voltage_flag
  2070  0002E2   82E5(2)  		jmp	$+3
  2071  0002E3   6300(1)  		b0bclr  _disp_voltage_flag
  2072  0002E4   82E6(2)  		jmp	$+2
  2073  0002E5   6B00(1)  		b0bset	_disp_voltage_flag
  2074  0002E6   7600(1+S)  		b0bts0	_lcd_init_flag
  2075  0002E7   82F1(2)  		jmp	DisplayFuntion_start
  2076  0002E8   2D00(1)  		mov	a,#(0)
  2077  0002E9   0714(1+S)  		cmprs	a,_disp_update_dly
  2078  0002EA   82EC(2)  		jmp	$ + 2
  2079  0002EB   82EE(2)  		jmp	$ + 3
  2080  0002EC   2614(1+S)  		decms	_disp_update_dly
  2081  0002ED   8318(2)  		jmp	DisplayFuntion_END
  2082  0002EE   6E00(1)  		b0bset	_lcd_init_flag
  2083  0002EF   2D14(1)  		mov	a,#(20)
  2084  0002F0   2F14(1)  		b0mov	_disp_update_dly,a
  2085  0002F1   2D00(1)  		mov	a,#(0x00)
  2086  0002F2   2F15(1)  		b0mov	_disp_map + 0, a
  2087  0002F3   2F16(1)  		b0mov	_disp_map + 1, a
  2088  0002F4   2F17(1)  		b0mov	_disp_map + 2, a
  2089  0002F5   7300(1+S)  		b0bts0	_disp_voltage_flag
  2090  0002F6   82F9(2)  		jmp	$+3
  2091  0002F7   1E1F(1)  		mov	a,_cur_batt_capacity
  2092  0002F8   82FA(2)  		jmp	$+2
  2093  0002F9   1E1E(1)  		mov	a,_cur_input_volgate
  2094  0002FA   2F05(1)  		b0mov	_d_math_input0+0,a
  2095  0002FB   2D64(1)  		mov	a,#(100)
  2096  0002FC   2F08(1)  		b0mov	_d_math_input1+0,a
  2097  0002FD   C020(2)  		call	__div_u8_u8	
  2098  0002FE   3401(1)  		b0mov	Y,#led_num_tab$M
  2099  0002FF   33B3(1)  		b0mov	Z,#led_num_tab$L
  2100  000300   2E0B(1)  		b0mov	A,_d_math_output0+0	//百位
  2101  000301   1383(1)  		add	Z,A
  2102  000302   0D00(2)  		movc
  2103  000303   2F15(1)  		b0mov	_disp_map+0,a
  2104  000304   2E0E(1)  		b0mov	a,_d_math_output1+0
  2105  000305   2F05(1)  		b0mov	_d_math_input0+0,a
  2106  000306   2D0A(1)  		mov	a,#(10)
  2107  000307   2F08(1)  		b0mov	_d_math_input1+0,a
  2108  000308   C020(2)  		call	__div_u8_u8
  2109  000309   3401(1)  		b0mov	Y,#led_num_tab$M
  2110  00030A   33B3(1)  		b0mov	Z,#led_num_tab$L
  2111  00030B   2E0B(1)  		b0mov	A,_d_math_output0+0	//十位
  2112  00030C   1383(1)  		add	Z,A
  2113  00030D   0D00(2)  		movc
  2114  00030E   2F16(1)  		b0mov	_disp_map+1,a
  2115  00030F   33B3(1)  		b0mov	Z,#led_num_tab$L
  2116  000310   2E0E(1)  		b0mov	A,_d_math_output1+0	//个位
  2117  000311   1383(1)  		add	Z,A
  2118  000312   0D00(2)  		movc
  2119  000313   2F17(1)  		b0mov	_disp_map+2,a
  2120  000314   7B00(1+S)  		b0bts1	_disp_voltage_flag
  2121  000315   8318(2)  		jmp	DisplayFuntion_END
  2122  000316   2D80(1)  		mov	a,#(LCD_DP)
  2123  000317   1917(1)  		or	_disp_map+2,a
  2124  000318             		//GreenMode
  2125  000318             //================================================
  2126  000318   7400(1+S)  		b0bts0	_input_power_flag
  2127  000319   81F8(2)  		jmp	_main
  2128  00031A   7500(1+S)  		b0bts0	_led_on_off_flag
  2129  00031B   81F8(2)  		jmp	_main
  2130  00031C   7700(1+S)  		b0bts0	_is_output_en_flag
  2131  00031D   81F8(2)  		jmp	_main
  2132  00031E             
  2133  00031E   2604(1+S)  		decms	_enter_idle_dly
  2134  00031F   81F8(2)  		jmp	_main
  2135  000320             		
  2136  000320             _main_system_normal_function_enter_idle:
  2137  000320   67DA(1)  		b0bclr	FTC0ENB			//stop timer
  2138  000321             		COM_ALL_LOW			//turnoff disp
  2139  000321   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2140  000322   29D0(1)  		and	P0,a
  2141  000323   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2142  000324   29D4(1)  		and	P4,a
  2143  000325   2DEF(1)  		mov	a,#(~(BIT4))
  2144  000326   29D5(1)  		and	P5,a
  2145  000327             
  2146  000327   2D00(1)  		mov	a,#(0)
  2147  000328   2FB1(1)  		b0mov	ADM,a
  2148  000329             
  2149  000329   6800(1)  		b0bset	system_idle_flag
  2150  00032A             		SlowMode
  2151  00032A   6ACA(1)  		B0BSET	FCLKMD
  2152  00032B   69CA(1)  		B0BSET	FSTPHX
  2153  00032C   81F8(2)  		jmp	_main
  2154  00032D             //====================================================================
  2155  00032D             //IDLE
  2156  00032D             _main_system_idle_function:
  2157  00032D                     	SensorFuntion_IDLE
  2158  00032D   7CD4(1+S)  		b0bts1	P4.4
  2159  00032E   8331(2)  		jmp	$+3
  2160  00032F   6F00(1)  		b0bset 	_is_output_en_flag
  2161  000330   8332(2)  		jmp	$+2
  2162  000331   6700(1)  		b0bclr	_is_output_en_flag
  2163  000332             
  2164  000332   7CD0(1+S)  		b0bts1	KEY_INPUT
  2165  000333   833B(2)  		jmp	_main_system_idle_function_exit_idle_key
  2166  000334   7400(1+S)  		b0bts0	_input_power_flag
  2167  000335   833D(2)  		jmp	_main_system_idle_function_exit_idle
  2168  000336   7500(1+S)  		b0bts0	_led_on_off_flag
  2169  000337   833D(2)  		jmp	_main_system_idle_function_exit_idle
  2170  000338   7700(1+S)  		b0bts0	_is_output_en_flag
  2171  000339   833D(2)  		jmp	_main_system_idle_function_exit_idle
  2172  00033A   81F8(2)  		jmp	_main
  2173  00033B             _main_system_idle_function_exit_idle_key:
  2174  00033B   2D64(1)  		mov	a,#(SYSTEM_TICK * 5)
  2175  00033C   2F04(1)  		b0mov	_enter_idle_dly,a
  2176  00033D             _main_system_idle_function_exit_idle:
  2177  00033D             		Slow2Normal
  2178  00033D   61CA(1)  		B0BCLR	FSTPHX
  2179  00033E   0000(1)  		NOP
  2180  00033F   0000(1)  		NOP
  2181  000340   0000(1)  		NOP
  2182  000341   62CA(1)  		B0BCLR	FCLKMD
  2183  000342   6000(1)  		b0bclr	system_idle_flag
  2184  000343   6FDA(1)  		b0bset 	FTC0ENB			//start timer
  2185  000344   81F8(2)    	JMP _main
  2186  000345             
  2187  000345             isr:
  2188  000345   0400(1)  	push
  2189  000346   7DC8(1+S)  	b0bts1	FTC0IRQ
  2190  000347   83DC(2)          jmp	isr_exit
  2191  000348   65C8(1)  	b0bclr  FTC0IRQ
  2192  000349             	
  2193  000349             	LedScan_ISR
  2194  000349   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2195  00034A   29D0(1)  		and	P0,a
  2196  00034B   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2197  00034C   29D4(1)  		and	P4,a
  2198  00034D   2DEF(1)  		mov	a,#(~(BIT4))
  2199  00034E   29D5(1)  		and	P5,a
  2200  00034F   0000(1)  		nop
  2201  000350   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2202  000351   29B8(1)  		and	P0M,a
  2203  000352   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2204  000353   29C4(1)  		and	P4M,a
  2205  000354   2DEF(1)  		mov	a,#(~(BIT4))
  2206  000355   29C5(1)  		and	P5M,a
  2207  000356   2618(1+S)  		decms	_led_scan_index
  2208  000357   835A(2)  		jmp	$ + 3
  2209  000358   2D06(1)  		mov	a,#(6)
  2210  000359   2F18(1)  		b0mov	_led_scan_index,a
  2211  00035A   1E18(1)  		mov	a,_led_scan_index
  2212  00035B   2401(1)  		sub	a,#(1)
  2213  00035C   03CE(1)  	b0add PCl ,a
  2214  00035D   8363(2)  		jmp	LedScan_ISR_COM1
  2215  00035E   8372(2)  		jmp	LedScan_ISR_COM2
  2216  00035F   8389(2)  		jmp	LedScan_ISR_COM3
  2217  000360   83A0(2)  		jmp	LedScan_ISR_COM4
  2218  000361   83B3(2)  		jmp	LedScan_ISR_COM5
  2219  000362   83C6(2)  		jmp	LedScan_ISR_COM6
  2220  000363   7F15(1+S)  		b0bts1 _disp_map+0.7
  2221  000364   8367(2)  		jmp	$+3
  2222  000365   69D4(1)  		b0bset	P4.1
  2223  000366   69C4(1)  		b0bset	P4M.1
  2224  000367   7F16(1+S)  		b0bts1 _disp_map+1.7
  2225  000368   836B(2)  		jmp	$+3
  2226  000369   6CD5(1)  		b0bset	P5.4
  2227  00036A   6CC5(1)  		b0bset	P5M.4
  2228  00036B   7F17(1+S)  		b0bts1 _disp_map+2.7
  2229  00036C   836F(2)  		jmp	$+3
  2230  00036D   69D0(1)  		b0bset	P0.1
  2231  00036E   69B8(1)  		b0bset	P0M.1
  2232  00036F   60D4(1)  		b0bclr	P4.0
  2233  000370   68C4(1)  		b0bset	P4M.0
  2234  000371   83D4(2)  		jmp	LedScan_ISR_END
  2235  000372   7815(1+S)  		b0bts1 _disp_map+0.0
  2236  000373   8376(2)  		jmp	$+3
  2237  000374   68D0(1)  		b0bset	P0.0
  2238  000375   68B8(1)  		b0bset	P0M.0
  2239  000376   7915(1+S)  		b0bts1 _disp_map+0.1
  2240  000377   837A(2)  		jmp	$+3
  2241  000378   68D4(1)  		b0bset	P4.0
  2242  000379   68C4(1)  		b0bset	P4M.0
  2243  00037A   7A15(1+S)  		b0bts1 _disp_map+0.2
  2244  00037B   837E(2)  		jmp	$+3
  2245  00037C   69D4(1)  		b0bset	P4.1
  2246  00037D   69C4(1)  		b0bset	P4M.1
  2247  00037E   7B15(1+S)  		b0bts1 _disp_map+0.3
  2248  00037F   8382(2)  		jmp	$+3
  2249  000380   6CD5(1)  		b0bset	P5.4
  2250  000381   6CC5(1)  		b0bset	P5M.4
  2251  000382   7C15(1+S)  		b0bts1 _disp_map+0.4
  2252  000383   8386(2)  		jmp	$+3
  2253  000384   69D0(1)  		b0bset	P0.1
  2254  000385   69B8(1)  		b0bset	P0M.1
  2255  000386   62D4(1)  		b0bclr	P4.2
  2256  000387   6AC4(1)  		b0bset	P4M.2
  2257  000388   83D4(2)  		jmp	LedScan_ISR_END
  2258  000389   7816(1+S)  		b0bts1 _disp_map+1.0
  2259  00038A   838D(2)  		jmp	$+3
  2260  00038B   60D0(1)  		b0bclr	P0.0
  2261  00038C   68B8(1)  		b0bset	P0M.0
  2262  00038D   7916(1+S)  		b0bts1 _disp_map+1.1
  2263  00038E   8391(2)  		jmp	$+3
  2264  00038F   60D4(1)  		b0bclr	P4.0
  2265  000390   68C4(1)  		b0bset	P4M.0
  2266  000391   7A16(1+S)  		b0bts1 _disp_map+1.2
  2267  000392   8395(2)  		jmp	$+3
  2268  000393   61D4(1)  		b0bclr	P4.1
  2269  000394   69C4(1)  		b0bset	P4M.1
  2270  000395   7B16(1+S)  		b0bts1 _disp_map+1.3
  2271  000396   8399(2)  		jmp	$+3
  2272  000397   64D5(1)  		b0bclr	P5.4
  2273  000398   6CC5(1)  		b0bset	P5M.4
  2274  000399   7C16(1+S)  		b0bts1 _disp_map+1.4
  2275  00039A   839D(2)  		jmp	$+3
  2276  00039B   61D0(1)  		b0bclr	P0.1
  2277  00039C   69B8(1)  		b0bset	P0M.1
  2278  00039D   6AD4(1)  		b0bset	P4.2
  2279  00039E   6AC4(1)  		b0bset	P4M.2
  2280  00039F   83D4(2)  		jmp	LedScan_ISR_END
  2281  0003A0   7D15(1+S)  		b0bts1 _disp_map+0.5
  2282  0003A1   83A4(2)  		jmp	$+3
  2283  0003A2   68D4(1)  		b0bset	P4.0
  2284  0003A3   68C4(1)  		b0bset	P4M.0
  2285  0003A4   7E15(1+S)  		b0bts1 _disp_map+0.6
  2286  0003A5   83A8(2)  		jmp	$+3
  2287  0003A6   69D4(1)  		b0bset	P4.1
  2288  0003A7   69C4(1)  		b0bset	P4M.1
  2289  0003A8   7D16(1+S)  		b0bts1 _disp_map+1.5
  2290  0003A9   83AC(2)  		jmp	$+3
  2291  0003AA   6CD5(1)  		b0bset	P5.4
  2292  0003AB   6CC5(1)  		b0bset	P5M.4
  2293  0003AC   7E16(1+S)  		b0bts1 _disp_map+1.6
  2294  0003AD   83B0(2)  		jmp	$+3
  2295  0003AE   69D0(1)  		b0bset	P0.1
  2296  0003AF   69B8(1)  		b0bset	P0M.1
  2297  0003B0   60D0(1)  		b0bclr	P0.0
  2298  0003B1   68B8(1)  		b0bset	P0M.0
  2299  0003B2   83D4(2)  		jmp	LedScan_ISR_END
  2300  0003B3   7817(1+S)  		b0bts1 _disp_map+2.0
  2301  0003B4   83B7(2)  		jmp	$+3
  2302  0003B5   60D4(1)  		b0bclr	P4.0
  2303  0003B6   68C4(1)  		b0bset	P4M.0
  2304  0003B7   7917(1+S)  		b0bts1 _disp_map+2.1
  2305  0003B8   83BB(2)  		jmp	$+3
  2306  0003B9   61D4(1)  		b0bclr	P4.1
  2307  0003BA   69C4(1)  		b0bset	P4M.1
  2308  0003BB   7A17(1+S)  		b0bts1 _disp_map+2.2
  2309  0003BC   83BF(2)  		jmp	$+3
  2310  0003BD   64D5(1)  		b0bclr	P5.4
  2311  0003BE   6CC5(1)  		b0bset	P5M.4
  2312  0003BF   7B17(1+S)  		b0bts1 _disp_map+2.3
  2313  0003C0   83C3(2)  		jmp	$+3
  2314  0003C1   61D0(1)  		b0bclr	P0.1
  2315  0003C2   69B8(1)  		b0bset	P0M.1
  2316  0003C3   68D0(1)  		b0bset	P0.0
  2317  0003C4   68B8(1)  		b0bset	P0M.0
  2318  0003C5   83D4(2)  		jmp	LedScan_ISR_END
  2319  0003C6   7C17(1+S)  		b0bts1 _disp_map+2.4
  2320  0003C7   83CA(2)  		jmp	$+3
  2321  0003C8   61D4(1)  		b0bclr	P4.1
  2322  0003C9   69C4(1)  		b0bset	P4M.1
  2323  0003CA   7D17(1+S)  		b0bts1 _disp_map+2.5
  2324  0003CB   83CE(2)  		jmp	$+3
  2325  0003CC   64D5(1)  		b0bclr	P5.4
  2326  0003CD   6CC5(1)  		b0bset	P5M.4
  2327  0003CE   7E17(1+S)  		b0bts1 _disp_map+2.6
  2328  0003CF   83D2(2)  		jmp	$+3
  2329  0003D0   61D0(1)  		b0bclr	P0.1
  2330  0003D1   69B8(1)  		b0bset	P0M.1
  2331  0003D2   68D4(1)  		b0bset	P4.0
  2332  0003D3   68C4(1)  		b0bset	P4M.0
  2333  0003D4             	
  2334  0003D4             	//if(_50ms_count >= 20)
  2335  0003D4             	//{
  2336  0003D4             	//	_50ms_count = 0;
  2337  0003D4             	//	system_tick_flag = 1
  2338  0003D4             	//}
  2339  0003D4             	//else
  2340  0003D4             	//{
  2341  0003D4             	//	++_50ms_count;
  2342  0003D4             	//}
  2343  0003D4                isr_50ms_start:
  2344  0003D4   2E03(1)  	b0mov	a,_50ms_count
  2345  0003D5   2414(1)  	sub	a,#(20)       	//2.5ms * 20 = 50ms
  2346  0003D6   7A86(1+S)  	b0bts1  fc		
  2347  0003D7   83DA(2)          jmp	isr_50ms_1	//<20
  2348  0003D8   2B03(1)  	clr	_50ms_count
  2349  0003D9   6900(1)  	b0bset	system_tick_flag
  2350  0003DA                isr_50ms_1:
  2351  0003DA             	//++_50ms_count
  2352  0003DA   1603(1+S)  	incms _50ms_count
  2353  0003DB   0000(1)  	nop
  2354  0003DC                isr_50ms_end:
  2355  0003DC             isr_exit:
  2356  0003DC   0500(1)  	pop
  2357  0003DD   0F00(2)  	reti
  2358  0003DE             
  2359  0003DE             
  2360  0003DE             .ENDP
