     1  000000             CHIP SN8P2711B
     2  000000             //{{SONIX_CODE_OPTION
     3  000000             	.Code_Option	LVD		LVD_H		; 2.4V Reset Enable LVD36 bit of PFLAG for 3.6V Low Voltage Indicator
     4  000000             	.Code_Option	Reset_Pin	P04
     5  000000             	.Code_Option	Watch_Dog	Always_On	; Watchdog still enable even in Green and Sleep mode
     6  000000             	.Code_Option	High_Clk	IHRC_16M	; Internal 16M RC Oscillator
     7  000000             	.Code_Option	Fcpu		#2     ; Fcpu = Fosc/4
     8  000000             	.Code_Option	Security	Enable
     9  000000             	.Code_Option	Noise_Filter	Disable
    10  000000             //}}SONIX_CODE_OPTION
    11  000000             	INCLUDESTD		MACRO1.H
    12  000000             	INCLUDESTD		MACRO2.H
    13  000000             	INCLUDESTD	 	MACRO3.H
    14  000000             	
    15  000000             .data
    16  E 00000001         	BIT0		equ	0x01
    17  E 00000002         	BIT1		equ	0x02
    18  E 00000004         	BIT2		equ	0x04
    19  E 00000008         	BIT3		equ	0x08
    20  E 00000010         	BIT4		equ	0x10
    21  E 00000020         	BIT5		equ	0x20
    22  E 00000040         	BIT6		equ	0x40
    23  E 00000080         	BIT7		equ	0x80
    24  E 00000014         	SYSTEM_TICK	equ	20	//50ms中断
    25  000000             
    26  0000 D             	flag0			ds	1
    27  E 00000000         	system_idle_flag	equ	flag0.0		//0->正常工作 1->待机模式
    28  E 00010000         	system_tick_flag	equ	flag0.1		//50ms置位一次
    29  E 00020000         	_disp_update_flag	equ	flag0.2		//刷新显示标志
    30  E 00030000         	_disp_voltage_flag	equ	flag0.3		//0->显示电量  1->显示电压
    31  E 00040000         	_input_power_flag	equ	flag0.4		//0->没有外部电源 1->有外部电源
    32  E 00050000         	_led_on_off_flag	equ	flag0.5		//0->LED_OFF	1->LED_ON
    33  E 00060000         	_lcd_init_flag		equ	flag0.6		//此标志为1表示LCD上电全显已执行过
    34  E 00070000         	_is_output_en_flag	equ	flag0.7		//0->升压输出未开启 1->升压输出开启
    35  000001             
    36  0001 D             	flag1			ds	1
    37  E 00000001         	_key_dly_flag		equ	flag1.0
    38  000002             
    39  0002 D             	tmp			ds	1		//临时变量
    40  0003 D             	_50ms_count		ds	1		//50ms计时
    41  0004 D             	_enter_idle_dly		ds	1		//按键唤醒后,延时进入IDLE
    42  000005             	
    43  000005             	//math.h
    44  0005 D             	_d_math_input0		ds	3     //被乘数 被除数
    45  0008 D             	_d_math_input1		ds	3     //乘数   除数
    46  000B D             	_d_math_output0		ds 	3     //积     商
    47  000E D             	_d_math_output1		ds	3     //余数 
    48  0011 D             	_count			ds	1     //循环移位计数器
    49  0012 D             	_math_tmp0		ds	1
    50  000013             
    51  000013             	//display.h
    52  0013 D             	_disp_swap_dly		ds	1	//电压和电量交替显示间隔计时
    53  0014 D             	_disp_update_dly	ds	1	//显示更新延时,避免数据刷新过快
    54  0015 D             	_disp_map		ds	3	//显存映射
    55  0018 D             	_led_scan_index		ds	1	//当前扫描的COM
    56  000019             
    57  000019             	//sensor.h
    58  0019 D             	_adc_ch_index		ds	1	//当前ADC通道
    59  001A D             	_ad_buf_tmp		ds	2	//AD转换的结果缓冲,主要是用于做移位和对齐
    60  00001C             	//_ad_buf_l		ds	6	//此数据用于做平均值滤波,去掉最大值与最小值
    61  00001C             	//_ad_buf_h		ds	6
    62  00001C             	//_ad_buf_l_sort		ds	6	//此数据用于做平均值滤波,去掉最大值与最小值
    63  00001C             	//_ad_buf_h_sort		ds	6
    64  001C D             	_ad_buf_index		ds	1	//
    65  001D D             	_ad_buf_sort_i		ds	1	//用于对多组AD数据进行排序
    66  001E D             	_cur_input_volgate	ds	1	//当前输入电压
    67  001F D             	_cur_batt_capacity	ds	1	//当前电池电量
    68  0020 D             	_batt_capacity_tmp	ds	1
    69  000021             	
    70  0021 D             	_adc_delay_count	ds	1	//转换前的延时计数
    71  0022 D             	_adc_ch_dly		ds	1	//通道采集切换延时
    72  000023             	
    73  000023             	//key.h
    74  0023 D             	_key_bit_map		ds	1	//每50MS采集一次按键状态,移位存入,挤掉最旧的位
    75  0024 D             	_key_dly		ds	1	//检测到一次按键后,延时一段时间再检测按键
    76  0025 D             	_led_mode		ds	1	//LED模式
    77  0026 D             	_led_mode_sub		ds	1	//对应模式下的亮灯控制
    78  0027 D             	_led_dly		ds	1	//LED控制延时
    79  000028             
    80  000000             .code
    81  000000               org 0x00
    82  000000   81E6(2)    jmp reset
    83  000008               org 0x08
    84  000008   830D(2)    jmp isr
    85  000020               org 0x20
    86  000020             
    87  000020             	include math.h
    88  000020             /*
    89  000020             	数学运算库
    90  000020             */
    91  000020             //==========================================================
    92  000020             //比较高低字节,不改变原数据
    93  000020             //num1-num2
    94  000020             //>=0: jmp->cjmp_1
    95  000020             //<0 : jmp->cjmp_2
    96  000020             //tmp0
    97  000020             comparison_16b macro  num1_l,num1_h,num2_l,num2_h,cjmp_1,cjmp_2
    98  000020                	mov  	a,num1_l	//先减低字节
    99  000020                	sub    	a,num2_l	
   100  000020                	mov  	a,num1_h	//再减高字节
   101  000020                	sbc    	a,num2_h	//
   102  000020                	b0bts0 	FC         	//
   103  000020                	jmp    	cjmp_1     	//如果等于0就 >=
   104  000020                	jmp    	cjmp_2     	//如果等于1就 <
   105  000020                	endm
   106  000020             //==================================================================================================
   107  000020             //交换两个16位数据
   108  000020             swap_16b macro num1_l,num1_h,num2_l,num2_h
   109  000020             	b0mov	a,num1_l
   110  000020             	b0xch	a,num2_l
   111  000020             	b0xch	a,num1_l
   112  000020             	b0mov	a,num1_h
   113  000020             	b0xch	a,num2_h
   114  000020             	b0xch	a,num1_h
   115  000020             	endm
   116  000020             //==================================================================================================
   117  000020             //num ++
   118  000020             cnt_inc_16b macro  num_l,num_h
   119  000020                	incms	num1_l
   120  000020                	jmp	$ + 3
   121  000020                	incms	num_h
   122  000020                	nop
   123  000020                	endm
   124  000020             //==================================================================================================
   125  000020             // num1 = num1 + num2
   126  000020             add_16b macro num1_l,num1_h,num2_l,num2_h
   127  000020                	b0mov	a,num2_l
   128  000020                	add	num1_l,a
   129  000020                	b0mov	a,num2_h
   130  000020                	adc	num1_h,a
   131  000020                	endm
   132  000020             //==================================================================================================
   133  000020             // num1 = num1 - num2
   134  000020             sub_16b macro num1_l,num1_h,num2_l,num2_h
   135  000020                	b0mov	a,num1_l
   136  000020                	sub	a,num2_l
   137  000020             	b0mov	num1_l,a
   138  000020                	b0mov	a,num1_h
   139  000020                	sbc	a,num2_h
   140  000020             	b0mov	num1_h,a
   141  000020                	endm
   142  000020             //==================================================================================================
   143  000020             	__div_u8_u8:
   144  000020             	//8位数除法
   145  000020             	//d_math_input0  = 被除数	
   146  000020             	//d_math_input1  = 除数		
   147  000020             	//d_math_output0 = 商	
   148  000020             	//d_math_output1 = 中间变量(余数)   	
   149  000020   2B0B(1)  		   clr		_d_math_output0    	//清0商
   150  000021   2B0E(1)  		   clr		_d_math_output1		//清0中间变量(余数)   
   151  000022   2B11(1)  		   clr      _count
   152  000023             		div_u8_u8_0:
   153  000023   1611(1+S)  		   incms	_count	 			//count加一
   154  000024   6286(1)  		   b0bclr	fc
   155  000025   0B0B(1)  		   rlcm		_d_math_output0    	//商左移一位至
   156  000026                        	   //b0bclr	fc
   157  000026   0B05(1)  		   rlcm		_d_math_input0     	//被除数中间变量左移1位存入中间变量
   158  000027   0B0E(1)  		   rlcm		_d_math_output1
   159  000028   1E0E(1)  		   mov		a,_d_math_output1  	//中间变量减去除数
   160  000029   2208(1)  		   sub		a,_d_math_input1
   161  00002A   7286(1+S)  		   b0bts0	fc 	 				//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   162  00002B   802D(2)  		   jmp		div_u8_u8_1
   163  00002C   8030(2)  		   jmp		div_u8_u8_2
   164  00002D             		div_u8_u8_1:         	 			//没有借位
   165  00002D   1F0E(1)  		   mov		_d_math_output1,a   //得到余数
   166  00002E   680B(1)  		   b0bset	_d_math_output0.0
   167  00002F   8030(2)  		   jmp		div_u8_u8_3
   168  000030             		div_u8_u8_2:		 					//如果有借位
   169  000030             		   //b0bclr	_d_math_output0.0
   170  000030             		div_u8_u8_3:
   171  000030   2D08(1)  		   mov		a,#8	 			//判断是否循环了8次
   172  000031   0711(1+S)  		   cmprs	a,_count
   173  000032   8023(2)  		   jmp		div_u8_u8_0
   174  000033   0E00(2)  		   ret
   175  000034             
   176  000034             //==================================================================================================
   177  000034              	__div_u16_u16:
   178  000034             		//16位数除16位数除法
   179  000034             		//d_math_input0  = 被除数	
   180  000034             		//d_math_input1  = 除数		
   181  000034             		//d_math_output0 = 商	
   182  000034             		//d_math_output1 = 中间变量(余数)   	
   183  000034   2B0B(1)  		   clr		_d_math_output0    		//清0商
   184  000035   2B0C(1)  		   clr      	_d_math_output0 + 1
   185  000036   2B0E(1)  		   clr		_d_math_output1			//清0中间变量(余数)   
   186  000037   2B0F(1)  		   clr		_d_math_output1 + 1
   187  000038   2B11(1)  		   clr      	_count
   188  000039             		div_u16_u16_0:
   189  000039   1611(1+S)  		   incms	_count	 				//count加一
   190  00003A   6286(1)  		   b0bclr	fc
   191  00003B   0B0B(1)  		   rlcm		_d_math_output0    		//商左移1位
   192  00003C   0B0C(1)  		   rlcm     	_d_math_output0 + 1
   193  00003D             		   //b0bclr	fc
   194  00003D   0B05(1)  		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   195  00003E   0B06(1)  		   rlcm     	_d_math_input0 + 1
   196  00003F   0B0E(1)  		   rlcm		_d_math_output1
   197  000040   0B0F(1)  		   rlcm     	_d_math_output1 + 1
   198  000041             
   199  000041   2E0E(1)  		   b0mov	a,_d_math_output1  		//中间变量减去除数
   200  000042   2208(1)  		   sub		a,_d_math_input1
   201  000043   2F12(1)  		   b0mov    	_math_tmp0,a
   202  000044   2E0F(1)  		   b0mov    	a,_d_math_output1 + 1
   203  000045   2009(1)  		   sbc      	a,_d_math_input1 + 1
   204  000046             		   //b0mov    	_tmp1,a
   205  000046   7286(1+S)  		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   206  000047   8049(2)  		   jmp		div_u16_u16_1
   207  000048   804E(2)  		   jmp		div_u16_u16_2
   208  000049             		div_u16_u16_1:         	 				//没有借位
   209  000049   2F0F(1)  		   b0mov	_d_math_output1 + 1,a   //得到余数
   210  00004A   2E12(1)  		   b0mov    	a,_math_tmp0
   211  00004B   2F0E(1)  		   b0mov    	_d_math_output1,a
   212  00004C   680B(1)  		   b0bset	_d_math_output0.0
   213  00004D   804E(2)  		   jmp		div_u16_u16_3
   214  00004E             		div_u16_u16_2:		 					//如果有借位
   215  00004E             		   //b0bclr	_d_math_output0.0
   216  00004E             		div_u16_u16_3:
   217  00004E   2D10(1)  		   mov		a,#16	 				//判断是否循环了16次
   218  00004F   0711(1+S)  		   cmprs	a,_count
   219  000050   8039(2)  		   jmp		div_u16_u16_0
   220  000051   0E00(2)  		   ret
   221  000052             //==================================================================================================
   222  000052             /* 	__div_u24_u16:
   223  000052             		//24位数除16位数除法
   224  000052             		//d_math_input0  = 被除数	
   225  000052             		//d_math_input1  = 除数		
   226  000052             		//d_math_output0 = 商	
   227  000052             		//d_math_output1 = 中间变量(余数)   	
   228  000052             		   clr          _d_math_input1 + 2		//清除数高位
   229  000052             		   clr		_d_math_output0    		//清0商
   230  000052             		   clr      	_d_math_output0 + 1
   231  000052             		   clr      	_d_math_output0 + 2
   232  000052             		   clr		_d_math_output1			//清0中间变量(余数)   
   233  000052             		   clr		_d_math_output1 + 1		
   234  000052             		   clr		_d_math_output1 + 2
   235  000052             		   clr      	_count
   236  000052             		div_u24_u16_0:
   237  000052             		   incms	_count	 				//count加一
   238  000052             		   b0bclr	fc
   239  000052             		   rlcm		_d_math_output0    		//商左移1位
   240  000052             		   rlcm     	_d_math_output0 + 1
   241  000052             		   rlcm     	_d_math_output0 + 2	
   242  000052             		   //b0bclr	fc
   243  000052             		   rlcm		_d_math_input0     		//被除数中间变量左移1位存入中间变量
   244  000052             		   rlcm     	_d_math_input0 + 1
   245  000052             		   rlcm     	_d_math_input0 + 2
   246  000052             		   rlcm		_d_math_output1
   247  000052             		   rlcm     	_d_math_output1 + 1
   248  000052             	    	   rlcm     	_d_math_output1 + 2
   249  000052             
   250  000052             		   b0mov	a,_d_math_output1  		//中间变量减去除数
   251  000052             		   sub		a,_d_math_input1
   252  000052             		   b0mov    	_math_tmp0,a
   253  000052             		   b0mov    	a,_d_math_output1 + 1
   254  000052             		   sbc      	a,_d_math_input1 + 1
   255  000052             		   b0mov    	_math_tmp0 + 1,a
   256  000052             		   b0mov    	a,_d_math_output1 + 2
   257  000052             		   sbc      	a,_d_math_input1 + 2
   258  000052             		   //b0mov    	_tmp1,a
   259  000052             		   b0bts0	fc 	 					//判断是否有借位，有借位被除数大于除数，没借位被除数小于除数
   260  000052             		   jmp		div_u24_u16_1
   261  000052             		   jmp		div_u24_u16_2
   262  000052             		div_u24_u16_1:         	 				//没有借位
   263  000052             		   b0mov	_d_math_output1 + 2,a   //得到余数
   264  000052             		   b0mov    	a,_math_tmp0
   265  000052             		   b0mov    	_d_math_output1,a
   266  000052                 		   b0mov    	a,_math_tmp0 + 1
   267  000052             		   b0mov    	_d_math_output1 + 1,a
   268  000052             		   b0bset	_d_math_output0.0
   269  000052             		   jmp		div_u24_u16_3
   270  000052             		div_u24_u16_2:		 					//如果有借位
   271  000052             		   //b0bclr	_d_math_output0.0
   272  000052             		div_u24_u16_3:
   273  000052             		   mov		a,#24	 				//判断是否循环了24次
   274  000052             		   cmprs	a,_count
   275  000052             		   jmp		div_u24_u16_0
   276  000052             		   ret
   277  000052             */
   278  000052             //==================================================================================================
   279  000052             	__mul_u16_u8: //2711B没有乘法指令
   280  000052             		//16位数 x 8位数 乘法(结果不超出24位)
   281  000052             		//d_math_input0  = 被乘数	
   282  000052             		//d_math_input1  = 乘数		
   283  000052             		//d_math_output0 = 积
   284  000052             		/*	b0mov	a,_d_math_input0+0
   285  000052             			mul	a,_d_math_input1+0
   286  000052             			b0mov	_d_math_output0,a
   287  000052             			b0mov	a,R
   288  000052             			b0mov	_d_math_output0+1,a
   289  000052             			b0mov	a,_d_math_input0+1
   290  000052             			mul	a,_d_math_input1+0
   291  000052             			add	_d_math_output0+1,a
   292  000052             			b0mov	a,R
   293  000052             			clr	_d_math_output0+2
   294  000052             			adc	_d_math_output0+2,a
   295  000052             			ret*/
   296  000052   2B07(1)  			clr		_d_math_input0 + 2     	//清被乘数高位
   297  000053   2B0A(1)                          clr             _d_math_input1 + 2	//清乘数高位
   298  000054   2B09(1)  			clr             _d_math_input1 + 1	//清乘数中位
   299  000055   2B0B(1)  		   	clr		_d_math_output0    	//清0积
   300  000056   2B0C(1)  			clr		_d_math_output0 + 1
   301  000057   2B0D(1)  			clr		_d_math_output0 + 2
   302  000058   2B11(1)  		   	clr     	_count
   303  000059             		mul_u16_u8_0:
   304  000059   1611(1+S)  		   	incms		_count	 		//count加一
   305  00005A             
   306  00005A   0908(1)  			rrcm    	_d_math_input1      	//乘数右移1位
   307  00005B   7A86(1+S)  			b0bts1		fc  				
   308  00005C   8063(2)  			jmp		mul_u16_u8_1
   309  00005D             
   310  00005D   2E05(1)  			b0mov   	a,_d_math_input0     	//被乘数加到积
   311  00005E   130B(1)  			add     	_d_math_output0,a
   312  00005F   2E06(1)  			b0mov   	a,_d_math_input0 + 1
   313  000060   110C(1)  			adc     	_d_math_output0 + 1,a
   314  000061   1E07(1)  			mov		a,_d_math_input0 + 2
   315  000062   110D(1)  			adc		_d_math_output0 + 2,a
   316  000063             		mul_u16_u8_1:
   317  000063   6286(1)  			b0bclr		fc         	 			
   318  000064   0B05(1)  		   	rlcm    	_d_math_input0  	//被乘数左移
   319  000065   0B06(1)  			rlcm    	_d_math_input0 + 1
   320  000066   0B07(1)  			rlcm    	_d_math_input0 + 2
   321  000067             		mul_u16_u8_2:
   322  000067   2D08(1)  		   	mov		a,#8	 		//判断是否循环了8次
   323  000068   0711(1+S)  		   	cmprs		a,_count
   324  000069   8059(2)  		   	jmp		mul_u16_u8_0
   325  00006A   0E00(2)  			ret
   326  00006B             //==================================================================================================
   327  00006B             /*		//16位数 x 16位数 乘法(结果不超出32位)
   328  00006B             		//d_math_input0  = 被乘数	
   329  00006B             		//d_math_input1  = 乘数		
   330  00006B             		//d_math_output0 = 积
   331  00006B             		//_math_tmp0
   332  00006B             	__mul_u16_u16:
   333  00006B             		call	__mul_u16_u8
   334  00006B             		b0mov	a,_d_math_output0+0
   335  00006B             		b0mov	_math_tmp0+0,a
   336  00006B             		b0mov	a,_d_math_output0+1
   337  00006B             		b0mov	_math_tmp0+1,a
   338  00006B             		b0mov	a,_d_math_output0+2
   339  00006B             		b0mov	_math_tmp0+2,a
   340  00006B             		b0mov	a,_d_math_input1+1
   341  00006B             		b0mov	_d_math_input1+0,a
   342  00006B             		call	__mul_u16_u8
   343  00006B             		b0mov	a,_d_math_output0+2
   344  00006B             		b0mov	_d_math_output0+3,a
   345  00006B             		b0mov	a,_d_math_output0+1
   346  00006B             		b0mov	_d_math_output0+2,a
   347  00006B             		b0mov	a,_d_math_output0+0
   348  00006B             		b0mov	_d_math_output0+1,a
   349  00006B             		b0mov	a,_math_tmp0+0
   350  00006B             		b0mov	_d_math_output0+0,a 
   351  00006B             		b0mov	a,_math_tmp0+1
   352  00006B             		add	_d_math_output0+1,a
   353  00006B             		b0mov	a,_math_tmp0+2
   354  00006B             		adc	_d_math_output0+2,a
   355  00006B             		mov	a,#(0)
   356  00006B             		adc	_d_math_output0+3,a	
   357  00006B             		ret*/
   358  00006B             //==================================================================================================
   359  00006B             //end files
   360  00006B             
   361  00006B             
   362  00006B             	include sensor.h
   363  00006B             /*
   364  00006B             
   365  00006B             */
   366  00006B             //========================================================================================
   367  00006B             	//结果存入 _ad_buf_tmp
   368  00006B             	SensorADConvert_CH	macro	ch
   369  00006B             		mov	a,#(ch | BIT4 | BIT7)
   370  00006B             		b0mov	ADM,a
   371  00006B             		call	SensorADConvert
   372  00006B             		endm
   373  00006B             //========================================================================================
   374  00006B             	AdcDelay macro
   375  00006B             		mov	a,#(50)
   376  00006B             		b0mov	_adc_delay_count,a
   377  00006B             		decms	_adc_delay_count
   378  00006B             		jmp	$ - 1
   379  00006B             		endm
   380  00006B             //========================================================================================
   381  00006B             	//启动一次ADC转换
   382  00006B             	//结果存入 _ad_buf_tmp
   383  00006B             	SensorADConvert:
   384  00006B   2D50(1)  		MOV A, #(0x50)
   385  00006C   2FB3(1)    		B0MOV ADR, A	//ADC clock: 2MHZ,ADC resolution: -1
   386  00006D   2D00(1)    		MOV A, #(0x00)
   387  00006E   2FAF(1)    		B0MOV VREFH, A	//Internal VREFH: 2V
   388  00006F             
   389  00006F             		AdcDelay
   390  00006F   2D32(1)  		mov	a,#(50)
   391  000070   2F21(1)  		b0mov	_adc_delay_count,a
   392  000071   2621(1+S)  		decms	_adc_delay_count
   393  000072   8071(2)  		jmp	$ - 1
   394  000073   6EB1(1)  		b0bset	FADS			//start adc
   395  000074             	SensorADConvert_wait_adc:
   396  000074   7DB1(1+S)  		b0bts1	FEOC			//检查ADC状态标志
   397  000075   8074(2)     		jmp	SensorADConvert_wait_adc	//eco=0：AD转换中
   398  000076   2EB2(1)  		b0mov	a,ADB
   399  000077   2F1B(1)  		b0mov	_ad_buf_tmp + 1,a
   400  000078   2EB3(1)  		b0mov	a,ADR
   401  000079   2F1A(1)  		b0mov	_ad_buf_tmp + 0,a
   402  00007A   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   403  00007B   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   404  00007C   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   405  00007D   0B1A(1)  		rlcm	_ad_buf_tmp + 0		//低位带进位左移
   406  00007E   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   407  00007F   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   408  000080   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   409  000081   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   410  000082   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   411  000083   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   412  000084   091B(1)  		rrcm	_ad_buf_tmp + 1		//高位带进位右移
   413  000085   091A(1)  		rrcm	_ad_buf_tmp + 0		//低位带进位右移
   414  000086   2D0F(1)  		mov	a,#(0x0f)
   415  000087   291B(1)  		and	_ad_buf_tmp + 1,a	//把高位的高4位清零
   416  000088   0E00(2)  		ret
   417  000089             //========================================================================================
   418  000089             /*	//对同一个通道6次采样求平均(去掉最大值和最小值)
   419  000089             	//结果存入 _ad_buf_tmp
   420  000089             	SensorAdAverage:
   421  000089             		//if(++_ad_buf_index < 6) return
   422  000089             		incms	_ad_buf_index
   423  000089             		nop
   424  000089             		b0mov	a,_ad_buf_index
   425  000089             		sub	a,#(6)
   426  000089             		b0bts1	fc
   427  000089             		jmp	$+2  		//<6
   428  000089             		clr	_ad_buf_index
   429  000089             		
   430  000089             		call	SensorADConvert
   431  000089             		//_ad_buf_l[_ad_buf_index] = _ad_buf_tmp+0
   432  000089             		b0mov	Y,#(0)
   433  000089             		b0mov	Z,#_ad_buf_l$L
   434  000089             		b0mov	A,_ad_buf_index
   435  000089             		add	Z,A
   436  000089             		b0mov	a,_ad_buf_tmp+0
   437  000089             		b0mov	@YZ,a
   438  000089             
   439  000089             		//_ad_buf_h[_ad_buf_index] = _ad_buf_tmp+1
   440  000089             		//b0mov	Y,#(0)
   441  000089             		b0mov	Z,#_ad_buf_h$L
   442  000089             		b0mov	A,_ad_buf_index
   443  000089             		add	Z,A
   444  000089             		b0mov	a,_ad_buf_tmp+1
   445  000089             		b0mov	@YZ,a
   446  000089             	//======================================================================
   447  000089             	//复制数据到排序缓冲区
   448  000089             		b0mov	a,_ad_buf_l+0
   449  000089             		b0mov	_ad_buf_l_sort+0,a
   450  000089             		b0mov	a,_ad_buf_l+1
   451  000089             		b0mov	_ad_buf_l_sort+1,a
   452  000089             		b0mov	a,_ad_buf_l+2
   453  000089             		b0mov	_ad_buf_l_sort+2,a
   454  000089             		b0mov	a,_ad_buf_l+3
   455  000089             		b0mov	_ad_buf_l_sort+3,a
   456  000089             		b0mov	a,_ad_buf_l+4
   457  000089             		b0mov	_ad_buf_l_sort+4,a
   458  000089             		b0mov	a,_ad_buf_l+5
   459  000089             		b0mov	_ad_buf_l_sort+5,a
   460  000089             
   461  000089             		b0mov	a,_ad_buf_h+0
   462  000089             		b0mov	_ad_buf_h_sort+0,a
   463  000089             		b0mov	a,_ad_buf_h+1
   464  000089             		b0mov	_ad_buf_h_sort+1,a
   465  000089             		b0mov	a,_ad_buf_h+2
   466  000089             		b0mov	_ad_buf_h_sort+2,a
   467  000089             		b0mov	a,_ad_buf_h+3
   468  000089             		b0mov	_ad_buf_h_sort+3,a
   469  000089             		b0mov	a,_ad_buf_h+4
   470  000089             		b0mov	_ad_buf_h_sort+4,a
   471  000089             		b0mov	a,_ad_buf_h+5
   472  000089             		b0mov	_ad_buf_h_sort+5,a
   473  000089             	//======================================================================
   474  000089             	//排序
   475  000089             		mov	a,#(5)
   476  000089             		b0mov	_ad_buf_sort_i,a
   477  000089                	SensorAdAverage_comp_01:
   478  000089             		comparison_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1,SensorAdAverage_swap_01,SensorAdAverage_comp_12
   479  000089             	SensorAdAverage_swap_01:
   480  000089             		swap_16b	_ad_buf_l_sort+0,_ad_buf_h_sort+0,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   481  000089             	SensorAdAverage_comp_12:
   482  000089             		comparison_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2,SensorAdAverage_swap_12,SensorAdAverage_comp_23
   483  000089             	SensorAdAverage_swap_12:
   484  000089             		swap_16b	_ad_buf_l_sort+1,_ad_buf_h_sort+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   485  000089             	SensorAdAverage_comp_23:
   486  000089             		comparison_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3,SensorAdAverage_swap_23,SensorAdAverage_comp_34
   487  000089             	SensorAdAverage_swap_23:
   488  000089             		swap_16b	_ad_buf_l_sort+2,_ad_buf_h_sort+2,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   489  000089             	SensorAdAverage_comp_34:
   490  000089             		comparison_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4,SensorAdAverage_swap_34,SensorAdAverage_comp_45
   491  000089             	SensorAdAverage_swap_34:
   492  000089             		swap_16b	_ad_buf_l_sort+3,_ad_buf_h_sort+3,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   493  000089             	SensorAdAverage_comp_45:
   494  000089             		comparison_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5,SensorAdAverage_swap_45,SensorAdAverage_comp_56
   495  000089             	SensorAdAverage_swap_45:
   496  000089             		swap_16b	_ad_buf_l_sort+4,_ad_buf_h_sort+4,_ad_buf_l_sort+5,_ad_buf_h_sort+5
   497  000089             	SensorAdAverage_comp_56:
   498  000089             		decms	_ad_buf_sort_i
   499  000089             		jmp	SensorAdAverage_comp_01
   500  000089             	//======================================================================
   501  000089             	//求中间四次的平均值,去掉最大的1个和最小的1个数
   502  000089             		clr	_ad_buf_tmp+0	
   503  000089             		clr	_ad_buf_tmp+1
   504  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+1,_ad_buf_h_sort+1
   505  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+2,_ad_buf_h_sort+2
   506  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+3,_ad_buf_h_sort+3
   507  000089             		add_16b	_ad_buf_tmp+0,_ad_buf_tmp+1,_ad_buf_l_sort+4,_ad_buf_h_sort+4
   508  000089             	
   509  000089             		rrcm	_ad_buf_tmp+1	;高位带进位右移
   510  000089                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   511  000089                		rrcm	_ad_buf_tmp+1	;高位带进位右移
   512  000089                		rrcm	_ad_buf_tmp+0	;低位带进位右移
   513  000089                		mov	a,#(0x0F) 	;把高位的左4为置0
   514  000089                		and	_ad_buf_tmp+1,a
   515  000089             		ret*/
   516  000089             //========================================================================================
   517  000089             //计算电池电量
   518  000089             /*	//AD = 256 * V(0.1V) / 5  
   519  000089             	//4096 = 256 * 80 / 5
   520  000089             	batt_capacity_tab_add:
   521  000089             		dw	2150	//4.2
   522  000089             		dw	2110
   523  000089             		dw	2070
   524  000089             		dw	2030
   525  000089             		dw	1990
   526  000089             		dw	1950
   527  000089             		dw	1910
   528  000089             		dw	1870	
   529  000089             		dw	1830
   530  000089             		dw	1790
   531  000089             		dw	1750	//3.42
   532  000089             	batt_capacity_tab_dec:
   533  000089             		dw	2090	//4.08
   534  000089             		dw	2040
   535  000089             		dw	1990
   536  000089             		dw	1940
   537  000089             		dw	1890
   538  000089             		dw	1840
   539  000089             		dw	1790
   540  000089             		dw	1740
   541  000089             		dw	1690
   542  000089             		dw	1640
   543  000089             		dw	1590	//3.1
   544  000089             */
   545  000089             	SensorMathBattCapacity:
   546  000089   7C00(1+S)  		b0bts1	_input_power_flag
   547  00008A   810C(2)  		jmp	SensorMathBattCapacity_DEC
   548  00008B             //==================================================================================================
   549  00008B             		comparison_16b	#(2155&0xff),#((2155>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_nofull,SensorMathBattCapacity_ADD_full
   550  00008B   2D6B(1)     	mov  	a,#(2155&0xff)	//先减低字节
   551  00008C   221A(1)     	sub    	a,_ad_buf_tmp+0	
   552  00008D   2D08(1)     	mov  	a,#((2155>>8)&0xff)	//再减高字节
   553  00008E   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   554  00008F   7286(1+S)     	b0bts0 	FC         	//
   555  000090   8095(2)     	jmp    	SensorMathBattCapacity_ADD_nofull     	//如果等于0就 >=
   556  000091   8092(2)     	jmp    	SensorMathBattCapacity_ADD_full     	//如果等于1就 <
   557  000092             	SensorMathBattCapacity_ADD_full:
   558  000092   2D64(1)  		mov	a,#(100)
   559  000093   2F1F(1)  		b0mov	_cur_batt_capacity,a
   560  000094   818C(2)  		jmp	SensorMathBattCapacity_Exit
   561  000095             	SensorMathBattCapacity_ADD_nofull:
   562  000095             		comparison_16b	#(2150&0xff),#((2150>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_90,SensorMathBattCapacity_ADD_99
   563  000095   2D66(1)     	mov  	a,#(2150&0xff)	//先减低字节
   564  000096   221A(1)     	sub    	a,_ad_buf_tmp+0	
   565  000097   2D08(1)     	mov  	a,#((2150>>8)&0xff)	//再减高字节
   566  000098   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   567  000099   7286(1+S)     	b0bts0 	FC         	//
   568  00009A   809F(2)     	jmp    	SensorMathBattCapacity_ADD_90     	//如果等于0就 >=
   569  00009B   809C(2)     	jmp    	SensorMathBattCapacity_ADD_99     	//如果等于1就 <
   570  00009C             	SensorMathBattCapacity_ADD_99:
   571  00009C   2D63(1)  		mov	a,#(99)
   572  00009D   2F20(1)  		b0mov	_batt_capacity_tmp,a
   573  00009E   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   574  00009F             	SensorMathBattCapacity_ADD_90:
   575  00009F             		comparison_16b	#(2110&0xff),#((2110>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_80,SensorMathBattCapacity_ADD_90_more
   576  00009F   2D3E(1)     	mov  	a,#(2110&0xff)	//先减低字节
   577  0000A0   221A(1)     	sub    	a,_ad_buf_tmp+0	
   578  0000A1   2D08(1)     	mov  	a,#((2110>>8)&0xff)	//再减高字节
   579  0000A2   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   580  0000A3   7286(1+S)     	b0bts0 	FC         	//
   581  0000A4   80A9(2)     	jmp    	SensorMathBattCapacity_ADD_80     	//如果等于0就 >=
   582  0000A5   80A6(2)     	jmp    	SensorMathBattCapacity_ADD_90_more     	//如果等于1就 <
   583  0000A6             	SensorMathBattCapacity_ADD_90_more:
   584  0000A6   2D5A(1)  		mov	a,#(90)
   585  0000A7   2F20(1)  		b0mov	_batt_capacity_tmp,a
   586  0000A8   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   587  0000A9             	SensorMathBattCapacity_ADD_80:
   588  0000A9             		comparison_16b	#(2070&0xff),#((2070>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_70,SensorMathBattCapacity_ADD_80_more
   589  0000A9   2D16(1)     	mov  	a,#(2070&0xff)	//先减低字节
   590  0000AA   221A(1)     	sub    	a,_ad_buf_tmp+0	
   591  0000AB   2D08(1)     	mov  	a,#((2070>>8)&0xff)	//再减高字节
   592  0000AC   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   593  0000AD   7286(1+S)     	b0bts0 	FC         	//
   594  0000AE   80B3(2)     	jmp    	SensorMathBattCapacity_ADD_70     	//如果等于0就 >=
   595  0000AF   80B0(2)     	jmp    	SensorMathBattCapacity_ADD_80_more     	//如果等于1就 <
   596  0000B0             	SensorMathBattCapacity_ADD_80_more:
   597  0000B0   2D50(1)  		mov	a,#(80)
   598  0000B1   2F20(1)  		b0mov	_batt_capacity_tmp,a
   599  0000B2   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   600  0000B3             	SensorMathBattCapacity_ADD_70:
   601  0000B3             		comparison_16b	#(2030&0xff),#((2030>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_60,SensorMathBattCapacity_ADD_70_more
   602  0000B3   2DEE(1)     	mov  	a,#(2030&0xff)	//先减低字节
   603  0000B4   221A(1)     	sub    	a,_ad_buf_tmp+0	
   604  0000B5   2D07(1)     	mov  	a,#((2030>>8)&0xff)	//再减高字节
   605  0000B6   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   606  0000B7   7286(1+S)     	b0bts0 	FC         	//
   607  0000B8   80BD(2)     	jmp    	SensorMathBattCapacity_ADD_60     	//如果等于0就 >=
   608  0000B9   80BA(2)     	jmp    	SensorMathBattCapacity_ADD_70_more     	//如果等于1就 <
   609  0000BA             	SensorMathBattCapacity_ADD_70_more:
   610  0000BA   2D46(1)  		mov	a,#(70)
   611  0000BB   2F20(1)  		b0mov	_batt_capacity_tmp,a
   612  0000BC   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   613  0000BD             	SensorMathBattCapacity_ADD_60:
   614  0000BD             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_50,SensorMathBattCapacity_ADD_60_more
   615  0000BD   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   616  0000BE   221A(1)     	sub    	a,_ad_buf_tmp+0	
   617  0000BF   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   618  0000C0   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   619  0000C1   7286(1+S)     	b0bts0 	FC         	//
   620  0000C2   80C7(2)     	jmp    	SensorMathBattCapacity_ADD_50     	//如果等于0就 >=
   621  0000C3   80C4(2)     	jmp    	SensorMathBattCapacity_ADD_60_more     	//如果等于1就 <
   622  0000C4             	SensorMathBattCapacity_ADD_60_more:
   623  0000C4   2D3C(1)  		mov	a,#(60)
   624  0000C5   2F20(1)  		b0mov	_batt_capacity_tmp,a
   625  0000C6   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   626  0000C7             	SensorMathBattCapacity_ADD_50:
   627  0000C7             		comparison_16b	#(1950&0xff),#((1950>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_40,SensorMathBattCapacity_ADD_50_more
   628  0000C7   2D9E(1)     	mov  	a,#(1950&0xff)	//先减低字节
   629  0000C8   221A(1)     	sub    	a,_ad_buf_tmp+0	
   630  0000C9   2D07(1)     	mov  	a,#((1950>>8)&0xff)	//再减高字节
   631  0000CA   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   632  0000CB   7286(1+S)     	b0bts0 	FC         	//
   633  0000CC   80D1(2)     	jmp    	SensorMathBattCapacity_ADD_40     	//如果等于0就 >=
   634  0000CD   80CE(2)     	jmp    	SensorMathBattCapacity_ADD_50_more     	//如果等于1就 <
   635  0000CE             	SensorMathBattCapacity_ADD_50_more:
   636  0000CE   2D32(1)  		mov	a,#(50)
   637  0000CF   2F20(1)  		b0mov	_batt_capacity_tmp,a
   638  0000D0   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   639  0000D1             	SensorMathBattCapacity_ADD_40:
   640  0000D1             		comparison_16b	#(1910&0xff),#((1910>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_30,SensorMathBattCapacity_ADD_40_more
   641  0000D1   2D76(1)     	mov  	a,#(1910&0xff)	//先减低字节
   642  0000D2   221A(1)     	sub    	a,_ad_buf_tmp+0	
   643  0000D3   2D07(1)     	mov  	a,#((1910>>8)&0xff)	//再减高字节
   644  0000D4   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   645  0000D5   7286(1+S)     	b0bts0 	FC         	//
   646  0000D6   80DB(2)     	jmp    	SensorMathBattCapacity_ADD_30     	//如果等于0就 >=
   647  0000D7   80D8(2)     	jmp    	SensorMathBattCapacity_ADD_40_more     	//如果等于1就 <
   648  0000D8             	SensorMathBattCapacity_ADD_40_more:
   649  0000D8   2D28(1)  		mov	a,#(40)
   650  0000D9   2F20(1)  		b0mov	_batt_capacity_tmp,a
   651  0000DA   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   652  0000DB             	SensorMathBattCapacity_ADD_30:
   653  0000DB             		comparison_16b	#(1870&0xff),#((1870>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_20,SensorMathBattCapacity_ADD_30_more
   654  0000DB   2D4E(1)     	mov  	a,#(1870&0xff)	//先减低字节
   655  0000DC   221A(1)     	sub    	a,_ad_buf_tmp+0	
   656  0000DD   2D07(1)     	mov  	a,#((1870>>8)&0xff)	//再减高字节
   657  0000DE   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   658  0000DF   7286(1+S)     	b0bts0 	FC         	//
   659  0000E0   80E5(2)     	jmp    	SensorMathBattCapacity_ADD_20     	//如果等于0就 >=
   660  0000E1   80E2(2)     	jmp    	SensorMathBattCapacity_ADD_30_more     	//如果等于1就 <
   661  0000E2             	SensorMathBattCapacity_ADD_30_more:
   662  0000E2   2D1E(1)  		mov	a,#(30)
   663  0000E3   2F20(1)  		b0mov	_batt_capacity_tmp,a
   664  0000E4   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   665  0000E5             	SensorMathBattCapacity_ADD_20:
   666  0000E5             		comparison_16b	#(1830&0xff),#((1830>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_10,SensorMathBattCapacity_ADD_20_more
   667  0000E5   2D26(1)     	mov  	a,#(1830&0xff)	//先减低字节
   668  0000E6   221A(1)     	sub    	a,_ad_buf_tmp+0	
   669  0000E7   2D07(1)     	mov  	a,#((1830>>8)&0xff)	//再减高字节
   670  0000E8   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   671  0000E9   7286(1+S)     	b0bts0 	FC         	//
   672  0000EA   80EF(2)     	jmp    	SensorMathBattCapacity_ADD_10     	//如果等于0就 >=
   673  0000EB   80EC(2)     	jmp    	SensorMathBattCapacity_ADD_20_more     	//如果等于1就 <
   674  0000EC             	SensorMathBattCapacity_ADD_20_more:
   675  0000EC   2D14(1)  		mov	a,#(20)
   676  0000ED   2F20(1)  		b0mov	_batt_capacity_tmp,a
   677  0000EE   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   678  0000EF             	SensorMathBattCapacity_ADD_10:
   679  0000EF             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0,SensorMathBattCapacity_ADD_10_more
   680  0000EF   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   681  0000F0   221A(1)     	sub    	a,_ad_buf_tmp+0	
   682  0000F1   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   683  0000F2   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   684  0000F3   7286(1+S)     	b0bts0 	FC         	//
   685  0000F4   80F9(2)     	jmp    	SensorMathBattCapacity_ADD_0     	//如果等于0就 >=
   686  0000F5   80F6(2)     	jmp    	SensorMathBattCapacity_ADD_10_more     	//如果等于1就 <
   687  0000F6             	SensorMathBattCapacity_ADD_10_more:
   688  0000F6   2D0A(1)  		mov	a,#(10)
   689  0000F7   2F20(1)  		b0mov	_batt_capacity_tmp,a
   690  0000F8   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   691  0000F9             	SensorMathBattCapacity_ADD_0:
   692  0000F9             		comparison_16b	#(1750&0xff),#((1750>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_ADD_0_less,SensorMathBattCapacity_ADD_0_more
   693  0000F9   2DD6(1)     	mov  	a,#(1750&0xff)	//先减低字节
   694  0000FA   221A(1)     	sub    	a,_ad_buf_tmp+0	
   695  0000FB   2D06(1)     	mov  	a,#((1750>>8)&0xff)	//再减高字节
   696  0000FC   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   697  0000FD   7286(1+S)     	b0bts0 	FC         	//
   698  0000FE   8103(2)     	jmp    	SensorMathBattCapacity_ADD_0_less     	//如果等于0就 >=
   699  0000FF   8100(2)     	jmp    	SensorMathBattCapacity_ADD_0_more     	//如果等于1就 <
   700  000100             	SensorMathBattCapacity_ADD_0_more:
   701  000100   2D01(1)  		mov	a,#(1)
   702  000101   2F20(1)  		b0mov	_batt_capacity_tmp,a
   703  000102   8105(2)  		jmp	SensorMathBattCapacity_ADD_End
   704  000103             	SensorMathBattCapacity_ADD_0_less:
   705  000103   2D00(1)  		mov	a,#(0)
   706  000104   2F20(1)  		b0mov	_batt_capacity_tmp,a
   707  000105             	SensorMathBattCapacity_ADD_End:
   708  000105   2E20(1)  		b0mov	a,_batt_capacity_tmp
   709  000106   221F(1)  		sub	a,_cur_batt_capacity
   710  000107   7A86(1+S)  		b0bts1	fc
   711  000108   818C(2)  		jmp	SensorMathBattCapacity_Exit
   712  000109   2E20(1)  		b0mov	a,_batt_capacity_tmp
   713  00010A   2F1F(1)  		b0mov	_cur_batt_capacity,a
   714  00010B   818C(2)  		jmp	SensorMathBattCapacity_Exit
   715  00010C             //==================================================================================================
   716  00010C             	SensorMathBattCapacity_DEC:
   717  00010C             	comparison_16b	#(2095&0xff),#((2095>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_nofull,SensorMathBattCapacity_DEC_full
   718  00010C   2D2F(1)     	mov  	a,#(2095&0xff)	//先减低字节
   719  00010D   221A(1)     	sub    	a,_ad_buf_tmp+0	
   720  00010E   2D08(1)     	mov  	a,#((2095>>8)&0xff)	//再减高字节
   721  00010F   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   722  000110   7286(1+S)     	b0bts0 	FC         	//
   723  000111   8116(2)     	jmp    	SensorMathBattCapacity_DEC_nofull     	//如果等于0就 >=
   724  000112   8113(2)     	jmp    	SensorMathBattCapacity_DEC_full     	//如果等于1就 <
   725  000113             	SensorMathBattCapacity_DEC_full:
   726  000113   2D64(1)  		mov	a,#(100)
   727  000114   2F20(1)  		b0mov	_batt_capacity_tmp,a
   728  000115   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   729  000116             	SensorMathBattCapacity_DEC_nofull:
   730  000116             		comparison_16b	#(2090&0xff),#((2090>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_90,SensorMathBattCapacity_DEC_99
   731  000116   2D2A(1)     	mov  	a,#(2090&0xff)	//先减低字节
   732  000117   221A(1)     	sub    	a,_ad_buf_tmp+0	
   733  000118   2D08(1)     	mov  	a,#((2090>>8)&0xff)	//再减高字节
   734  000119   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   735  00011A   7286(1+S)     	b0bts0 	FC         	//
   736  00011B   8120(2)     	jmp    	SensorMathBattCapacity_DEC_90     	//如果等于0就 >=
   737  00011C   811D(2)     	jmp    	SensorMathBattCapacity_DEC_99     	//如果等于1就 <
   738  00011D             	SensorMathBattCapacity_DEC_99:
   739  00011D   2D63(1)  		mov	a,#(99)
   740  00011E   2F20(1)  		b0mov	_batt_capacity_tmp,a
   741  00011F   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   742  000120             	SensorMathBattCapacity_DEC_90:
   743  000120             		comparison_16b	#(2040&0xff),#((2040>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_80,SensorMathBattCapacity_DEC_90_more
   744  000120   2DF8(1)     	mov  	a,#(2040&0xff)	//先减低字节
   745  000121   221A(1)     	sub    	a,_ad_buf_tmp+0	
   746  000122   2D07(1)     	mov  	a,#((2040>>8)&0xff)	//再减高字节
   747  000123   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   748  000124   7286(1+S)     	b0bts0 	FC         	//
   749  000125   812A(2)     	jmp    	SensorMathBattCapacity_DEC_80     	//如果等于0就 >=
   750  000126   8127(2)     	jmp    	SensorMathBattCapacity_DEC_90_more     	//如果等于1就 <
   751  000127             	SensorMathBattCapacity_DEC_90_more:
   752  000127   2D5A(1)  		mov	a,#(90)
   753  000128   2F20(1)  		b0mov	_batt_capacity_tmp,a
   754  000129   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   755  00012A             	SensorMathBattCapacity_DEC_80:
   756  00012A             		comparison_16b	#(1990&0xff),#((1990>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_70,SensorMathBattCapacity_DEC_80_more
   757  00012A   2DC6(1)     	mov  	a,#(1990&0xff)	//先减低字节
   758  00012B   221A(1)     	sub    	a,_ad_buf_tmp+0	
   759  00012C   2D07(1)     	mov  	a,#((1990>>8)&0xff)	//再减高字节
   760  00012D   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   761  00012E   7286(1+S)     	b0bts0 	FC         	//
   762  00012F   8134(2)     	jmp    	SensorMathBattCapacity_DEC_70     	//如果等于0就 >=
   763  000130   8131(2)     	jmp    	SensorMathBattCapacity_DEC_80_more     	//如果等于1就 <
   764  000131             	SensorMathBattCapacity_DEC_80_more:
   765  000131   2D50(1)  		mov	a,#(80)
   766  000132   2F20(1)  		b0mov	_batt_capacity_tmp,a
   767  000133   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   768  000134             	SensorMathBattCapacity_DEC_70:
   769  000134             		comparison_16b	#(1940&0xff),#((1940>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_60,SensorMathBattCapacity_DEC_70_more
   770  000134   2D94(1)     	mov  	a,#(1940&0xff)	//先减低字节
   771  000135   221A(1)     	sub    	a,_ad_buf_tmp+0	
   772  000136   2D07(1)     	mov  	a,#((1940>>8)&0xff)	//再减高字节
   773  000137   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   774  000138   7286(1+S)     	b0bts0 	FC         	//
   775  000139   813E(2)     	jmp    	SensorMathBattCapacity_DEC_60     	//如果等于0就 >=
   776  00013A   813B(2)     	jmp    	SensorMathBattCapacity_DEC_70_more     	//如果等于1就 <
   777  00013B             	SensorMathBattCapacity_DEC_70_more:
   778  00013B   2D46(1)  		mov	a,#(70)
   779  00013C   2F20(1)  		b0mov	_batt_capacity_tmp,a
   780  00013D   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   781  00013E             	SensorMathBattCapacity_DEC_60:
   782  00013E             		comparison_16b	#(1890&0xff),#((1890>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_50,SensorMathBattCapacity_DEC_60_more
   783  00013E   2D62(1)     	mov  	a,#(1890&0xff)	//先减低字节
   784  00013F   221A(1)     	sub    	a,_ad_buf_tmp+0	
   785  000140   2D07(1)     	mov  	a,#((1890>>8)&0xff)	//再减高字节
   786  000141   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   787  000142   7286(1+S)     	b0bts0 	FC         	//
   788  000143   8148(2)     	jmp    	SensorMathBattCapacity_DEC_50     	//如果等于0就 >=
   789  000144   8145(2)     	jmp    	SensorMathBattCapacity_DEC_60_more     	//如果等于1就 <
   790  000145             	SensorMathBattCapacity_DEC_60_more:
   791  000145   2D3C(1)  		mov	a,#(60)
   792  000146   2F20(1)  		b0mov	_batt_capacity_tmp,a
   793  000147   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   794  000148             	SensorMathBattCapacity_DEC_50:
   795  000148             		comparison_16b	#(1840&0xff),#((1840>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_40,SensorMathBattCapacity_DEC_50_more
   796  000148   2D30(1)     	mov  	a,#(1840&0xff)	//先减低字节
   797  000149   221A(1)     	sub    	a,_ad_buf_tmp+0	
   798  00014A   2D07(1)     	mov  	a,#((1840>>8)&0xff)	//再减高字节
   799  00014B   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   800  00014C   7286(1+S)     	b0bts0 	FC         	//
   801  00014D   8152(2)     	jmp    	SensorMathBattCapacity_DEC_40     	//如果等于0就 >=
   802  00014E   814F(2)     	jmp    	SensorMathBattCapacity_DEC_50_more     	//如果等于1就 <
   803  00014F             	SensorMathBattCapacity_DEC_50_more:
   804  00014F   2D32(1)  		mov	a,#(50)
   805  000150   2F20(1)  		b0mov	_batt_capacity_tmp,a
   806  000151   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   807  000152             	SensorMathBattCapacity_DEC_40:
   808  000152             		comparison_16b	#(1790&0xff),#((1790>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_30,SensorMathBattCapacity_DEC_40_more
   809  000152   2DFE(1)     	mov  	a,#(1790&0xff)	//先减低字节
   810  000153   221A(1)     	sub    	a,_ad_buf_tmp+0	
   811  000154   2D06(1)     	mov  	a,#((1790>>8)&0xff)	//再减高字节
   812  000155   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   813  000156   7286(1+S)     	b0bts0 	FC         	//
   814  000157   815C(2)     	jmp    	SensorMathBattCapacity_DEC_30     	//如果等于0就 >=
   815  000158   8159(2)     	jmp    	SensorMathBattCapacity_DEC_40_more     	//如果等于1就 <
   816  000159             	SensorMathBattCapacity_DEC_40_more:
   817  000159   2D28(1)  		mov	a,#(40)
   818  00015A   2F20(1)  		b0mov	_batt_capacity_tmp,a
   819  00015B   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   820  00015C             	SensorMathBattCapacity_DEC_30:
   821  00015C             		comparison_16b	#(1740&0xff),#((1740>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_20,SensorMathBattCapacity_DEC_30_more
   822  00015C   2DCC(1)     	mov  	a,#(1740&0xff)	//先减低字节
   823  00015D   221A(1)     	sub    	a,_ad_buf_tmp+0	
   824  00015E   2D06(1)     	mov  	a,#((1740>>8)&0xff)	//再减高字节
   825  00015F   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   826  000160   7286(1+S)     	b0bts0 	FC         	//
   827  000161   8166(2)     	jmp    	SensorMathBattCapacity_DEC_20     	//如果等于0就 >=
   828  000162   8163(2)     	jmp    	SensorMathBattCapacity_DEC_30_more     	//如果等于1就 <
   829  000163             	SensorMathBattCapacity_DEC_30_more:
   830  000163   2D1E(1)  		mov	a,#(30)
   831  000164   2F20(1)  		b0mov	_batt_capacity_tmp,a
   832  000165   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   833  000166             	SensorMathBattCapacity_DEC_20:
   834  000166             		comparison_16b	#(1690&0xff),#((1690>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_10,SensorMathBattCapacity_DEC_20_more
   835  000166   2D9A(1)     	mov  	a,#(1690&0xff)	//先减低字节
   836  000167   221A(1)     	sub    	a,_ad_buf_tmp+0	
   837  000168   2D06(1)     	mov  	a,#((1690>>8)&0xff)	//再减高字节
   838  000169   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   839  00016A   7286(1+S)     	b0bts0 	FC         	//
   840  00016B   8170(2)     	jmp    	SensorMathBattCapacity_DEC_10     	//如果等于0就 >=
   841  00016C   816D(2)     	jmp    	SensorMathBattCapacity_DEC_20_more     	//如果等于1就 <
   842  00016D             	SensorMathBattCapacity_DEC_20_more:
   843  00016D   2D14(1)  		mov	a,#(20)
   844  00016E   2F20(1)  		b0mov	_batt_capacity_tmp,a
   845  00016F   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   846  000170             	SensorMathBattCapacity_DEC_10:
   847  000170             		comparison_16b	#(1640&0xff),#((1640>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0,SensorMathBattCapacity_DEC_10_more
   848  000170   2D68(1)     	mov  	a,#(1640&0xff)	//先减低字节
   849  000171   221A(1)     	sub    	a,_ad_buf_tmp+0	
   850  000172   2D06(1)     	mov  	a,#((1640>>8)&0xff)	//再减高字节
   851  000173   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   852  000174   7286(1+S)     	b0bts0 	FC         	//
   853  000175   817A(2)     	jmp    	SensorMathBattCapacity_DEC_0     	//如果等于0就 >=
   854  000176   8177(2)     	jmp    	SensorMathBattCapacity_DEC_10_more     	//如果等于1就 <
   855  000177             	SensorMathBattCapacity_DEC_10_more:
   856  000177   2D0A(1)  		mov	a,#(10)
   857  000178   2F20(1)  		b0mov	_batt_capacity_tmp,a
   858  000179   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   859  00017A             	SensorMathBattCapacity_DEC_0:
   860  00017A             		comparison_16b	#(1590&0xff),#((1590>>8)&0xff),_ad_buf_tmp+0,_ad_buf_tmp+1,SensorMathBattCapacity_DEC_0_less,SensorMathBattCapacity_DEC_0_more
   861  00017A   2D36(1)     	mov  	a,#(1590&0xff)	//先减低字节
   862  00017B   221A(1)     	sub    	a,_ad_buf_tmp+0	
   863  00017C   2D06(1)     	mov  	a,#((1590>>8)&0xff)	//再减高字节
   864  00017D   201B(1)     	sbc    	a,_ad_buf_tmp+1	//
   865  00017E   7286(1+S)     	b0bts0 	FC         	//
   866  00017F   8184(2)     	jmp    	SensorMathBattCapacity_DEC_0_less     	//如果等于0就 >=
   867  000180   8181(2)     	jmp    	SensorMathBattCapacity_DEC_0_more     	//如果等于1就 <
   868  000181             	SensorMathBattCapacity_DEC_0_more:
   869  000181   2D01(1)  		mov	a,#(1)
   870  000182   2F20(1)  		b0mov	_batt_capacity_tmp,a
   871  000183   8186(2)  		jmp	SensorMathBattCapacity_DEC_End
   872  000184             	SensorMathBattCapacity_DEC_0_less:
   873  000184   2D00(1)  		mov	a,#(0)
   874  000185   2F20(1)  		b0mov	_batt_capacity_tmp,a
   875  000186             	SensorMathBattCapacity_DEC_End:
   876  000186   2E20(1)  		b0mov	a,_batt_capacity_tmp
   877  000187   221F(1)  		sub	a,_cur_batt_capacity
   878  000188   7286(1+S)  		b0bts0	fc
   879  000189   818C(2)  		jmp	SensorMathBattCapacity_Exit
   880  00018A   2E20(1)  		b0mov	a,_batt_capacity_tmp
   881  00018B   2F1F(1)  		b0mov	_cur_batt_capacity,a	
   882  00018C             //====================================================================
   883  00018C             	SensorMathBattCapacity_Exit:		
   884  00018C   0E00(2)  		ret
   885  00018D             //==================================================================================================
   886  00018D             	SensorMathInputVolgate:
   887  00018D             		//V = 21 * AD / 2048
   888  00018D   2E1A(1)  		b0mov	a,_ad_buf_tmp+0
   889  00018E   2F05(1)  		b0mov	_d_math_input0+0,a
   890  00018F   2E1B(1)  		b0mov	a,_ad_buf_tmp+1
   891  000190   2F06(1)  		b0mov	_d_math_input0+1,a
   892  000191   2D15(1)  		mov	a,#(21)
   893  000192   2F08(1)  		b0mov	_d_math_input1+0,a
   894  000193   C052(2)  		call	__mul_u16_u8
   895  000194             		
   896  000194   2E0B(1)  		b0mov	a,_d_math_output0+0
   897  000195   2F05(1)  		b0mov	_d_math_input0+0,a
   898  000196   2E0C(1)  		b0mov	a,_d_math_output0+1
   899  000197   2F06(1)  		b0mov	_d_math_input0+1,a
   900  000198   2D08(1)  		mov	a,#((2048 >> 8) & 0xFF)
   901  000199   2F08(1)  		b0mov	_d_math_input1+0,a
   902  00019A   2D00(1)  		mov	a,#((2048) & 0xFF)
   903  00019B   2F09(1)  		b0mov	_d_math_input1+1,a
   904  00019C   C034(2)  		call	__div_u16_u16
   905  00019D             
   906  00019D   2E0B(1)  		b0mov	a,_d_math_output0+0
   907  00019E   2F1E(1)  		b0mov	_cur_input_volgate,a
   908  00019F   245A(1)  		sub	a,#(90)
   909  0001A0   7A86(1+S)  		b0bts1	fc
   910  0001A1   81A4(2)  		jmp	$+3
   911  0001A2   6C00(1)  		b0bset	_input_power_flag
   912  0001A3   81A5(2)  		jmp	$+2
   913  0001A4   6400(1)  		b0bclr	_input_power_flag
   914  0001A5   0E00(2)  		ret
   915  0001A6             //==================================================================================================
   916  0001A6             //
   917  0001A6             	SensorFuntion macro
   918  0001A6             		incms	_adc_ch_dly
   919  0001A6             		nop
   920  0001A6             		b0mov	a,_adc_ch_dly
   921  0001A6             		sub	a,#(10)
   922  0001A6             		b0bts1	fc
   923  0001A6             		jmp	SensorFuntion_END  		
   924  0001A6             		clr	_adc_ch_dly
   925  0001A6             	SensorFuntion_start_adc:
   926  0001A6             		b0mov	a,_adc_ch_index
   927  0001A6             		@JMP_A	3
   928  0001A6             		jmp	SensorFuntion_BATT   
   929  0001A6             		jmp	SensorFuntion_INPUT   
   930  0001A6             		jmp	SensorFuntion_OUTPUT
   931  0001A6             	SensorFuntion_BATT:
   932  0001A6             		SensorADConvert_CH 5
   933  0001A6                             call	SensorMathBattCapacity
   934  0001A6             		mov	a,#(1)
   935  0001A6             		b0mov	_adc_ch_index,a
   936  0001A6             		jmp	SensorFuntion_END
   937  0001A6             	SensorFuntion_INPUT:
   938  0001A6             		SensorADConvert_CH 3
   939  0001A6             		call	SensorMathInputVolgate
   940  0001A6             	
   941  0001A6             		mov	a,#(2)
   942  0001A6             		b0mov	_adc_ch_index,a
   943  0001A6             		jmp	SensorFuntion_END
   944  0001A6             	SensorFuntion_OUTPUT:
   945  0001A6             		b0bts1	P4.4
   946  0001A6             		jmp	$+3
   947  0001A6             		b0bset 	_is_output_en_flag
   948  0001A6             		jmp	$+2
   949  0001A6             		b0bclr	_is_output_en_flag
   950  0001A6             
   951  0001A6             		mov	a,#(0)
   952  0001A6             		b0mov	_adc_ch_index,a
   953  0001A6             	SensorFuntion_END:
   954  0001A6             		endm
   955  0001A6             //========================================================================================
   956  0001A6             	SensorFuntion_IDLE:
   957  0001A6             		//SensorADConvert_CH 3
   958  0001A6             		//call	SensorMathInputVolgate
   959  0001A6             		//mov	a,#(0)
   960  0001A6             		//b0mov	ADM,a
   961  0001A6             
   962  0001A6   7CD4(1+S)  		b0bts1	P4.4
   963  0001A7   81AA(2)  		jmp	$+3
   964  0001A8   6F00(1)  		b0bset 	_is_output_en_flag
   965  0001A9   81AB(2)  		jmp	$+2
   966  0001AA   6700(1)  		b0bclr	_is_output_en_flag
   967  0001AB             	SensorFuntion_IDLE_END:
   968  0001AB   0E00(2)  		ret
   969  0001AC             //========================================================================================
   970  0001AC             	SensorInit macro
   971  0001AC             		endm
   972  0001AC             //========================================================================================
   973  0001AC             //end files
   974  0001AC             
   975  0001AC             
   976  0001AC             
   977  0001AC             
   978  0001AC             	include key.h
   979  0001AC             /*
   980  0001AC             	按键扫描和执行
   981  0001AC             */
   982  0001AC             
   983  E 000400D0         	KEY_INPUT	equ	P0.4
   984  0001AC             //==========================================================
   985  0001AC             	KeyFuntion :
   986  0001AC   0B23(1)  		rlcm	_key_bit_map  //左移位
   987  0001AD   7CD0(1+S)  		b0bts1	P0.4
   988  0001AE   81B1(2)  		jmp	$+3
   989  0001AF   6823(1)  		b0bset	_key_bit_map.0
   990  0001B0   81B2(2)  		jmp	$+2
   991  0001B1   6023(1)  		b0bclr	_key_bit_map.0
   992  0001B2             		
   993  0001B2   1523(1+S)  		incs	_key_bit_map	
   994  0001B3   81B5(2)  		jmp	$+2
   995  0001B4   81DB(2)  		jmp	KeyFuntion_NOKEY
   996  0001B5             
   997  0001B5             	//----------------------------------------
   998  0001B5             	/*	b0mov	a,_key_dly
   999  0001B5             		cmprs	a,#(0)
  1000  0001B5             		jmp	KeyFuntion_DLY
  1001  0001B5             		jmp	KeyFuntion_READY_KEY
  1002  0001B5             	KeyFuntion_DLY:
  1003  0001B5             		decms	_key_dly
  1004  0001B5             		jmp	KeyFuntion_NOKEY
  1005  0001B5             	KeyFuntion_READY_KEY:
  1006  0001B5             		mov	a,#(SYSTEM_TICK)
  1007  0001B5             		b0mov	_key_dly,a*/
  1008  0001B5                     //----------------------------------------
  1009  0001B5             
  1010  0001B5   2DE1(1)  		mov	a#(11100001b)
  1011  0001B6   0723(1+S)  		cmprs	a,_key_bit_map
  1012  0001B7   81B9(2)  		jmp	$+2
  1013  0001B8   81BD(2)  		jmp	KeyFuntion_CLICK
  1014  0001B9             
  1015  0001B9   2DE6(1)  		mov	a,#(11100110b)
  1016  0001BA   0723(1+S)  		cmprs	a,_key_bit_map
  1017  0001BB   81DB(2)  		jmp	KeyFuntion_NOKEY
  1018  0001BC   81D1(2)  		jmp	KeyFuntion_DOUBLE
  1019  0001BD             	KeyFuntion_CLICK:	//单击
  1020  0001BD   7D00(1+S)  		b0bts1	_led_on_off_flag
  1021  0001BE   81DB(2)  		jmp	KeyFuntion_Exit
  1022  0001BF             
  1023  0001BF   2625(1+S)  		decms	_led_mode
  1024  0001C0   81C3(2)  		jmp	KeyFuntion_CLICK_END_MOD2
  1025  0001C1   2D05(1)  		mov	a,#(5)
  1026  0001C2   2F25(1)  		b0mov	_led_mode,a
  1027  0001C3             
  1028  0001C3             	KeyFuntion_CLICK_END_MOD2:
  1029  0001C3   2D01(1)  		mov	a,#(1)
  1030  0001C4   2F27(1)  		b0mov	_led_dly,a
  1031  0001C5             
  1032  0001C5             		//_led_mode == 2(LedFunction_RB)
  1033  0001C5   2D02(1)  		mov	a,#(2)       
  1034  0001C6   0725(1+S)  		cmprs	a,_led_mode  
  1035  0001C7   81CB(2)  		jmp	KeyFuntion_CLICK_END_MOD1
  1036  0001C8   2D0C(1)  		mov	a,#(12)
  1037  0001C9   2F26(1)  		b0mov	_led_mode_sub,a
  1038  0001CA   81DB(2)  		jmp	KeyFuntion_Exit
  1039  0001CB             	KeyFuntion_CLICK_END_MOD1:
  1040  0001CB             		//_led_mode == 1(LedFunction_R_FLASH)
  1041  0001CB   2D01(1)  		mov	a,#(1)       
  1042  0001CC   0725(1+S)  		cmprs	a,_led_mode  
  1043  0001CD   81DB(2)  		jmp	KeyFuntion_Exit
  1044  0001CE   2D0A(1)  		mov	a,#(10)
  1045  0001CF   2F26(1)  		b0mov	_led_mode_sub,a
  1046  0001D0   81DB(2)  		jmp	KeyFuntion_Exit
  1047  0001D1             
  1048  0001D1             	KeyFuntion_DOUBLE:	//双击
  1049  0001D1   7500(1+S)  		b0bts0	_led_on_off_flag
  1050  0001D2   81D9(2)  		jmp	KeyFuntion_DOUBLE_1
  1051  0001D3   6D00(1)  		b0bset	_led_on_off_flag
  1052  0001D4   2D05(1)  		mov	a,#(5)
  1053  0001D5   2F25(1)  		b0mov	_led_mode,a
  1054  0001D6   2D01(1)  		mov	a,#(1)
  1055  0001D7   2F27(1)  		b0mov	_led_dly,a
  1056  0001D8   81DB(2)  		jmp	KeyFuntion_Exit
  1057  0001D9             	KeyFuntion_DOUBLE_1:
  1058  0001D9   6500(1)  		b0bclr	_led_on_off_flag
  1059  0001DA             //		LED_W_OFF
  1060  0001DA             //		LED_R_OFF
  1061  0001DA             //		LED_B_OFF
  1062  0001DA   81DB(2)  		jmp	KeyFuntion_Exit
  1063  0001DB             	KeyFuntion_NOKEY:	
  1064  0001DB             	KeyFuntion_Exit:
  1065  0001DB   0E00(2)  		ret
  1066  0001DC             //==========================================================
  1067  0001DC             	LED_W_ON	macro
  1068  0001DC             		b0bset	P5.3
  1069  0001DC             		endm
  1070  0001DC             	LED_W_OFF	macro
  1071  0001DC             		b0bclr	P5.3
  1072  0001DC             		endm
  1073  0001DC             
  1074  E 000200D0         	LED_R	equ	P0.2
  1075  0001DC             	LED_R_ON	macro
  1076  0001DC             		b0bset	P0.2
  1077  0001DC             		endm
  1078  0001DC             	LED_R_OFF	macro
  1079  0001DC             		b0bclr	P0.2
  1080  0001DC             		endm
  1081  0001DC             
  1082  E 000300D0         	LED_B	equ	P0.3
  1083  0001DC             	LED_B_ON	macro
  1084  0001DC             		b0bset	P0.3
  1085  0001DC             		endm
  1086  0001DC             	LED_B_OFF	macro
  1087  0001DC             		b0bclr	P0.3
  1088  0001DC             		endm
  1089  0001DC             
  1090  0001DC             	LedFunction macro
  1091  0001DC             		b0bts1	_led_on_off_flag
  1092  0001DC             		jmp	LedFunction_Exit
  1093  0001DC             
  1094  0001DC             		b0mov	a,_led_mode
  1095  0001DC             		sub	a,#(1)
  1096  0001DC             		@JMP_A	5
  1097  0001DC             		jmp	LedFunction_R_FLASH
  1098  0001DC             		jmp	LedFunction_RB 
  1099  0001DC             		jmp	LedFunction_R
  1100  0001DC             		jmp	LedFunction_B
  1101  0001DC             		jmp	LedFunction_W
  1102  0001DC             	LedFunction_R_FLASH:
  1103  0001DC             		LED_W_OFF
  1104  0001DC             		LED_B_OFF
  1105  0001DC             		//if(--_led_dly != 0)
  1106  0001DC             		//{
  1107  0001DC             		//	jmp	LedFunction_Exit
  1108  0001DC             		//}
  1109  0001DC             		decms	_led_dly
  1110  0001DC             		jmp	LedFunction_Exit
  1111  0001DC             		LED_R_OFF
  1112  0001DC             
  1113  0001DC             		b0mov	a,_led_mode_sub
  1114  0001DC             		sub	a,#(1)
  1115  0001DC             		@JMP_A	10
  1116  0001DC             		jmp	LedFunction_R_FLASH_OFF_S_2
  1117  0001DC             		jmp	LedFunction_R_FLASH_ON_S_2
  1118  0001DC             		jmp	LedFunction_R_FLASH_OFF_S_1
  1119  0001DC             		jmp	LedFunction_R_FLASH_ON_S_1
  1120  0001DC             		jmp	LedFunction_R_FLASH_OFF_L_3
  1121  0001DC             		jmp	LedFunction_R_FLASH_ON_L_3
  1122  0001DC             		jmp	LedFunction_R_FLASH_OFF_L_2
  1123  0001DC             		jmp	LedFunction_R_FLASH_ON_L_2
  1124  0001DC             		jmp	LedFunction_R_FLASH_OFF_L_1
  1125  0001DC             		jmp	LedFunction_R_FLASH_ON_L_1
  1126  0001DC             	  LedFunction_R_FLASH_ON_L_1:
  1127  0001DC             	  LedFunction_R_FLASH_ON_L_2:
  1128  0001DC             	  LedFunction_R_FLASH_ON_L_3:
  1129  0001DC             		LED_R_ON
  1130  0001DC             		mov	a,#(10)
  1131  0001DC             		jmp	LedFunction_R_FLASH_END
  1132  0001DC             	  LedFunction_R_FLASH_OFF_L_1:
  1133  0001DC             	  LedFunction_R_FLASH_OFF_L_2:
  1134  0001DC             	  LedFunction_R_FLASH_OFF_L_3:
  1135  0001DC             		mov	a,#(10)
  1136  0001DC             		jmp	LedFunction_R_FLASH_END
  1137  0001DC             	  LedFunction_R_FLASH_ON_S_1:
  1138  0001DC             	  LedFunction_R_FLASH_ON_S_2:
  1139  0001DC             		LED_R_ON
  1140  0001DC             		mov	a,#(3)
  1141  0001DC             		jmp	LedFunction_R_FLASH_END
  1142  0001DC             	  LedFunction_R_FLASH_OFF_S_1:
  1143  0001DC             	  LedFunction_R_FLASH_OFF_S_2:
  1144  0001DC             		mov	a,#(3)
  1145  0001DC             		//jmp	LedFunction_R_FLASH_END
  1146  0001DC                       LedFunction_R_FLASH_END:
  1147  0001DC             		b0mov	_led_dly,a
  1148  0001DC             
  1149  0001DC             		//if(--_led_mode_sub == 0)
  1150  0001DC             		//{
  1151  0001DC             		//	_led_mode_sub = 10;
  1152  0001DC             		//}
  1153  0001DC             		decms	_led_mode_sub
  1154  0001DC             		jmp	LedFunction_Exit
  1155  0001DC             		mov	a,#(10)
  1156  0001DC             		b0mov	_led_mode_sub,a
  1157  0001DC             		jmp	LedFunction_Exit
  1158  0001DC             	LedFunction_RB:
  1159  0001DC             		LED_W_OFF
  1160  0001DC             		//if(--_led_dly != 0)
  1161  0001DC             		//{
  1162  0001DC             		//	jmp	LedFunction_Exit
  1163  0001DC             		//}
  1164  0001DC             		decms	_led_dly
  1165  0001DC             		jmp	LedFunction_Exit
  1166  0001DC             		LED_R_OFF
  1167  0001DC             		LED_B_OFF
  1168  0001DC             
  1169  0001DC             		b0mov	a,_led_mode_sub
  1170  0001DC             		sub	a,#(1)
  1171  0001DC             		@JMP_A	12
  1172  0001DC             		jmp	LedFunction_RB_B_OFF3
  1173  0001DC             		jmp	LedFunction_RB_B_ON3
  1174  0001DC             		jmp	LedFunction_RB_B_OFF2
  1175  0001DC             		jmp	LedFunction_RB_B_ON2
  1176  0001DC             		jmp	LedFunction_RB_B_OFF1
  1177  0001DC             		jmp	LedFunction_RB_B_ON1
  1178  0001DC             		jmp	LedFunction_RB_R_OFF3
  1179  0001DC             		jmp	LedFunction_RB_R_ON3
  1180  0001DC             		jmp	LedFunction_RB_R_OFF2
  1181  0001DC             		jmp	LedFunction_RB_R_ON2
  1182  0001DC             		jmp	LedFunction_RB_R_OFF1
  1183  0001DC             		jmp	LedFunction_RB_R_ON1
  1184  0001DC             	  LedFunction_RB_R_ON1:
  1185  0001DC             	  LedFunction_RB_R_ON2:
  1186  0001DC             	  LedFunction_RB_R_ON3:
  1187  0001DC             		LED_R_ON
  1188  0001DC             		mov	a,#(3)
  1189  0001DC             		jmp	LedFunction_RB_END
  1190  0001DC             	  LedFunction_RB_R_OFF1:
  1191  0001DC             	  LedFunction_RB_R_OFF2:
  1192  0001DC             		mov	a,#(3)
  1193  0001DC             		jmp	LedFunction_RB_END
  1194  0001DC             	  LedFunction_RB_R_OFF3:
  1195  0001DC             		mov	a,#(10)
  1196  0001DC             		jmp	LedFunction_RB_END
  1197  0001DC             	  LedFunction_RB_B_ON1:
  1198  0001DC                       LedFunction_RB_B_ON2:
  1199  0001DC                       LedFunction_RB_B_ON3:
  1200  0001DC             		LED_B_ON
  1201  0001DC             		mov	a,#(3)
  1202  0001DC             		jmp	LedFunction_RB_END
  1203  0001DC             	  LedFunction_RB_B_OFF1:
  1204  0001DC             	  LedFunction_RB_B_OFF2:
  1205  0001DC             		mov	a,#(3)
  1206  0001DC             		jmp	LedFunction_RB_END
  1207  0001DC             	  LedFunction_RB_B_OFF3:
  1208  0001DC             		mov	a,#(10)
  1209  0001DC             		jmp	LedFunction_RB_END
  1210  0001DC             	  LedFunction_RB_END:
  1211  0001DC             		b0mov	_led_dly,a
  1212  0001DC             
  1213  0001DC             		//if(--_led_mode_sub == 0)
  1214  0001DC             		//{
  1215  0001DC             		//	_led_mode_sub = 12;
  1216  0001DC             		//}
  1217  0001DC             		decms	_led_mode_sub
  1218  0001DC             		jmp	LedFunction_Exit
  1219  0001DC             		mov	a,#(12)
  1220  0001DC             		b0mov	_led_mode_sub,a
  1221  0001DC             
  1222  0001DC             		jmp	LedFunction_Exit
  1223  0001DC             	LedFunction_R:
  1224  0001DC             		LED_W_OFF
  1225  0001DC             		LED_R_ON
  1226  0001DC             		LED_B_OFF
  1227  0001DC             		jmp	LedFunction_Exit
  1228  0001DC             	LedFunction_B:
  1229  0001DC             		LED_W_OFF
  1230  0001DC             		LED_R_OFF
  1231  0001DC             		LED_B_ON
  1232  0001DC             		jmp	LedFunction_Exit
  1233  0001DC             	LedFunction_W:
  1234  0001DC             		LED_W_ON
  1235  0001DC             		LED_R_OFF
  1236  0001DC             		LED_B_OFF
  1237  0001DC             		jmp	LedFunction_Exit
  1238  0001DC             	LedFunction_Exit:
  1239  0001DC             		endm
  1240  0001DC             //==========================================================
  1241  0001DC             	KeyInit macro
  1242  0001DC             		mov	a,#(0xff)
  1243  0001DC             		b0mov	_key_bit_map,a
  1244  0001DC             		endm
  1245  0001DC             //==========================================================
  1246  0001DC             	include display.h
  1247  0001DC             /*
  1248  0001DC             	数码管扫描和显示相关代码
  1249  0001DC             	上电全显2S
  1250  0001DC             	温度数据显示每秒刷新一次
  1251  0001DC             	温度过高显示 "Hi"
  1252  0001DC             	温度过低显示 "Lo"
  1253  0001DC             */
  1254  0001DC             //==========================================================
  1255  0001DC             //宏定义
  1256  0001DC             	COM_ALL_LOW	macro
  1257  0001DC             		mov	a,#(~(BIT0 | BIT1))
  1258  0001DC             		and	P0,a
  1259  0001DC             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1260  0001DC             		and	P4,a
  1261  0001DC             		mov	a,#(~(BIT4))
  1262  0001DC             		and	P5,a
  1263  0001DC             		endm
  1264  0001DC             		
  1265  0001DC             	COM_ALL_INPUT	macro
  1266  0001DC             		mov	a,#(~(BIT0 | BIT1))
  1267  0001DC             		and	P0M,a
  1268  0001DC             		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1269  0001DC             		and	P4M,a
  1270  0001DC             		mov	a,#(~(BIT4))
  1271  0001DC             		and	P5M,a
  1272  0001DC             		endm
  1273  0001DC             
  1274  0001DC             	COM6_OUT_PP	macro
  1275  0001DC             		b0bset	P0M.1
  1276  0001DC             		endm
  1277  0001DC             	COM6_LOW  	macro	
  1278  0001DC             		b0bclr	P0.1
  1279  0001DC             		endm
  1280  0001DC             	COM6_HIGH  	macro	
  1281  0001DC             		b0bset	P0.1
  1282  0001DC             		endm
  1283  0001DC             
  1284  0001DC             	COM5_OUT_PP	macro
  1285  0001DC             		b0bset	P5M.4
  1286  0001DC             		endm
  1287  0001DC             	COM5_LOW  	macro	
  1288  0001DC             		b0bclr	P5.4
  1289  0001DC             		endm
  1290  0001DC             	COM5_HIGH  	macro	
  1291  0001DC             		b0bset	P5.4
  1292  0001DC             		endm
  1293  0001DC             
  1294  0001DC             	COM4_OUT_PP	macro
  1295  0001DC             		b0bset	P4M.1
  1296  0001DC             		endm
  1297  0001DC             	COM4_LOW  	macro	
  1298  0001DC             		b0bclr	P4.1
  1299  0001DC             		endm
  1300  0001DC             	COM4_HIGH  	macro	
  1301  0001DC             		b0bset	P4.1
  1302  0001DC             		endm
  1303  0001DC             
  1304  0001DC             	COM3_OUT_PP	macro
  1305  0001DC             		b0bset	P4M.0
  1306  0001DC             		endm
  1307  0001DC             	COM3_LOW  	macro	
  1308  0001DC             		b0bclr	P4.0
  1309  0001DC             		endm
  1310  0001DC             	COM3_HIGH  	macro	
  1311  0001DC             		b0bset	P4.0
  1312  0001DC             		endm
  1313  0001DC             
  1314  0001DC             	COM2_OUT_PP	macro
  1315  0001DC             		b0bset	P0M.0
  1316  0001DC             		endm
  1317  0001DC             	COM2_LOW  	macro	
  1318  0001DC             		b0bclr	P0.0
  1319  0001DC             		endm
  1320  0001DC             	COM2_HIGH  	macro	
  1321  0001DC             		b0bset	P0.0
  1322  0001DC             		endm
  1323  0001DC             
  1324  0001DC             	COM1_OUT_PP	macro
  1325  0001DC             		b0bset	P4M.2
  1326  0001DC             		endm
  1327  0001DC             	COM1_LOW  	macro	
  1328  0001DC             		b0bclr	P4.2
  1329  0001DC             		endm
  1330  0001DC             	COM1_HIGH  	macro	
  1331  0001DC             		b0bset	P4.2
  1332  0001DC             		endm
  1333  0001DC             //==========================================================
  1334  0001DC             //函数
  1335  0001DC             
  1336  0001DC             //==========================================================
  1337  0001DC             //此函数在2.5ms中断中调用
  1338  0001DC             	LedScan_ISR macro
  1339  0001DC             		COM_ALL_LOW
  1340  0001DC             		nop
  1341  0001DC             		COM_ALL_INPUT
  1342  0001DC             		
  1343  0001DC             		//if(--_led_scan_index == 0)
  1344  0001DC             		//{
  1345  0001DC             		//	_led_scan_index = 6;
  1346  0001DC             		//}
  1347  0001DC             		decms	_led_scan_index
  1348  0001DC             		jmp	$ + 3
  1349  0001DC             		mov	a,#(6)
  1350  0001DC             		b0mov	_led_scan_index,a
  1351  0001DC             		
  1352  0001DC             		mov	a,_led_scan_index
  1353  0001DC             		sub	a,#(1)
  1354  0001DC             		@JMP_A	6
  1355  0001DC             		jmp	LedScan_ISR_COM1
  1356  0001DC             		jmp	LedScan_ISR_COM2
  1357  0001DC             		jmp	LedScan_ISR_COM3
  1358  0001DC             		jmp	LedScan_ISR_COM4
  1359  0001DC             		jmp	LedScan_ISR_COM5
  1360  0001DC             		jmp	LedScan_ISR_COM6
  1361  0001DC             	LedScan_ISR_COM1:
  1362  0001DC             		b0bts1 _disp_map+0.7
  1363  0001DC             		jmp	$+3
  1364  0001DC             		COM4_HIGH
  1365  0001DC             		COM4_OUT_PP
  1366  0001DC             		
  1367  0001DC             		b0bts1 _disp_map+1.7
  1368  0001DC             		jmp	$+3
  1369  0001DC             		COM5_HIGH
  1370  0001DC             		COM5_OUT_PP
  1371  0001DC             		
  1372  0001DC             		b0bts1 _disp_map+2.7
  1373  0001DC             		jmp	$+3
  1374  0001DC             		COM6_HIGH
  1375  0001DC             		COM6_OUT_PP
  1376  0001DC             
  1377  0001DC             		COM3_LOW
  1378  0001DC             		COM3_OUT_PP
  1379  0001DC             		jmp	LedScan_ISR_END
  1380  0001DC             	LedScan_ISR_COM2:
  1381  0001DC             		b0bts1 _disp_map+0.0
  1382  0001DC             		jmp	$+3
  1383  0001DC             		COM2_HIGH
  1384  0001DC             		COM2_OUT_PP
  1385  0001DC             	
  1386  0001DC             		b0bts1 _disp_map+0.1
  1387  0001DC             		jmp	$+3
  1388  0001DC             		COM3_HIGH
  1389  0001DC             		COM3_OUT_PP
  1390  0001DC             	
  1391  0001DC             		b0bts1 _disp_map+0.2
  1392  0001DC             		jmp	$+3
  1393  0001DC             		COM4_HIGH
  1394  0001DC             		COM4_OUT_PP
  1395  0001DC             	
  1396  0001DC             		b0bts1 _disp_map+0.3
  1397  0001DC             		jmp	$+3
  1398  0001DC             		COM5_HIGH
  1399  0001DC             		COM5_OUT_PP
  1400  0001DC             	
  1401  0001DC             		b0bts1 _disp_map+0.4
  1402  0001DC             		jmp	$+3
  1403  0001DC             		COM6_HIGH
  1404  0001DC             		COM6_OUT_PP
  1405  0001DC             		
  1406  0001DC             		COM1_LOW
  1407  0001DC             		COM1_OUT_PP
  1408  0001DC             		jmp	LedScan_ISR_END
  1409  0001DC             	LedScan_ISR_COM3:
  1410  0001DC             		b0bts1 _disp_map+1.0
  1411  0001DC             		jmp	$+3
  1412  0001DC             		COM2_LOW
  1413  0001DC             		COM2_OUT_PP
  1414  0001DC             	
  1415  0001DC             		b0bts1 _disp_map+1.1
  1416  0001DC             		jmp	$+3
  1417  0001DC             		COM3_LOW
  1418  0001DC             		COM3_OUT_PP
  1419  0001DC             	
  1420  0001DC             		b0bts1 _disp_map+1.2
  1421  0001DC             		jmp	$+3
  1422  0001DC             		COM4_LOW
  1423  0001DC             		COM4_OUT_PP
  1424  0001DC             	
  1425  0001DC             		b0bts1 _disp_map+1.3
  1426  0001DC             		jmp	$+3
  1427  0001DC             		COM5_LOW
  1428  0001DC             		COM5_OUT_PP
  1429  0001DC             	
  1430  0001DC             		b0bts1 _disp_map+1.4
  1431  0001DC             		jmp	$+3
  1432  0001DC             		COM6_LOW
  1433  0001DC             		COM6_OUT_PP
  1434  0001DC             		
  1435  0001DC             		COM1_HIGH
  1436  0001DC             		COM1_OUT_PP
  1437  0001DC             		jmp	LedScan_ISR_END
  1438  0001DC             	LedScan_ISR_COM4:
  1439  0001DC             		b0bts1 _disp_map+0.5
  1440  0001DC             		jmp	$+3
  1441  0001DC             		COM3_HIGH
  1442  0001DC             		COM3_OUT_PP
  1443  0001DC             
  1444  0001DC             		b0bts1 _disp_map+0.6
  1445  0001DC             		jmp	$+3
  1446  0001DC             		COM4_HIGH
  1447  0001DC             		COM4_OUT_PP
  1448  0001DC             
  1449  0001DC             		b0bts1 _disp_map+1.5
  1450  0001DC             		jmp	$+3
  1451  0001DC             		COM5_HIGH
  1452  0001DC             		COM5_OUT_PP
  1453  0001DC             
  1454  0001DC             		b0bts1 _disp_map+1.6
  1455  0001DC             		jmp	$+3
  1456  0001DC             		COM6_HIGH
  1457  0001DC             		COM6_OUT_PP
  1458  0001DC             		
  1459  0001DC             		COM2_LOW
  1460  0001DC             		COM2_OUT_PP
  1461  0001DC             		jmp	LedScan_ISR_END
  1462  0001DC             	LedScan_ISR_COM5:
  1463  0001DC             		b0bts1 _disp_map+2.0
  1464  0001DC             		jmp	$+3
  1465  0001DC             		COM3_LOW
  1466  0001DC             		COM3_OUT_PP
  1467  0001DC             
  1468  0001DC             		b0bts1 _disp_map+2.1
  1469  0001DC             		jmp	$+3
  1470  0001DC             		COM4_LOW
  1471  0001DC             		COM4_OUT_PP
  1472  0001DC             
  1473  0001DC             		b0bts1 _disp_map+2.2
  1474  0001DC             		jmp	$+3
  1475  0001DC             		COM5_LOW
  1476  0001DC             		COM5_OUT_PP
  1477  0001DC             
  1478  0001DC             		b0bts1 _disp_map+2.3
  1479  0001DC             		jmp	$+3
  1480  0001DC             		COM6_LOW
  1481  0001DC             		COM6_OUT_PP
  1482  0001DC             
  1483  0001DC             		COM2_HIGH
  1484  0001DC             		COM2_OUT_PP
  1485  0001DC             		jmp	LedScan_ISR_END
  1486  0001DC             	LedScan_ISR_COM6:
  1487  0001DC             		b0bts1 _disp_map+2.4
  1488  0001DC             		jmp	$+3
  1489  0001DC             		COM4_LOW
  1490  0001DC             		COM4_OUT_PP
  1491  0001DC             
  1492  0001DC             		b0bts1 _disp_map+2.5
  1493  0001DC             		jmp	$+3
  1494  0001DC             		COM5_LOW
  1495  0001DC             		COM5_OUT_PP
  1496  0001DC             
  1497  0001DC             		b0bts1 _disp_map+2.6
  1498  0001DC             		jmp	$+3
  1499  0001DC             		COM6_LOW
  1500  0001DC             		COM6_OUT_PP
  1501  0001DC             
  1502  0001DC             		COM3_HIGH
  1503  0001DC             		COM3_OUT_PP
  1504  0001DC             	LedScan_ISR_END:
  1505  0001DC             		endm
  1506  0001DC             
  1507  0001DC             //==================================================================================================
  1508  0001DC             
  1509  0001DC             //==================================================================================================
  1510  0001DC             
  1511  0001DC             //==================================================================================================
  1512  0001DC             
  1513  0001DC             //==================================================================================================	
  1514  0001DC             //在main中每50ms调用一次
  1515  0001DC             DisplayFuntion	macro
  1516  0001DC             		decms	_disp_swap_dly
  1517  0001DC             		jmp	DisplayFuntion_start_0
  1518  0001DC             		mov	a,#(SYSTEM_TICK * 3)
  1519  0001DC             		b0mov	_disp_swap_dly,a
  1520  0001DC             		
  1521  0001DC             		b0bts1  _input_power_flag
  1522  0001DC             		jmp	$+3
  1523  0001DC             		b0bts1	_disp_voltage_flag
  1524  0001DC             		jmp	$+3
  1525  0001DC             		b0bclr  _disp_voltage_flag
  1526  0001DC             		jmp	$+2
  1527  0001DC             		b0bset	_disp_voltage_flag
  1528  0001DC             
  1529  0001DC             	DisplayFuntion_start_0:	
  1530  0001DC             		b0bts0	_lcd_init_flag
  1531  0001DC             		jmp	DisplayFuntion_start
  1532  0001DC             		//if(_disp_update_dly) 
  1533  0001DC             		//{
  1534  0001DC             		//	--_disp_update_dly;
  1535  0001DC             		//	return;
  1536  0001DC             		//}
  1537  0001DC             		mov	a,#(0)
  1538  0001DC             		cmprs	a,_disp_update_dly
  1539  0001DC             		jmp	$ + 2
  1540  0001DC             		jmp	$ + 3
  1541  0001DC             		decms	_disp_update_dly
  1542  0001DC             		jmp	DisplayFuntion_END
  1543  0001DC             
  1544  0001DC             		b0bset	_lcd_init_flag
  1545  0001DC             		mov	a,#(20)
  1546  0001DC             		b0mov	_disp_update_dly,a
  1547  0001DC             
  1548  0001DC             	DisplayFuntion_start:	
  1549  0001DC             		mov	a,#(0x00)
  1550  0001DC             		b0mov	_disp_map + 0, a
  1551  0001DC             		b0mov	_disp_map + 1, a
  1552  0001DC             		b0mov	_disp_map + 2, a
  1553  0001DC             
  1554  0001DC             		b0bts0	_disp_voltage_flag
  1555  0001DC             		jmp	$+3
  1556  0001DC             		mov	a,_cur_batt_capacity
  1557  0001DC             		jmp	$+2
  1558  0001DC             		mov	a,_cur_input_volgate
  1559  0001DC             
  1560  0001DC             	DisplayFuntion_bai_wei:
  1561  0001DC             		b0mov	_d_math_input0+0,a
  1562  0001DC             		mov	a,#(100)
  1563  0001DC             		b0mov	_d_math_input1+0,a
  1564  0001DC             		call	__div_u8_u8	
  1565  0001DC             		
  1566  0001DC             		b0mov	Y,#led_num_tab$M
  1567  0001DC             		b0mov	Z,#led_num_tab$L
  1568  0001DC             		b0mov	A,_d_math_output0+0	//百位
  1569  0001DC             		add	Z,A
  1570  0001DC             		movc
  1571  0001DC             		b0mov	_disp_map+0,a
  1572  0001DC             	DisplayFuntion_shi_wei:
  1573  0001DC             		b0mov	a,_d_math_output1+0
  1574  0001DC             		b0mov	_d_math_input0+0,a
  1575  0001DC             		mov	a,#(10)
  1576  0001DC             		b0mov	_d_math_input1+0,a
  1577  0001DC             		call	__div_u8_u8
  1578  0001DC             
  1579  0001DC             		b0mov	Y,#led_num_tab$M
  1580  0001DC             		b0mov	Z,#led_num_tab$L
  1581  0001DC             		b0mov	A,_d_math_output0+0	//十位
  1582  0001DC             		add	Z,A
  1583  0001DC             		movc
  1584  0001DC             		b0mov	_disp_map+1,a
  1585  0001DC             	DisplayFuntion_ge_wei:
  1586  0001DC             		b0mov	Z,#led_num_tab$L
  1587  0001DC             		b0mov	A,_d_math_output1+0	//个位
  1588  0001DC             		add	Z,A
  1589  0001DC             		movc
  1590  0001DC             		b0mov	_disp_map+2,a
  1591  0001DC             
  1592  0001DC             		b0bts1	_disp_voltage_flag
  1593  0001DC             		jmp	DisplayFuntion_END
  1594  0001DC             
  1595  0001DC             		mov	a,#(LCD_DP)
  1596  0001DC             		or	_disp_map+2,a
  1597  0001DC             	DisplayFuntion_END:
  1598  0001DC             		endm
  1599  0001DC             //==================================================================================================
  1600  0001DC             	DisplayInit macro
  1601  0001DC             		mov	a,#(2)
  1602  0001DC             		mov	_led_scan_index,a
  1603  0001DC             		mov	_disp_swap_dly,a
  1604  0001DC             
  1605  0001DC             		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1606  0001DC             		b0mov	_disp_update_dly,a
  1607  0001DC             		mov	a,#(0xFF)
  1608  0001DC             		b0mov	_disp_map + 0, a
  1609  0001DC             		b0mov	_disp_map + 1, a
  1610  0001DC             		b0mov	_disp_map + 2, a
  1611  0001DC             
  1612  0001DC             		mov	a,#(123)
  1613  0001DC             		b0mov	_cur_input_volgate,a
  1614  0001DC             		mov	a,#(99)
  1615  0001DC             		b0mov	_cur_batt_capacity,a
  1616  0001DC             		endm
  1617  0001DC             //==================================================================================================
  1618  0001DC             /*	_disp_map[3]
  1619  0001DC             	b00->A2  b10->A3  b20->A4
  1620  0001DC             	b01->B2  b11->B3  b21->B4
  1621  0001DC             	b02->C2  b12->C3  b22->C4
  1622  0001DC             	b03->D2  b13->D3  b23->D4
  1623  0001DC             	b04->E2  b14->E3  b24->E4
  1624  0001DC             	b05->F2  b15->F3  b25->F4
  1625  0001DC             	b06->G2  b16->G3  b26->G4
  1626  0001DC             	b07->B1  b17->C1  b27->DP
  1627  0001DC             */
  1628  0001DC             //==================================================================================================
  1629  E 00000001         	LCD_A	equ	0x01
  1630  E 00000002         	LCD_B	equ     0x02
  1631  E 00000004         	LCD_C	equ     0x04
  1632  E 00000008         	LCD_D	equ     0x08
  1633  E 00000010         	LCD_E	equ     0x10
  1634  E 00000020         	LCD_F	equ     0x20
  1635  E 00000040         	LCD_G	equ     0x40
  1636  E 00000080         	LCD_H	equ    	0x80
  1637  E 00000080         	LCD_DP	equ    	0x80
  1638  0001DC             	led_num_tab:
  1639  0001DC   003F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F		/* 0 */
  1640  0001DD   0006(1)  		dw	LCD_B | LCD_C                                          	/* 1 */
  1641  0001DE   005B(1)  		dw	LCD_A | LCD_B | LCD_D | LCD_E | LCD_G                  	/* 2 */
  1642  0001DF   004F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_G                  	/* 3 */
  1643  0001E0   0066(1)  		dw	LCD_B | LCD_C | LCD_F | LCD_G                         	/* 4 */
  1644  0001E1   006D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_F | LCD_G                  	/* 5 */
  1645  0001E2   007D(1)  		dw	LCD_A | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G          	/* 6 */
  1646  0001E3   0027(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_F                          	/* 7 */
  1647  0001E4   007F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_E | LCD_F | LCD_G  	/* 8 */
  1648  0001E5   006F(1)  		dw	LCD_A | LCD_B | LCD_C | LCD_D | LCD_F | LCD_G          	/* 9 */
  1649  0001E6             		//dw	LCD_A | LCD_B | LCD_C | LCD_E | LCD_F | LCD_G          	/* a */
  1650  0001E6             		//dw	LCD_C | LCD_D | LCD_E | LCD_F | LCD_G                  	/* b */
  1651  0001E6             		//dw	LCD_A | LCD_D | LCD_E | LCD_F                          	/* c */
  1652  0001E6             		//dw	LCD_B | LCD_C | LCD_D | LCD_E | LCD_G                  	/* d */
  1653  0001E6             		//dw	LCD_A | LCD_D | LCD_E | LCD_F | LCD_G                  	/* e */
  1654  0001E6             		//dw	LCD_A | LCD_E | LCD_F | LCD_G              		/* f */
  1655  0001E6             //==================================================================================================
  1656  0001E6             //==========================================================
  1657  0001E6             //end files
  1658  0001E6             
  1659  0001E6             
  1660  0001E6             //==============================================================================
  1661  0001E6             ;-------------------------------------------------------------------------------
  1662  0001E6             ; ClrRAM
  1663  0001E6             ; Use index @YZ to clear RAM 
  1664  0001E6             ;-------------------------------------------------------------------------------
  1665  0001E6             __ClrRAM macro
  1666  0001E6             	CLR 		Y
  1667  0001E6             	B0MOV		Z,#0x3f
  1668  0001E6             ClrRAM10:
  1669  0001E6             	CLR 		@YZ
  1670  0001E6             	DECMS		Z
  1671  0001E6             	JMP 		ClrRAM10
  1672  0001E6             	CLR 		@YZ
  1673  0001E6             	endm
  1674  0001E6             
  1675  0001E6             reset:
  1676  0001E6             //_IO_Setting:
  1677  0001E6   2D0F(1)   	MOV A, #(0x0F)
  1678  0001E7   2FB8(1)    	B0MOV P0M, A	//P0 Input-Output value
  1679  0001E8   2D00(1)    	MOV A, #(0x00)
  1680  0001E9   2FE0(1)    	B0MOV P0UR, A	//P0 pull up value
  1681  0001EA   1E00(1)    	MOV A, 0x00
  1682  0001EB   2FD0(1)    	B0MOV P0, A	//P0 register value
  1683  0001EC             
  1684  0001EC   2D07(1)    	MOV A, #(0x07)
  1685  0001ED   2FC4(1)    	B0MOV P4M, A		//P4 Input-Output value
  1686  0001EE   2D00(1)    	MOV A, #(0x00)
  1687  0001EF   2FE4(1)    	B0MOV P4UR, A		//P4 pull up value
  1688  0001F0   2D08(1)    	MOV A, #(0x08)
  1689  0001F1   2FAE(1)    	B0MOV P4CON, A		//P4 Analog-Digital value
  1690  0001F2   1E00(1)    	MOV A, 0x00
  1691  0001F3   2FD4(1)    	B0MOV P4, A		//P4 register value
  1692  0001F4             
  1693  0001F4   2D18(1)    	MOV A, #(0x18)
  1694  0001F5   2FC5(1)    	B0MOV P5M, A		//P5 Input-Output value
  1695  0001F6   2D00(1)    	MOV A, #(0x00)
  1696  0001F7   2FE5(1)    	B0MOV P5UR, A		//P5 pull up value
  1697  0001F8   1E00(1)    	MOV A, 0x00
  1698  0001F9   2FD5(1)    	B0MOV P5, A	        //P5 register value
  1699  0001FA             //_Timer_Setting:
  1700  0001FA   2D24(1)  	MOV A, #0x24
  1701  0001FB   2FDA(1)  	B0MOV TC0M, A	//TC0M register value, Fcpu: 4.000000MHZ
  1702  0001FC   62D8(1)  	B0BCLR FTC0X8 //CLK source: Fcpu
  1703  0001FD   2D64(1)  	MOV A, #(0x64)
  1704  0001FE   2FDB(1)  	B0MOV TC0C, A	//TC0C register value, time: 2.500000ms(400.000000HZ)
  1705  0001FF   2D64(1)  	MOV A, #(0x64)
  1706  000200   2FCD(1)  	B0MOV TC0R, A	//TC0R register value
  1707  000201   65C8(1)  	B0BCLR FTC0IRQ
  1708  000202   6DC9(1)  	B0BSET FTC0IEN	//TC0 Interrupt enable
  1709  000203   63DA(1)  	B0BCLR FTC0CKS
  1710  000204   6FDA(1)  	B0BSET FTC0ENB	//TC0 enable
  1711  000205   69D8(1)  	B0BSET FTC0GN
  1712  000206             	
  1713  000206             	__ClrRAM
  1714  000206   2B84(1)  	CLR 		Y
  1715  000207   333F(1)  	B0MOV		Z,#0x3f
  1716  000208   2BE7(1)  	CLR 		@YZ
  1717  000209   2683(1+S)  	DECMS		Z
  1718  00020A   8208(2)  	JMP 		ClrRAM10
  1719  00020B   2BE7(1)  	CLR 		@YZ
  1720  00020C             	SensorInit
  1721  00020C             	KeyInit
  1722  00020C   2DFF(1)  		mov	a,#(0xff)
  1723  00020D   2F23(1)  		b0mov	_key_bit_map,a
  1724  00020E             	DisplayInit
  1725  00020E   2D02(1)  		mov	a,#(2)
  1726  00020F   1F18(1)  		mov	_led_scan_index,a
  1727  000210   1F13(1)  		mov	_disp_swap_dly,a
  1728  000211   2D28(1)  		mov	a,#(SYSTEM_TICK * 2)  //上电全显2S
  1729  000212   2F14(1)  		b0mov	_disp_update_dly,a
  1730  000213   2DFF(1)  		mov	a,#(0xFF)
  1731  000214   2F15(1)  		b0mov	_disp_map + 0, a
  1732  000215   2F16(1)  		b0mov	_disp_map + 1, a
  1733  000216   2F17(1)  		b0mov	_disp_map + 2, a
  1734  000217   2D7B(1)  		mov	a,#(123)
  1735  000218   2F1E(1)  		b0mov	_cur_input_volgate,a
  1736  000219   2D63(1)  		mov	a,#(99)
  1737  00021A   2F1F(1)  		b0mov	_cur_batt_capacity,a
  1738  00021B             
  1739  00021B   6FDF(1)    	B0BSET FGIE
  1740  00021C   6000(1)  	b0bclr	system_idle_flag
  1741  00021D   2D64(1)  	mov	a,#(SYSTEM_TICK * 5)
  1742  00021E   2F04(1)  	b0mov	_enter_idle_dly,a
  1743  00021F             public _main
  1744  00021F             _main:
  1745  00021F   2D5A(1)  	MOV 	A, #(0x5A)
  1746  000220   2FCC(1)    	B0MOV 	WDTR, A
  1747  000221             	
  1748  000221   7000(1+S)  	b0bts0  system_idle_flag
  1749  000222   82F9(2)  	jmp	_main_system_idle_function
  1750  000223             //====================================================================
  1751  000223             //NORMAL
  1752  000223   7900(1+S)    	b0bts1	system_tick_flag
  1753  000224   821F(2)  	jmp	_main
  1754  000225   6100(1)  	b0bclr	system_tick_flag
  1755  000226             //================================================
  1756  000226             		SensorFuntion
  1757  000226   1622(1+S)  		incms	_adc_ch_dly
  1758  000227   0000(1)  		nop
  1759  000228   2E22(1)  		b0mov	a,_adc_ch_dly
  1760  000229   240A(1)  		sub	a,#(10)
  1761  00022A   7A86(1+S)  		b0bts1	fc
  1762  00022B   8247(2)  		jmp	SensorFuntion_END  		
  1763  00022C   2B22(1)  		clr	_adc_ch_dly
  1764  00022D   2E19(1)  		b0mov	a,_adc_ch_index
  1765  00022E   03CE(1)  	b0add PCl ,a
  1766  00022F   8232(2)  		jmp	SensorFuntion_BATT   
  1767  000230   8239(2)  		jmp	SensorFuntion_INPUT   
  1768  000231   8240(2)  		jmp	SensorFuntion_OUTPUT
  1769  000232   2D95(1)  		mov	a,#(5 | BIT4 | BIT7)
  1770  000233   2FB1(1)  		b0mov	ADM,a
  1771  000234   C06B(2)  		call	SensorADConvert
  1772  000235   C089(2)                  call	SensorMathBattCapacity
  1773  000236   2D01(1)  		mov	a,#(1)
  1774  000237   2F19(1)  		b0mov	_adc_ch_index,a
  1775  000238   8247(2)  		jmp	SensorFuntion_END
  1776  000239   2D93(1)  		mov	a,#(3 | BIT4 | BIT7)
  1777  00023A   2FB1(1)  		b0mov	ADM,a
  1778  00023B   C06B(2)  		call	SensorADConvert
  1779  00023C   C18D(2)  		call	SensorMathInputVolgate
  1780  00023D   2D02(1)  		mov	a,#(2)
  1781  00023E   2F19(1)  		b0mov	_adc_ch_index,a
  1782  00023F   8247(2)  		jmp	SensorFuntion_END
  1783  000240   7CD4(1+S)  		b0bts1	P4.4
  1784  000241   8244(2)  		jmp	$+3
  1785  000242   6F00(1)  		b0bset 	_is_output_en_flag
  1786  000243   8245(2)  		jmp	$+2
  1787  000244   6700(1)  		b0bclr	_is_output_en_flag
  1788  000245   2D00(1)  		mov	a,#(0)
  1789  000246   2F19(1)  		b0mov	_adc_ch_index,a
  1790  000247   C1AC(2)  	call	KeyFuntion
  1791  000248             		LedFunction
  1792  000248   7D00(1+S)  		b0bts1	_led_on_off_flag
  1793  000249   82A7(2)  		jmp	LedFunction_Exit
  1794  00024A   2E25(1)  		b0mov	a,_led_mode
  1795  00024B   2401(1)  		sub	a,#(1)
  1796  00024C   03CE(1)  	b0add PCl ,a
  1797  00024D   8252(2)  		jmp	LedFunction_R_FLASH
  1798  00024E   8273(2)  		jmp	LedFunction_RB 
  1799  00024F   829B(2)  		jmp	LedFunction_R
  1800  000250   829F(2)  		jmp	LedFunction_B
  1801  000251   82A3(2)  		jmp	LedFunction_W
  1802  000252   63D5(1)  		b0bclr	P5.3
  1803  000253   63D0(1)  		b0bclr	P0.3
  1804  000254   2627(1+S)  		decms	_led_dly
  1805  000255   82A7(2)  		jmp	LedFunction_Exit
  1806  000256   62D0(1)  		b0bclr	P0.2
  1807  000257   2E26(1)  		b0mov	a,_led_mode_sub
  1808  000258   2401(1)  		sub	a,#(1)
  1809  000259   03CE(1)  	b0add PCl ,a
  1810  00025A   826C(2)  		jmp	LedFunction_R_FLASH_OFF_S_2
  1811  00025B   8269(2)  		jmp	LedFunction_R_FLASH_ON_S_2
  1812  00025C   826C(2)  		jmp	LedFunction_R_FLASH_OFF_S_1
  1813  00025D   8269(2)  		jmp	LedFunction_R_FLASH_ON_S_1
  1814  00025E   8267(2)  		jmp	LedFunction_R_FLASH_OFF_L_3
  1815  00025F   8264(2)  		jmp	LedFunction_R_FLASH_ON_L_3
  1816  000260   8267(2)  		jmp	LedFunction_R_FLASH_OFF_L_2
  1817  000261   8264(2)  		jmp	LedFunction_R_FLASH_ON_L_2
  1818  000262   8267(2)  		jmp	LedFunction_R_FLASH_OFF_L_1
  1819  000263   8264(2)  		jmp	LedFunction_R_FLASH_ON_L_1
  1820  000264   6AD0(1)  		b0bset	P0.2
  1821  000265   2D0A(1)  		mov	a,#(10)
  1822  000266   826D(2)  		jmp	LedFunction_R_FLASH_END
  1823  000267   2D0A(1)  		mov	a,#(10)
  1824  000268   826D(2)  		jmp	LedFunction_R_FLASH_END
  1825  000269   6AD0(1)  		b0bset	P0.2
  1826  00026A   2D03(1)  		mov	a,#(3)
  1827  00026B   826D(2)  		jmp	LedFunction_R_FLASH_END
  1828  00026C   2D03(1)  		mov	a,#(3)
  1829  00026D   2F27(1)  		b0mov	_led_dly,a
  1830  00026E   2626(1+S)  		decms	_led_mode_sub
  1831  00026F   82A7(2)  		jmp	LedFunction_Exit
  1832  000270   2D0A(1)  		mov	a,#(10)
  1833  000271   2F26(1)  		b0mov	_led_mode_sub,a
  1834  000272   82A7(2)  		jmp	LedFunction_Exit
  1835  000273   63D5(1)  		b0bclr	P5.3
  1836  000274   2627(1+S)  		decms	_led_dly
  1837  000275   82A7(2)  		jmp	LedFunction_Exit
  1838  000276   62D0(1)  		b0bclr	P0.2
  1839  000277   63D0(1)  		b0bclr	P0.3
  1840  000278   2E26(1)  		b0mov	a,_led_mode_sub
  1841  000279   2401(1)  		sub	a,#(1)
  1842  00027A   03CE(1)  	b0add PCl ,a
  1843  00027B   8293(2)  		jmp	LedFunction_RB_B_OFF3
  1844  00027C   828E(2)  		jmp	LedFunction_RB_B_ON3
  1845  00027D   8291(2)  		jmp	LedFunction_RB_B_OFF2
  1846  00027E   828E(2)  		jmp	LedFunction_RB_B_ON2
  1847  00027F   8291(2)  		jmp	LedFunction_RB_B_OFF1
  1848  000280   828E(2)  		jmp	LedFunction_RB_B_ON1
  1849  000281   828C(2)  		jmp	LedFunction_RB_R_OFF3
  1850  000282   8287(2)  		jmp	LedFunction_RB_R_ON3
  1851  000283   828A(2)  		jmp	LedFunction_RB_R_OFF2
  1852  000284   8287(2)  		jmp	LedFunction_RB_R_ON2
  1853  000285   828A(2)  		jmp	LedFunction_RB_R_OFF1
  1854  000286   8287(2)  		jmp	LedFunction_RB_R_ON1
  1855  000287   6AD0(1)  		b0bset	P0.2
  1856  000288   2D03(1)  		mov	a,#(3)
  1857  000289   8295(2)  		jmp	LedFunction_RB_END
  1858  00028A   2D03(1)  		mov	a,#(3)
  1859  00028B   8295(2)  		jmp	LedFunction_RB_END
  1860  00028C   2D0A(1)  		mov	a,#(10)
  1861  00028D   8295(2)  		jmp	LedFunction_RB_END
  1862  00028E   6BD0(1)  		b0bset	P0.3
  1863  00028F   2D03(1)  		mov	a,#(3)
  1864  000290   8295(2)  		jmp	LedFunction_RB_END
  1865  000291   2D03(1)  		mov	a,#(3)
  1866  000292   8295(2)  		jmp	LedFunction_RB_END
  1867  000293   2D0A(1)  		mov	a,#(10)
  1868  000294   8295(2)  		jmp	LedFunction_RB_END
  1869  000295   2F27(1)  		b0mov	_led_dly,a
  1870  000296   2626(1+S)  		decms	_led_mode_sub
  1871  000297   82A7(2)  		jmp	LedFunction_Exit
  1872  000298   2D0C(1)  		mov	a,#(12)
  1873  000299   2F26(1)  		b0mov	_led_mode_sub,a
  1874  00029A   82A7(2)  		jmp	LedFunction_Exit
  1875  00029B   63D5(1)  		b0bclr	P5.3
  1876  00029C   6AD0(1)  		b0bset	P0.2
  1877  00029D   63D0(1)  		b0bclr	P0.3
  1878  00029E   82A7(2)  		jmp	LedFunction_Exit
  1879  00029F   63D5(1)  		b0bclr	P5.3
  1880  0002A0   62D0(1)  		b0bclr	P0.2
  1881  0002A1   6BD0(1)  		b0bset	P0.3
  1882  0002A2   82A7(2)  		jmp	LedFunction_Exit
  1883  0002A3   6BD5(1)  		b0bset	P5.3
  1884  0002A4   62D0(1)  		b0bclr	P0.2
  1885  0002A5   63D0(1)  		b0bclr	P0.3
  1886  0002A6   82A7(2)  		jmp	LedFunction_Exit
  1887  0002A7             		DisplayFuntion
  1888  0002A7   2613(1+S)  		decms	_disp_swap_dly
  1889  0002A8   82B2(2)  		jmp	DisplayFuntion_start_0
  1890  0002A9   2D3C(1)  		mov	a,#(SYSTEM_TICK * 3)
  1891  0002AA   2F13(1)  		b0mov	_disp_swap_dly,a
  1892  0002AB   7C00(1+S)  		b0bts1  _input_power_flag
  1893  0002AC   82AF(2)  		jmp	$+3
  1894  0002AD   7B00(1+S)  		b0bts1	_disp_voltage_flag
  1895  0002AE   82B1(2)  		jmp	$+3
  1896  0002AF   6300(1)  		b0bclr  _disp_voltage_flag
  1897  0002B0   82B2(2)  		jmp	$+2
  1898  0002B1   6B00(1)  		b0bset	_disp_voltage_flag
  1899  0002B2   7600(1+S)  		b0bts0	_lcd_init_flag
  1900  0002B3   82BD(2)  		jmp	DisplayFuntion_start
  1901  0002B4   2D00(1)  		mov	a,#(0)
  1902  0002B5   0714(1+S)  		cmprs	a,_disp_update_dly
  1903  0002B6   82B8(2)  		jmp	$ + 2
  1904  0002B7   82BA(2)  		jmp	$ + 3
  1905  0002B8   2614(1+S)  		decms	_disp_update_dly
  1906  0002B9   82E4(2)  		jmp	DisplayFuntion_END
  1907  0002BA   6E00(1)  		b0bset	_lcd_init_flag
  1908  0002BB   2D14(1)  		mov	a,#(20)
  1909  0002BC   2F14(1)  		b0mov	_disp_update_dly,a
  1910  0002BD   2D00(1)  		mov	a,#(0x00)
  1911  0002BE   2F15(1)  		b0mov	_disp_map + 0, a
  1912  0002BF   2F16(1)  		b0mov	_disp_map + 1, a
  1913  0002C0   2F17(1)  		b0mov	_disp_map + 2, a
  1914  0002C1   7300(1+S)  		b0bts0	_disp_voltage_flag
  1915  0002C2   82C5(2)  		jmp	$+3
  1916  0002C3   1E1F(1)  		mov	a,_cur_batt_capacity
  1917  0002C4   82C6(2)  		jmp	$+2
  1918  0002C5   1E1E(1)  		mov	a,_cur_input_volgate
  1919  0002C6   2F05(1)  		b0mov	_d_math_input0+0,a
  1920  0002C7   2D64(1)  		mov	a,#(100)
  1921  0002C8   2F08(1)  		b0mov	_d_math_input1+0,a
  1922  0002C9   C020(2)  		call	__div_u8_u8	
  1923  0002CA   3401(1)  		b0mov	Y,#led_num_tab$M
  1924  0002CB   33DC(1)  		b0mov	Z,#led_num_tab$L
  1925  0002CC   2E0B(1)  		b0mov	A,_d_math_output0+0	//百位
  1926  0002CD   1383(1)  		add	Z,A
  1927  0002CE   0D00(2)  		movc
  1928  0002CF   2F15(1)  		b0mov	_disp_map+0,a
  1929  0002D0   2E0E(1)  		b0mov	a,_d_math_output1+0
  1930  0002D1   2F05(1)  		b0mov	_d_math_input0+0,a
  1931  0002D2   2D0A(1)  		mov	a,#(10)
  1932  0002D3   2F08(1)  		b0mov	_d_math_input1+0,a
  1933  0002D4   C020(2)  		call	__div_u8_u8
  1934  0002D5   3401(1)  		b0mov	Y,#led_num_tab$M
  1935  0002D6   33DC(1)  		b0mov	Z,#led_num_tab$L
  1936  0002D7   2E0B(1)  		b0mov	A,_d_math_output0+0	//十位
  1937  0002D8   1383(1)  		add	Z,A
  1938  0002D9   0D00(2)  		movc
  1939  0002DA   2F16(1)  		b0mov	_disp_map+1,a
  1940  0002DB   33DC(1)  		b0mov	Z,#led_num_tab$L
  1941  0002DC   2E0E(1)  		b0mov	A,_d_math_output1+0	//个位
  1942  0002DD   1383(1)  		add	Z,A
  1943  0002DE   0D00(2)  		movc
  1944  0002DF   2F17(1)  		b0mov	_disp_map+2,a
  1945  0002E0   7B00(1+S)  		b0bts1	_disp_voltage_flag
  1946  0002E1   82E4(2)  		jmp	DisplayFuntion_END
  1947  0002E2   2D80(1)  		mov	a,#(LCD_DP)
  1948  0002E3   1917(1)  		or	_disp_map+2,a
  1949  0002E4             		//GreenMode
  1950  0002E4             //================================================
  1951  0002E4   7400(1+S)  		b0bts0	_input_power_flag
  1952  0002E5   821F(2)  		jmp	_main
  1953  0002E6   7500(1+S)  		b0bts0	_led_on_off_flag
  1954  0002E7   821F(2)  		jmp	_main
  1955  0002E8   7700(1+S)  		b0bts0	_is_output_en_flag
  1956  0002E9   821F(2)  		jmp	_main
  1957  0002EA             
  1958  0002EA   2604(1+S)  		decms	_enter_idle_dly
  1959  0002EB   821F(2)  		jmp	_main
  1960  0002EC             		
  1961  0002EC             _main_system_normal_function_enter_idle:
  1962  0002EC   67DA(1)  		b0bclr	FTC0ENB			//stop timer
  1963  0002ED             		COM_ALL_LOW			//turnoff disp
  1964  0002ED   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  1965  0002EE   29D0(1)  		and	P0,a
  1966  0002EF   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  1967  0002F0   29D4(1)  		and	P4,a
  1968  0002F1   2DEF(1)  		mov	a,#(~(BIT4))
  1969  0002F2   29D5(1)  		and	P5,a
  1970  0002F3             
  1971  0002F3   2D00(1)  		mov	a,#(0)
  1972  0002F4   2FB1(1)  		b0mov	ADM,a
  1973  0002F5             
  1974  0002F5   6800(1)  		b0bset	system_idle_flag
  1975  0002F6             		SlowMode
  1976  0002F6   6ACA(1)  		B0BSET	FCLKMD
  1977  0002F7   69CA(1)  		B0BSET	FSTPHX
  1978  0002F8   821F(2)  		jmp	_main
  1979  0002F9             //====================================================================
  1980  0002F9             //IDLE
  1981  0002F9             _main_system_idle_function:
  1982  0002F9   C1A6(2)          	call	SensorFuntion_IDLE
  1983  0002FA             
  1984  0002FA   7CD0(1+S)  		b0bts1	KEY_INPUT
  1985  0002FB   8303(2)  		jmp	_main_system_idle_function_exit_idle_key
  1986  0002FC   7400(1+S)  		b0bts0	_input_power_flag
  1987  0002FD   8305(2)  		jmp	_main_system_idle_function_exit_idle
  1988  0002FE   7500(1+S)  		b0bts0	_led_on_off_flag
  1989  0002FF   8305(2)  		jmp	_main_system_idle_function_exit_idle
  1990  000300   7700(1+S)  		b0bts0	_is_output_en_flag
  1991  000301   8305(2)  		jmp	_main_system_idle_function_exit_idle
  1992  000302   821F(2)  		jmp	_main
  1993  000303             _main_system_idle_function_exit_idle_key:
  1994  000303   2D64(1)  		mov	a,#(SYSTEM_TICK * 5)
  1995  000304   2F04(1)  		b0mov	_enter_idle_dly,a
  1996  000305             _main_system_idle_function_exit_idle:
  1997  000305             		Slow2Normal
  1998  000305   61CA(1)  		B0BCLR	FSTPHX
  1999  000306   0000(1)  		NOP
  2000  000307   0000(1)  		NOP
  2001  000308   0000(1)  		NOP
  2002  000309   62CA(1)  		B0BCLR	FCLKMD
  2003  00030A   6000(1)  		b0bclr	system_idle_flag
  2004  00030B   6FDA(1)  		b0bset 	FTC0ENB			//start timer
  2005  00030C   821F(2)    	JMP _main
  2006  00030D             
  2007  00030D             isr:
  2008  00030D   0400(1)  	push
  2009  00030E   7DC8(1+S)  	b0bts1	FTC0IRQ
  2010  00030F   83A4(2)          jmp	isr_exit
  2011  000310   65C8(1)  	b0bclr  FTC0IRQ
  2012  000311             	
  2013  000311             	LedScan_ISR
  2014  000311   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2015  000312   29D0(1)  		and	P0,a
  2016  000313   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2017  000314   29D4(1)  		and	P4,a
  2018  000315   2DEF(1)  		mov	a,#(~(BIT4))
  2019  000316   29D5(1)  		and	P5,a
  2020  000317   0000(1)  		nop
  2021  000318   2DFC(1)  		mov	a,#(~(BIT0 | BIT1))
  2022  000319   29B8(1)  		and	P0M,a
  2023  00031A   2DF8(1)  		mov	a,#(~(BIT0 | BIT1 | BIT2))
  2024  00031B   29C4(1)  		and	P4M,a
  2025  00031C   2DEF(1)  		mov	a,#(~(BIT4))
  2026  00031D   29C5(1)  		and	P5M,a
  2027  00031E   2618(1+S)  		decms	_led_scan_index
  2028  00031F   8322(2)  		jmp	$ + 3
  2029  000320   2D06(1)  		mov	a,#(6)
  2030  000321   2F18(1)  		b0mov	_led_scan_index,a
  2031  000322   1E18(1)  		mov	a,_led_scan_index
  2032  000323   2401(1)  		sub	a,#(1)
  2033  000324   03CE(1)  	b0add PCl ,a
  2034  000325   832B(2)  		jmp	LedScan_ISR_COM1
  2035  000326   833A(2)  		jmp	LedScan_ISR_COM2
  2036  000327   8351(2)  		jmp	LedScan_ISR_COM3
  2037  000328   8368(2)  		jmp	LedScan_ISR_COM4
  2038  000329   837B(2)  		jmp	LedScan_ISR_COM5
  2039  00032A   838E(2)  		jmp	LedScan_ISR_COM6
  2040  00032B   7F15(1+S)  		b0bts1 _disp_map+0.7
  2041  00032C   832F(2)  		jmp	$+3
  2042  00032D   69D4(1)  		b0bset	P4.1
  2043  00032E   69C4(1)  		b0bset	P4M.1
  2044  00032F   7F16(1+S)  		b0bts1 _disp_map+1.7
  2045  000330   8333(2)  		jmp	$+3
  2046  000331   6CD5(1)  		b0bset	P5.4
  2047  000332   6CC5(1)  		b0bset	P5M.4
  2048  000333   7F17(1+S)  		b0bts1 _disp_map+2.7
  2049  000334   8337(2)  		jmp	$+3
  2050  000335   69D0(1)  		b0bset	P0.1
  2051  000336   69B8(1)  		b0bset	P0M.1
  2052  000337   60D4(1)  		b0bclr	P4.0
  2053  000338   68C4(1)  		b0bset	P4M.0
  2054  000339   839C(2)  		jmp	LedScan_ISR_END
  2055  00033A   7815(1+S)  		b0bts1 _disp_map+0.0
  2056  00033B   833E(2)  		jmp	$+3
  2057  00033C   68D0(1)  		b0bset	P0.0
  2058  00033D   68B8(1)  		b0bset	P0M.0
  2059  00033E   7915(1+S)  		b0bts1 _disp_map+0.1
  2060  00033F   8342(2)  		jmp	$+3
  2061  000340   68D4(1)  		b0bset	P4.0
  2062  000341   68C4(1)  		b0bset	P4M.0
  2063  000342   7A15(1+S)  		b0bts1 _disp_map+0.2
  2064  000343   8346(2)  		jmp	$+3
  2065  000344   69D4(1)  		b0bset	P4.1
  2066  000345   69C4(1)  		b0bset	P4M.1
  2067  000346   7B15(1+S)  		b0bts1 _disp_map+0.3
  2068  000347   834A(2)  		jmp	$+3
  2069  000348   6CD5(1)  		b0bset	P5.4
  2070  000349   6CC5(1)  		b0bset	P5M.4
  2071  00034A   7C15(1+S)  		b0bts1 _disp_map+0.4
  2072  00034B   834E(2)  		jmp	$+3
  2073  00034C   69D0(1)  		b0bset	P0.1
  2074  00034D   69B8(1)  		b0bset	P0M.1
  2075  00034E   62D4(1)  		b0bclr	P4.2
  2076  00034F   6AC4(1)  		b0bset	P4M.2
  2077  000350   839C(2)  		jmp	LedScan_ISR_END
  2078  000351   7816(1+S)  		b0bts1 _disp_map+1.0
  2079  000352   8355(2)  		jmp	$+3
  2080  000353   60D0(1)  		b0bclr	P0.0
  2081  000354   68B8(1)  		b0bset	P0M.0
  2082  000355   7916(1+S)  		b0bts1 _disp_map+1.1
  2083  000356   8359(2)  		jmp	$+3
  2084  000357   60D4(1)  		b0bclr	P4.0
  2085  000358   68C4(1)  		b0bset	P4M.0
  2086  000359   7A16(1+S)  		b0bts1 _disp_map+1.2
  2087  00035A   835D(2)  		jmp	$+3
  2088  00035B   61D4(1)  		b0bclr	P4.1
  2089  00035C   69C4(1)  		b0bset	P4M.1
  2090  00035D   7B16(1+S)  		b0bts1 _disp_map+1.3
  2091  00035E   8361(2)  		jmp	$+3
  2092  00035F   64D5(1)  		b0bclr	P5.4
  2093  000360   6CC5(1)  		b0bset	P5M.4
  2094  000361   7C16(1+S)  		b0bts1 _disp_map+1.4
  2095  000362   8365(2)  		jmp	$+3
  2096  000363   61D0(1)  		b0bclr	P0.1
  2097  000364   69B8(1)  		b0bset	P0M.1
  2098  000365   6AD4(1)  		b0bset	P4.2
  2099  000366   6AC4(1)  		b0bset	P4M.2
  2100  000367   839C(2)  		jmp	LedScan_ISR_END
  2101  000368   7D15(1+S)  		b0bts1 _disp_map+0.5
  2102  000369   836C(2)  		jmp	$+3
  2103  00036A   68D4(1)  		b0bset	P4.0
  2104  00036B   68C4(1)  		b0bset	P4M.0
  2105  00036C   7E15(1+S)  		b0bts1 _disp_map+0.6
  2106  00036D   8370(2)  		jmp	$+3
  2107  00036E   69D4(1)  		b0bset	P4.1
  2108  00036F   69C4(1)  		b0bset	P4M.1
  2109  000370   7D16(1+S)  		b0bts1 _disp_map+1.5
  2110  000371   8374(2)  		jmp	$+3
  2111  000372   6CD5(1)  		b0bset	P5.4
  2112  000373   6CC5(1)  		b0bset	P5M.4
  2113  000374   7E16(1+S)  		b0bts1 _disp_map+1.6
  2114  000375   8378(2)  		jmp	$+3
  2115  000376   69D0(1)  		b0bset	P0.1
  2116  000377   69B8(1)  		b0bset	P0M.1
  2117  000378   60D0(1)  		b0bclr	P0.0
  2118  000379   68B8(1)  		b0bset	P0M.0
  2119  00037A   839C(2)  		jmp	LedScan_ISR_END
  2120  00037B   7817(1+S)  		b0bts1 _disp_map+2.0
  2121  00037C   837F(2)  		jmp	$+3
  2122  00037D   60D4(1)  		b0bclr	P4.0
  2123  00037E   68C4(1)  		b0bset	P4M.0
  2124  00037F   7917(1+S)  		b0bts1 _disp_map+2.1
  2125  000380   8383(2)  		jmp	$+3
  2126  000381   61D4(1)  		b0bclr	P4.1
  2127  000382   69C4(1)  		b0bset	P4M.1
  2128  000383   7A17(1+S)  		b0bts1 _disp_map+2.2
  2129  000384   8387(2)  		jmp	$+3
  2130  000385   64D5(1)  		b0bclr	P5.4
  2131  000386   6CC5(1)  		b0bset	P5M.4
  2132  000387   7B17(1+S)  		b0bts1 _disp_map+2.3
  2133  000388   838B(2)  		jmp	$+3
  2134  000389   61D0(1)  		b0bclr	P0.1
  2135  00038A   69B8(1)  		b0bset	P0M.1
  2136  00038B   68D0(1)  		b0bset	P0.0
  2137  00038C   68B8(1)  		b0bset	P0M.0
  2138  00038D   839C(2)  		jmp	LedScan_ISR_END
  2139  00038E   7C17(1+S)  		b0bts1 _disp_map+2.4
  2140  00038F   8392(2)  		jmp	$+3
  2141  000390   61D4(1)  		b0bclr	P4.1
  2142  000391   69C4(1)  		b0bset	P4M.1
  2143  000392   7D17(1+S)  		b0bts1 _disp_map+2.5
  2144  000393   8396(2)  		jmp	$+3
  2145  000394   64D5(1)  		b0bclr	P5.4
  2146  000395   6CC5(1)  		b0bset	P5M.4
  2147  000396   7E17(1+S)  		b0bts1 _disp_map+2.6
  2148  000397   839A(2)  		jmp	$+3
  2149  000398   61D0(1)  		b0bclr	P0.1
  2150  000399   69B8(1)  		b0bset	P0M.1
  2151  00039A   68D4(1)  		b0bset	P4.0
  2152  00039B   68C4(1)  		b0bset	P4M.0
  2153  00039C             	
  2154  00039C             	//if(_50ms_count >= 20)
  2155  00039C             	//{
  2156  00039C             	//	_50ms_count = 0;
  2157  00039C             	//	system_tick_flag = 1
  2158  00039C             	//}
  2159  00039C             	//else
  2160  00039C             	//{
  2161  00039C             	//	++_50ms_count;
  2162  00039C             	//}
  2163  00039C                isr_50ms_start:
  2164  00039C   2E03(1)  	b0mov	a,_50ms_count
  2165  00039D   2414(1)  	sub	a,#(20)       	//2.5ms * 20 = 50ms
  2166  00039E   7A86(1+S)  	b0bts1  fc		
  2167  00039F   83A2(2)          jmp	isr_50ms_1	//<20
  2168  0003A0   2B03(1)  	clr	_50ms_count
  2169  0003A1   6900(1)  	b0bset	system_tick_flag
  2170  0003A2                isr_50ms_1:
  2171  0003A2             	//++_50ms_count
  2172  0003A2   1603(1+S)  	incms _50ms_count
  2173  0003A3   0000(1)  	nop
  2174  0003A4                isr_50ms_end:
  2175  0003A4             isr_exit:
  2176  0003A4   0500(1)  	pop
  2177  0003A5   0F00(2)  	reti
  2178  0003A6             
  2179  0003A6             
  2180  0003A6             .ENDP
